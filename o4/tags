!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR_TO_IPPORT	vp_sdk/common.h	13;"	d
AR	config.mak	/^AR      = $(CROSS_COMPILE)ar$/;"	m
ASSERT	vp_sys/vp_flowsvr.c	18;"	d	file:
Accept	vp_sdk/common.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen)$/;"	f
BINS	Makefile	/^BINS		= $(VP_VSTCP) $(VP_VSUDP) $(VP_PORTMAP) $(VP_VSUDP_M) t$/;"	m
BINS	promon/Makefile	/^BINS		= $(BIN_PROMON)$/;"	m
BINS	vp_ferry/Makefile	/^BINS		= $(VP_FERRY)$/;"	m
BINS	vp_sys/Makefile	/^BINS		= sys-manager	\\$/;"	m
BIN_PROMON	promon/Makefile	/^BIN_PROMON	= vp-promon$/;"	m
BOOL	vp_sdk/udeftype.h	/^} BOOL, bool;$/;"	t	typeref:enum:__anon3
BUF_SIZE	vp_sdk/config.h	16;"	d
Bind	vp_sdk/common.c	/^int Bind(int sockfd, struct sockaddr_in saddr, u32 socklen)$/;"	f
CC	config.mak	/^CC      = $(CROSS_COMPILE)g++ -m64 -g$/;"	m
CD	config.mak	/^CD		= cd$/;"	m
CFLAGS	Makefile	/^CFLAGS   	= $(G_CFLAGS)$/;"	m
CFLAGS	promon/Makefile	/^CFLAGS		= $(G_CFLAGS)$/;"	m
CFLAGS	vp_ferry/Makefile	/^CFLAGS   	= $(G_CFLAGS)$/;"	m
CFLAGS	vp_mod/Makefile	/^CFLAGS   	= $(G_CFLAGS) $/;"	m
CFLAGS	vp_sdk/Makefile	/^CFLAGS		= $(WARN)$/;"	m
CFLAGS	vp_sys/Makefile	/^CFLAGS		= $(G_CFLAGS)$/;"	m
CHECK_INTERVAL	vp_sdk/license.h	94;"	d
CLI_IP	vp_ferry/ferry_sandun.c	4;"	d	file:
CLI_PORT	vp_ferry/ferry_sandun.c	5;"	d	file:
CLOSE	vp_mod/mod_monitor_flow.h	5;"	d
CONTENT_LENGTH	vp_sdk/vp_uthttp.h	20;"	d
COUNTTOUT	vp_sdk/common.h	9;"	d
CP	config.mak	/^CP		= cp -f$/;"	m
CROSS_COMPILE	config.mak	/^CROSS_COMPILE = #arm-linux-$/;"	m
C_TOTAL	vp_sdk/config.h	/^    C_TOTAL$/;"	e	enum:m_conf_value
Connect	vp_sdk/common.c	/^int Connect(int sockfd, struct sockaddr *serv_addr, socklen_t addrlen, int tm_out)$/;"	f
DBG_OUT	vp_mod/filter_rules.c	15;"	d	file:
DB_NAME	vp_sdk/config.h	60;"	d
DB_PATH	vp_sdk/config.h	59;"	d
DEFAULT_APP_DIR	vp_sdk/config.h	54;"	d
DEFAULT_TOUT	vp_ferry/vp_ferry.c	/^const static int  DEFAULT_TOUT = 180;$/;"	v	file:
DESTROY_IPPOOL_LIST	vp_sdk/pool_ip.h	55;"	d
DESTROY_PP_MUTEX	vp_sdk/pool_port.h	34;"	d
DESTROY_VISIT_LIST	vp_sdk/visit_list.h	61;"	d
DO_CLOSE	vp_sdk/config.h	24;"	d
DO_EXIT	vp_sdk/config.h	21;"	d
DO_INIT	vp_sdk/config.h	26;"	d
DO_QUIT	vp_sdk/config.h	25;"	d
DO_RECEIVER_T	vp_sdk/vp_multi_protol.h	/^typedef int(*DO_RECEIVER_T)(int sockfd, void *put, char **pkg, u32 *len_pkg, SA*src_addr, socklen_t *addrlen);$/;"	t
DO_REPLY	vp_sdk/config.h	23;"	d
DO_REQST	vp_sdk/config.h	22;"	d
DT_CLOSE_CONNECT	vp_sdk/vp_pack.h	/^    DT_CLOSE_CONNECT,$/;"	e	enum:__e_mode
DT_ERROR	vp_sdk/vp_pack.h	/^    DT_ERROR = -1,$/;"	e	enum:__e_mode
DT_NOSEND	vp_sdk/vp_pack.h	/^    DT_NOSEND,$/;"	e	enum:__e_mode
DT_QUIT	vp_sdk/vp_pack.h	/^    DT_QUIT$/;"	e	enum:__e_mode
DT_REQST_VIDEO	vp_sdk/vp_pack.h	/^    DT_REQST_VIDEO,$/;"	e	enum:__e_mode
DT_SEND	vp_sdk/vp_pack.h	/^    DT_SEND,$/;"	e	enum:__e_mode
D_APORT	vp_ferry/ferry_shanxi_jonet.c	/^    D_APORT,$/;"	e	enum:e_ports	file:
D_AUTHIP	vp_sdk/config.h	/^    D_AUTHIP,$/;"	e	enum:m_conf_value
D_AUTHPORT	vp_sdk/config.h	/^    D_AUTHPORT,$/;"	e	enum:m_conf_value
D_IP	vp_sdk/config.h	/^    D_IP,       \/\/ dest ip$/;"	e	enum:m_conf_info
D_VIDEOIP	vp_sdk/config.h	/^    D_VIDEOIP,$/;"	e	enum:m_conf_value
D_VIDEOPORT	vp_sdk/config.h	/^    D_VIDEOPORT,$/;"	e	enum:m_conf_value
D_VPORT	vp_ferry/ferry_shanxi_jonet.c	/^    D_VPORT,$/;"	e	enum:e_ports	file:
EMPTY_STR	vp_mod/filter_rules.c	/^static char EMPTY_STR[1] = {0};$/;"	v	file:
EPOLLWAITTIME	vp_sdk/config.h	41;"	d
ERR_OUT	vp_mod/filter_rules.c	14;"	d	file:
EVF_H264	vp_mod/mod_videoformat_filter.h	/^    EVF_H264    = 1$/;"	e	enum:_e_videoformat
EVF_NONE	vp_mod/mod_videoformat_filter.h	/^    EVF_NONE    = 0,$/;"	e	enum:_e_videoformat
EXIT_UDP_PROXY	vp_sdk/vp_udpproxy.c	8;"	d	file:
E_TFORMAT_ALL	vp_mod/check_protocol_format.h	/^    E_TFORMAT_ALL = 2,$/;"	e	enum:e_trans_format
E_TFORMAT_ERROR	vp_mod/check_protocol_format.h	/^    E_TFORMAT_ERROR = 4$/;"	e	enum:e_trans_format
E_TFORMAT_NONE	vp_mod/check_protocol_format.h	/^    E_TFORMAT_NONE = 0,$/;"	e	enum:e_trans_format
E_TFORMAT_RTP	vp_mod/check_protocol_format.h	/^    E_TFORMAT_RTP = 1,$/;"	e	enum:e_trans_format
FALSE	vp_sdk/udeftype.h	/^    FALSE = 0,$/;"	e	enum:__anon3
FD_MAXSIZE	vp_sdk/config.h	42;"	d
FERRY_HENAN_ZHONGXING	vp_ferry/pm_proxy.h	212;"	d
FERRY_MANU_AMPLESKY	vp_ferry/pm_proxy.h	36;"	d
FERRY_MANU_AMPLESKY28181	vp_ferry/pm_proxy.h	42;"	d
FERRY_MANU_DAHUA	vp_ferry/pm_proxy.h	137;"	d
FERRY_MANU_DATANG	vp_ferry/pm_proxy.h	126;"	d
FERRY_MANU_FIBER	vp_ferry/pm_proxy.h	214;"	d
FERRY_MANU_H3C	vp_ferry/pm_proxy.h	115;"	d
FERRY_MANU_H3C_FS	vp_ferry/pm_proxy.h	164;"	d
FERRY_MANU_H3C_HARBIN	vp_ferry/pm_proxy.h	173;"	d
FERRY_MANU_H3C_V8500	vp_ferry/pm_proxy.h	97;"	d
FERRY_MANU_HARERBIN_KEDA_CHENGGUAN	vp_ferry/pm_proxy.h	155;"	d
FERRY_MANU_HIK28181	vp_ferry/pm_proxy.h	59;"	d
FERRY_MANU_HUASAN	vp_ferry/pm_proxy.h	89;"	d
FERRY_MANU_JCH3C	vp_ferry/pm_proxy.h	106;"	d
FERRY_MANU_KEDA2800	vp_ferry/pm_proxy.h	67;"	d
FERRY_MANU_KEDA2801E	vp_ferry/pm_proxy.h	76;"	d
FERRY_MANU_SANDUN	vp_ferry/pm_proxy.h	82;"	d
FERRY_MANU_TIANDIWEIYE	vp_ferry/pm_proxy.h	182;"	d
FERRY_MANU_ZHONGXING	vp_ferry/pm_proxy.h	206;"	d
FERRY_MANU_ZSYH	vp_ferry/pm_proxy.h	146;"	d
FERRY_MENU_HIK	vp_ferry/pm_proxy.h	191;"	d
FERRY_SHANGXI_JONET	vp_ferry/pm_proxy.h	197;"	d
FIFOMODE	vp_sdk/defflow.h	6;"	d
FIFO_SERVER	vp_sdk/defflow.h	9;"	d
FIF_CHK_ACCCTL	vp_mod/filter_rules.h	/^	FIF_CHK_ACCCTL	= ~(1 << 3),$/;"	e	enum:__flt_chk_flg
FIF_CHK_ALL	vp_mod/filter_rules.h	/^    FIF_CHK_ALL     = 0,$/;"	e	enum:__flt_chk_flg
FIF_CHK_CTRLCMD	vp_mod/filter_rules.h	/^	FIF_CHK_CTRLCMD	= ~(1 << 5),$/;"	e	enum:__flt_chk_flg
FIF_CHK_DIP	vp_mod/filter_rules.h	/^	FIF_CHK_DIP		= ~(1 << 2),$/;"	e	enum:__flt_chk_flg
FIF_CHK_PROTO	vp_mod/filter_rules.h	/^	FIF_CHK_PROTO	= ~(1 << 6), $/;"	e	enum:__flt_chk_flg
FIF_CHK_SIP	vp_mod/filter_rules.h	/^	FIF_CHK_SIP		= ~(1 << 1),$/;"	e	enum:__flt_chk_flg
FIF_CHK_STRING	vp_mod/filter_rules.h	/^	FIF_CHK_STRING	= ~(1 << 4),$/;"	e	enum:__flt_chk_flg
FIF_CHK_TIME	vp_mod/filter_rules.h	/^	FIF_CHK_TIME	= ~1,	\/\/ Filter Item Flag: OnLY TIME filter rules will be in work.$/;"	e	enum:__flt_chk_flg
FIF_IVD_ACCCTL	vp_mod/filter_rules.h	/^	FIF_IVD_ACCCTL	= 1 << 3,	\/\/ 8$/;"	e	enum:__flt_chk_flg
FIF_IVD_ALL	vp_mod/filter_rules.h	/^	FIF_IVD_ALL		= ~0,	\/\/ Filter Item Flag: InValiDate ALL the items, it means all the filter rules would not work.$/;"	e	enum:__flt_chk_flg
FIF_IVD_CTRLCMD	vp_mod/filter_rules.h	/^	FIF_IVD_CTRLCMD	= 1 << 5,	\/\/ 32$/;"	e	enum:__flt_chk_flg
FIF_IVD_DIP	vp_mod/filter_rules.h	/^	FIF_IVD_DIP		= 1 << 2,	\/\/ 4$/;"	e	enum:__flt_chk_flg
FIF_IVD_NONE	vp_mod/filter_rules.h	/^	FIF_IVD_NONE	= 0,	\/\/ Filter Item Flag: there isn't any item will out of work. all the rules will be in work.$/;"	e	enum:__flt_chk_flg
FIF_IVD_PROTO	vp_mod/filter_rules.h	/^	FIF_IVD_PROTO	= 1 << 6,	\/\/ 64$/;"	e	enum:__flt_chk_flg
FIF_IVD_SIP	vp_mod/filter_rules.h	/^	FIF_IVD_SIP		= 1 << 1,	\/\/ 2$/;"	e	enum:__flt_chk_flg
FIF_IVD_STRING	vp_mod/filter_rules.h	/^	FIF_IVD_STRING	= 1 << 4,	\/\/ 16$/;"	e	enum:__flt_chk_flg
FIF_IVD_TIME	vp_mod/filter_rules.h	/^	FIF_IVD_TIME	= 1,	\/\/ Filter Item Flag: InValiDate time item, it means time fileter rules will not work, all the time can pass.$/;"	e	enum:__flt_chk_flg
FILE_MODE	vp_sdk/config.h	44;"	d
FILE_PATH	vp_sdk/pool_ip.h	9;"	d
FILTER	vp_mod/filter_rules.h	/^typedef struct __flt__		FILTER;$/;"	t	typeref:struct:__flt__
FILTER_BLACKLIST	vp_mod/filter_rules.h	/^	FILTER_BLACKLIST = 0,$/;"	e	enum:__flt_bw_type
FILTER_DIR_C2S	vp_mod/filter_rules.h	10;"	d
FILTER_DIR_S2C	vp_mod/filter_rules.h	9;"	d
FILTER_GLOBAL	vp_mod/filter_rules.h	8;"	d
FILTER_GLOBAL	vp_sdk/config.h	34;"	d
FILTER_USER	vp_mod/filter_rules.h	7;"	d
FILTER_USER	vp_sdk/config.h	33;"	d
FILTER_WHITELIST	vp_mod/filter_rules.h	/^	FILTER_WHITELIST = 1,$/;"	e	enum:__flt_bw_type
FLG_CALLID	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_CALLID[] = "Call-ID: ";$/;"	v	file:
FLG_CHUNKED_END	vp_mod/mod_chunked.c	/^const static char FLG_CHUNKED_END[] = "\\r\\n0\\r\\n\\r\\n";$/;"	v	file:
FLG_CHUNKED_MODE	vp_mod/mod_chunked.c	/^const static char FLG_CHUNKED_MODE[] = "Transfer-Encoding: chunked";$/;"	v	file:
FLG_CHUNKED_SPLIT	vp_mod/mod_chunked.c	/^const static char FLG_CHUNKED_SPLIT[] = "\\r\\n\\r\\n";$/;"	v	file:
FLG_CICODE	vp_ferry/ferry_hik.c	/^const static char FLG_CICODE[] = "<CamIndexCode>";$/;"	v	file:
FLG_CLI	vp_ferry/ferry_dahua.c	16;"	d	file:
FLG_DMZ_LIP	vp_ferry/ferry_dahua.c	21;"	d	file:
FLG_HEBET	vp_ferry/ferry_dahua.c	15;"	d	file:
FLG_HTTP	vp_ferry/ferry_dahua.c	8;"	d	file:
FLG_HTTP	vp_mod/mod_chunked.c	/^const static char FLG_HTTP[] = "HTTP\/";$/;"	v	file:
FLG_HTTP_NEWLINE	vp_mod/mod_chunked.c	/^const static char FLG_HTTP_NEWLINE[] = "\\r\\n";$/;"	v	file:
FLG_INF	vp_ferry/ferry_dahua.c	17;"	d	file:
FLG_INIP	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_INIP[] = "IN IP4 ";$/;"	v	file:
FLG_INVITE	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_INVITE[] = "INVITE sip";$/;"	v	file:
FLG_IP	vp_ferry/ferry_dahua.c	18;"	d	file:
FLG_LOGON	vp_ferry/ferry_keda_v2800.c	/^const static char FLG_LOGON[] = "\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff";$/;"	v	file:
FLG_MAUDIO	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_MAUDIO[] = "m=audio ";$/;"	v	file:
FLG_MVIDEO	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_MVIDEO[] = "m=video ";$/;"	v	file:
FLG_OK	vp_ferry/ferry_shanxi_jonet.c	/^const static char FLG_OK[] = "SIP\/2.0 200 OK";$/;"	v	file:
FLG_PROG	vp_ferry/ferry_dahua.c	19;"	d	file:
FLG_RTSP	vp_ferry/ferry_dahua.c	13;"	d	file:
FLG_RTSPLI	vp_ferry/ferry_dahua.c	20;"	d	file:
FLG_SIP_CONTACT	vp_ferry/ferry_datang.c	/^const static char FLG_SIP_CONTACT[] = "Contact: ";$/;"	v	file:
FLG_SIP_INVITE	vp_ferry/ferry_datang.c	/^const static char FLG_SIP_INVITE[] = "INVITE sip:";$/;"	v	file:
FLG_SIP_MEDIA	vp_ferry/ferry_datang.c	/^const static char FLG_SIP_MEDIA[] = "m=audio ";$/;"	v	file:
FLG_SIP_REC_ROUTE	vp_ferry/ferry_datang.c	/^const static char FLG_SIP_REC_ROUTE[] = "Record-Route: <";$/;"	v	file:
FLG_SIP_REG	vp_ferry/ferry_datang.c	/^const static char FLG_SIP_REG[] = "REGISTER sip:";$/;"	v	file:
FLG_SPORT	vp_ferry/ferry_dahua.c	14;"	d	file:
FLG_URLRTSP	vp_ferry/ferry_dahua.c	12;"	d	file:
FLG_XML_BODY	vp_ferry/ferry_dahua.c	9;"	d	file:
FLG_XML_IP	vp_ferry/ferry_dahua.c	10;"	d	file:
FLG_XML_PORT	vp_ferry/ferry_dahua.c	11;"	d	file:
FLOWCONF	vp_mod/mod_monitor_flow.c	5;"	d	file:
FRP_ALL	vp_mod/filter_rules.h	/^    FRP_ALL		= ~0,$/;"	e	enum:__e_proto_type
FRP_AMPLESKY	vp_mod/filter_rules.h	/^    FRP_AMPLESKY= 1 << 4, \/\/ 天地阳光$/;"	e	enum:__e_proto_type
FRP_FTP	vp_mod/filter_rules.h	/^    FRP_FTP		= 1 << 1,$/;"	e	enum:__e_proto_type
FRP_HTTP	vp_mod/filter_rules.h	/^    FRP_HTTP	= 1,$/;"	e	enum:__e_proto_type
FRP_NONE	vp_mod/filter_rules.h	/^    FRP_NONE	= 0,$/;"	e	enum:__e_proto_type
FRP_RTSP	vp_mod/filter_rules.h	/^    FRP_RTSP	= 1 << 3,$/;"	e	enum:__e_proto_type
FRP_SIP	vp_mod/filter_rules.h	/^    FRP_SIP		= 1 << 2,$/;"	e	enum:__e_proto_type
FR_ALLOC	vp_mod/filter_rules.c	21;"	d	file:
FR_FREE	vp_mod/filter_rules.c	29;"	d	file:
FR_SMNAME	vp_sdk/config.h	45;"	d
FSTIPCOL	vp_mod/mod_monitor_flow.c	8;"	d	file:
FSTIPROW	vp_mod/mod_monitor_flow.c	7;"	d	file:
FTP_PORT	vp_sdk/config.h	37;"	d
F_ACK	vp_ferry/ferry_nanyang_h3c_hik.c	33;"	d	file:
F_CTC	vp_ferry/ferry_nanyang_h3c_hik.c	34;"	d	file:
F_INIP	vp_ferry/ferry_nanyang_h3c_hik.c	73;"	d	file:
F_INV	vp_ferry/ferry_nanyang_h3c_hik.c	32;"	d	file:
F_REG	vp_ferry/ferry_nanyang_h3c_hik.c	31;"	d	file:
GENERAL_CONFIG_FILE	vp_sdk/config.h	55;"	d
G_CFLAGS	config.mak	/^G_CFLAGS= $(G_WARN) -fPIC$/;"	m
G_LIBPATH	config.mak	/^G_LIBPATH= -Wl,-rpath,\/lib64-MTP$/;"	m
G_LIBS	config.mak	/^G_LIBS	= -lrt -lz -lm -ldl -L\/lib64-mtp$/;"	m
G_WARN	config.mak	/^G_WARN	= -Wall -Winvalid-pch -unreachable-code $/;"	m
H3C_VOD	vp_ferry/ferry_h3c.c	11;"	d	file:
HEADS	vp_ferry/Makefile	/^HEADS		= $(wildcard *.h)$/;"	m
HEADS	vp_mod/Makefile	/^HEADS		= $(wildcard *.h)$/;"	m
HEADS	vp_sdk/Makefile	/^HEADS		= $(wildcard *.h)$/;"	m
HEADS	vp_sys/Makefile	/^HEADS		= $(wildcard *.h)$/;"	m
HIGH4BYTES	vp_sdk/vp_thread_setting.h	8;"	d
HOST_SIDE_INNER	vp_sdk/config.h	94;"	d
HOST_SIDE_OUTER	vp_sdk/config.h	95;"	d
HTTP_CHUNK_CHK	vp_sdk/vp_uthttp.h	21;"	d
HTTP_CHUNK_END	vp_sdk/vp_uthttp.h	18;"	d
HTTP_CHUNK_END2	vp_sdk/vp_uthttp.h	19;"	d
HTTP_HEAD_END	vp_sdk/vp_uthttp.h	17;"	d
HTTP_LINE_END	vp_sdk/vp_uthttp.h	16;"	d
Hex2Int	vp_sdk/common.c	/^int Hex2Int(const char * str)$/;"	f
INF_OUT	vp_mod/filter_rules.c	12;"	d	file:
INITPORT	vp_ferry/ferry_h3c.c	9;"	d	file:
INITPORT	vp_ferry/ferry_h3c_fs.c	9;"	d	file:
INITPORT	vp_ferry/ferry_h3c_harbin.c	9;"	d	file:
INIT_IPPOOL_LIST	vp_sdk/pool_ip.h	24;"	d
INIT_LIST_HEAD	vp_sdk/toplist.h	36;"	d
INIT_PORT	vp_sdk/pool_port.h	11;"	d
INIT_PP_MUTEX	vp_sdk/pool_port.h	27;"	d
INIT_VISIT_LIST	vp_sdk/visit_list.h	33;"	d
INLINE	vp_sdk/toplist.h	5;"	d
INLINE	vp_sdk/toplist.h	7;"	d
IPP_LIST	vp_sdk/pool_ip.h	/^typedef struct IPP_LIST {$/;"	s
IP_COUNT	vp_sdk/pool_port.h	57;"	d
IP_POOL	vp_sdk/pool_ip.h	/^typedef struct IP_POOL {$/;"	s
IS_TMS	vp_ferry/ferry_h3c_fs.c	12;"	d	file:
IS_TMS	vp_ferry/ferry_h3c_harbin.c	12;"	d	file:
IS_TMS	vp_ferry/ferry_nanyang_h3c_hik.c	38;"	d	file:
I_TOTAL	vp_sdk/config.h	/^    I_TOTAL,$/;"	e	enum:m_conf_info
LARG_APP_PATH	vp_ferry/vp_ferry.c	/^const static char LARG_APP_PATH[] = "app_path";$/;"	v	file:
LARG_DIP	vp_vsudp_m.c	/^const static char LARG_DIP[] = "dip";   \/\/ dest ip address.$/;"	v	file:
LARG_DPORT	vp_vsudp_m.c	/^const static char LARG_DPORT[] = "dport";   \/\/ dest port.$/;"	v	file:
LARG_GENERAL_PATH	vp_ferry/vp_ferry.c	/^const static char LARG_GENERAL_PATH[] = "general_path";$/;"	v	file:
LARG_LIP	vp_vsudp_m.c	/^const static char LARG_LIP[] = "lip";   \/\/ local ip address. $/;"	v	file:
LARG_LPORT	vp_vsudp_m.c	/^const static char LARG_LPORT[] = "lport";   \/\/ local port. $/;"	v	file:
LARG_TOUT	vp_ferry/vp_ferry.c	/^const static char LARG_TOUT[] = "timeout";$/;"	v	file:
LARG_TOUT	vp_vsudp_m.c	/^const static char LARG_TOUT[] = "tout";   \/\/ timeout$/;"	v	file:
LD	config.mak	/^LD      = $(CROSS_COMPILE)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS  	= -L$(LIB_PATH) $(LIBS) -L\/usr\/lib\/mysql $/;"	m
LDFLAGS	promon/Makefile	/^LDFLAGS  	= -L$(LIB_PATH) -L\/usr\/lib\/mysql $(LIBS)$/;"	m
LDFLAGS	vp_ferry/Makefile	/^LDFLAGS  	= -L$(LIB_PATH) -L\/usr\/lib\/mysql $(LIBS) $/;"	m
LDFLAGS	vp_mod/Makefile	/^LDFLAGS  	= -L$(LIB_PATH) -L\/usr\/lib\/mysql $(LIBS) $/;"	m
LDFLAGS	vp_sdk/Makefile	/^LDFLAGS  	= -L$(LIB_PATH) -L\/usr\/lib\/mysql $(LIBS) $/;"	m
LDFLAGS	vp_sys/Makefile	/^LDFLAGS  	= -L$(LIB_PATH) -L\/usr\/lib\/mysql $(LIBS) $/;"	m
LEN_PROTO_HEAD	t.c	/^const static int LEN_PROTO_HEAD = 39;$/;"	v	file:
LIBS	Makefile	/^LIBS     	= $(G_LIBS) -lpthread -lm -lmysqlclient #-llicense -lssl  #-levent$/;"	m
LIBS	promon/Makefile	/^LIBS     	= $(G_LIBS) -lpthread -lmysqlclient #-llicense -lssl # -levent$/;"	m
LIBS	vp_ferry/Makefile	/^LIBS     	= $(G_LIBS) -lrt -lpthread -lm -lz -lmysqlclient #-llicense -lssl #-levent$/;"	m
LIBS	vp_mod/Makefile	/^LIBS     	= #-lrt -lpthread -lm -llicense -lssl # -lmysqlclient # -levent$/;"	m
LIBS	vp_sdk/Makefile	/^LIBS     	= #-lrt -lpthread -lm -llicense -lssl # -lmysqlclient # -levent$/;"	m
LIBS	vp_sys/Makefile	/^LIBS     	= $(G_LIBS) -lpthread #-llicense -lssl #-lmysqlclient # -levent$/;"	m
LIB_PATH	Makefile	/^LIB_PATH	= $(SDK_PATH)$/;"	m
LIB_PATH	vp_ferry/Makefile	/^LIB_PATH	= $(SDK_PATH)$/;"	m
LIB_PATH	vp_mod/Makefile	/^LIB_PATH	=$/;"	m
LIB_PATH	vp_sdk/Makefile	/^LIB_PATH	= .\/$/;"	m
LIB_PATH	vp_sys/Makefile	/^LIB_PATH	= $(SDK_PATH)$/;"	m
LIST_HEAD	vp_sdk/toplist.h	33;"	d
LIST_HEAD_INIT	vp_sdk/toplist.h	31;"	d
LI_TIME	vp_sdk/license.h	/^typedef LI_UINT64       LI_TIME;$/;"	t
LI_UINT32	vp_sdk/license.h	/^typedef uint32_t        LI_UINT32;$/;"	t
LI_UINT64	vp_sdk/license.h	/^typedef uint64_t        LI_UINT64;$/;"	t
LOW4BYTES	vp_sdk/vp_thread_setting.h	7;"	d
LSERVER_ENDSESSION	vp_sdk/vp_local_tcpserver.h	4;"	d
LSERVER_RECVNEXT	vp_sdk/vp_local_tcpserver.h	5;"	d
LSERVER_REPLY	vp_sdk/vp_local_tcpserver.h	6;"	d
LSIGN_STAT	vp_sdk/license.h	/^}LSIGN_STAT;$/;"	t	typeref:enum:__anon1
LSS_OK	vp_sdk/license.h	/^    LSS_OK          = 0,	\/\/ LicenSe Signature OK.$/;"	e	enum:__anon1
LSS_SIGN_BAD	vp_sdk/license.h	/^    LSS_SIGN_BAD    = 3,$/;"	e	enum:__anon1
LSS_UNKNOWN_BAD	vp_sdk/license.h	/^	LSS_UNKNOWN_BAD	= 1,	\/\/ $/;"	e	enum:__anon1
LSS_VER_BAD	vp_sdk/license.h	/^    LSS_VER_BAD     = 2,$/;"	e	enum:__anon1
L_APORT	vp_ferry/ferry_shanxi_jonet.c	/^    L_APORT = 0,$/;"	e	enum:e_ports	file:
L_AUTHIP	vp_sdk/config.h	/^    L_AUTHIP,$/;"	e	enum:m_conf_value
L_AUTHPORT	vp_sdk/config.h	/^    L_AUTHPORT,$/;"	e	enum:m_conf_value
L_ETH0_IP	vp_sdk/config.h	/^    L_ETH0_IP,  \/\/ local ip$/;"	e	enum:m_conf_info
L_ETH1_IP	vp_sdk/config.h	/^    L_ETH1_IP,$/;"	e	enum:m_conf_info
L_PATH	promon/vp_promon.c	/^const static char L_PATH[] = "\/home\/log.txt";$/;"	v	file:
L_VIDEOIP	vp_sdk/config.h	/^    L_VIDEOIP,$/;"	e	enum:m_conf_value
L_VIDEOPORT	vp_sdk/config.h	/^    L_VIDEOPORT,$/;"	e	enum:m_conf_value
L_VPORT	vp_ferry/ferry_shanxi_jonet.c	/^    L_VPORT,$/;"	e	enum:e_ports	file:
MAKE8BYTES	vp_sdk/vp_thread_setting.h	6;"	d
MAXEPOLLSIZE	vp_sdk/config.h	40;"	d
MAXFD	vp_sdk/config.h	39;"	d
MAX_ARRAY	vp_sdk/config.h	36;"	d
MA_SMNAME	vp_sdk/config.h	46;"	d
MOD_CACHE_SIZE_MAX	vp_mod/mod_cache_fifo.h	4;"	d
MOD_OBJS	Makefile	/^MOD_OBJS	= $(patsubst %.c, %.o, $(MOD_SRCS))$/;"	m
MOD_OBJS	vp_sys/Makefile	/^MOD_OBJS	= $(patsubst %.c, %.o, $(MOD_SRCS))$/;"	m
MOD_PATH	Makefile	/^MOD_PATH	= vp_mod$/;"	m
MOD_PATH	vp_sys/Makefile	/^MOD_PATH	= ..\/vp_mod$/;"	m
MOD_SRCS	Makefile	/^MOD_SRCS	= $(wildcard $(MOD_PATH)\/*.c)$/;"	m
MOD_SRCS	vp_sys/Makefile	/^MOD_SRCS	= $(wildcard $(MOD_PATH)\/*.c)$/;"	m
MSG_FROM	vp_ferry/ferry_nanyang_h3c_hik.c	118;"	d	file:
MSG_HED	vp_ferry/ferry_nanyang_h3c_hik.c	116;"	d	file:
MSG_TO	vp_ferry/ferry_nanyang_h3c_hik.c	119;"	d	file:
MSG_VIA	vp_ferry/ferry_nanyang_h3c_hik.c	117;"	d	file:
MTP_VERSION	vp_sdk/config.h	15;"	d
MTP_VERSION_STR	vp_sdk/config.h	14;"	d
MYSQL_ERR_OUT	vp_mod/filter_rules.c	10;"	d	file:
NET_PATH	vp_sys/sys_manager.c	8;"	d	file:
NM	config.mak	/^NM      = $(CROSS_COMPILE)nm$/;"	m
NODE_BEHIND	vp_sdk/vp_distribute.h	16;"	d
NODE_LEADER	vp_sdk/vp_distribute.h	15;"	d
NUM_ANY	vp_sdk/pool_port.h	80;"	d
NUM_CONN	vp_mod/mod_mysql.c	/^static int NUM_CONN = 0;$/;"	v	file:
NUM_CONN_MAX	vp_mod/mod_mysql.c	/^static int NUM_CONN_MAX = 20;$/;"	v	file:
NUM_EVEN	vp_sdk/pool_port.h	79;"	d
NUM_ODD	vp_sdk/pool_port.h	78;"	d
N_CACHE	vp_sdk/vp_uthttp.h	11;"	d
N_LOAD	vp_sdk/common.h	107;"	d
N_USE	vp_sdk/pool_ip.h	7;"	d
N_USE	vp_sdk/pool_port.h	7;"	d
OBJCOPY	config.mak	/^OBJCOPY = $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	config.mak	/^OBJDUMP = $(CROSS_COMPILE)objdump$/;"	m
OBJS	vp_ferry/Makefile	/^OBJS		= $(patsubst %.c, %.o, $(SRCS))$/;"	m
OBJS	vp_mod/Makefile	/^OBJS		= $(patsubst %.c, %.o, $(SRCS))$/;"	m
OBJS	vp_sdk/Makefile	/^OBJS		= $(patsubst %.c, %.o, $(SRCS))$/;"	m
OBJS	vp_sys/Makefile	/^OBJS		= $(patsubst %.c, %.o, $(SRCS))$/;"	m
OFFSET_LEN_MSG	t.c	/^const static int OFFSET_LEN_MSG = 20;$/;"	v	file:
OPENLOG	vp_sdk/common.h	19;"	d
OPENMODE	vp_sdk/defflow.h	7;"	d
OSP_HEAD_LEN	vp_sdk/vp_multi_protol.h	5;"	d
OSP_START_POS	vp_sdk/vp_multi_protol.h	6;"	d
PATH_CFG	promon/vp_promon.c	4;"	d	file:
PATH_EXEC	promon/vp_promon.c	5;"	d	file:
PCH	Makefile	/^PCH			= $(PCH_H).gch$/;"	m
PCH	vp_ferry/Makefile	/^PCH			= ..\/$(PCH_H).gch$/;"	m
PCH_H	Makefile	/^PCH_H		= sysheader.h$/;"	m
PCH_H	vp_ferry/Makefile	/^PCH_H		= sysheader.h$/;"	m
PCH_PATH	Makefile	/^PCH_PATH	= $(SDK_PATH)$/;"	m
PCH_PATH	vp_ferry/Makefile	/^PCH_PATH	= $(SDK_PATH)$/;"	m
PF_DISMISSED	vp_sdk/process_family.h	4;"	d
PID_FLOWSVR	vp_sys/vp_flowsvr.c	16;"	d	file:
PLATFORM_CONFIG_DIR	vp_sdk/config.h	56;"	d
PM_PATH	vp_sdk/portmap.c	7;"	d	file:
POOL_PORT	vp_sdk/pool_port.h	/^typedef struct POOL_PORT {$/;"	s
PORTS_TOTAL	vp_ferry/ferry_shanxi_jonet.c	/^    PORTS_TOTAL,$/;"	e	enum:e_ports	file:
PORT_AUTH1	vp_ferry/ferry_dahua.c	4;"	d	file:
PORT_AUTH2	vp_ferry/ferry_dahua.c	5;"	d	file:
PORT_HEARTBEAT	vp_ferry/ferry_dahua.c	6;"	d	file:
PORT_RECORD	vp_sdk/pool_port.h	58;"	d
PP_SMNAME	vp_sdk/pool_port.h	15;"	d
PP_TOTAL	vp_sdk/pool_port.h	10;"	d
PROCESS_FILE_NAME	vp_sdk/license.h	12;"	d
PROCESS_FILE_PATH	vp_sdk/license.h	13;"	d
PROG_NAME	vp_sys/sys_manager.c	/^const static char PROG_NAME[] = "sys-manager";$/;"	v	file:
PROXY_AUTH_SERVER	vp_sdk/config.h	31;"	d
PROXY_COUNT	vp_ferry/common_keda.h	6;"	d
PROXY_VIDEO_SERVER	vp_sdk/config.h	32;"	d
PRO_PID_PATH	vp_sdk/config.h	53;"	d
P_ETH0_IP	vp_sdk/config.h	/^    P_ETH0_IP,  \/\/ peer ip$/;"	e	enum:m_conf_info
P_ETH1_IP	vp_sdk/config.h	/^    P_ETH1_IP,$/;"	e	enum:m_conf_info
P_TCP_PROXY	vp_sdk/config.h	48;"	d
P_UDP_PROXY	vp_sdk/config.h	49;"	d
QUERY_PRE_MAX_RATE	vp_mod/mod_monitor_flow.c	/^static const char QUERY_PRE_MAX_RATE[] = "SELECT pro_supplier_id, pro_flowsize FROM vgap_provider";$/;"	v	file:
QUERY_PRE_SERV_IP	vp_mod/mod_monitor_flow.c	/^static const char QUERY_PRE_SERV_IP[] = "SELECT firstip_supplier_id, firstip_value FROM vgap_firstip_conf";$/;"	v	file:
QUERY_PRE_SUPP_ID	vp_mod/mod_monitor_flow.c	/^static const char QUERY_PRE_SUPP_ID[] = "SELECT service_conf, pro_supplier_id FROM vgap_service_conf";$/;"	v	file:
QUERY_STR_FR_ACCCTL	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_ACCCTL[] = "SELECT access_id, access_user_name, access_source_ip, access_source_mask, access_des_ip, access_des_mask, access_sign, access_start_time, access_end_time, access_time_rule_mode FROM vgap_access_control";$/;"	v	file:
QUERY_STR_FR_CTRLCMD	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_CTRLCMD[] = "SELECT pro_id, pro_cmd_name, pro_url, pro_status, pro_isbinary FROM vgap_protocol_control";$/;"	v	file:
QUERY_STR_FR_DIP	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_DIP[] = "SELECT des_iprule_id, des_iprule_ip, des_iprule_mask, des_iprule_status FROM vgap_desip_rule";$/;"	v	file:
QUERY_STR_FR_SIP	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_SIP[] = "SELECT sip_rule_id, sip_rule_source_ip, sip_rule_source_mask, sip_rule_status FROM vgap_sourceip_rule";$/;"	v	file:
QUERY_STR_FR_STRING	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_STRING[] = "SELECT str_rule_id, str_rule_direction, str_rule_is_regular, str_differentiate, str_rule_expression FROM vgap_string_rule";$/;"	v	file:
QUERY_STR_FR_TIME	vp_mod/filter_rules.c	/^static const char QUERY_STR_FR_TIME[] = "SELECT time_rule_id, time_rule_start_time, time_rule_end_time, time_rule_mode, time_rule_status FROM vgap_time_rule"; $/;"	v	file:
RECORD_ROUTE_IP	vp_ferry/ferry_datang.c	/^const static char RECORD_ROUTE_IP[] = "rec_route_ip";$/;"	v	file:
RECORD_ROUTE_PORT	vp_ferry/ferry_datang.c	/^const static char RECORD_ROUTE_PORT[] = "rec_route_ip";$/;"	v	file:
REGIST_INTERVAL	vp_sdk/license.h	93;"	d
REPLACE_ALL	vp_sdk/config.h	29;"	d
REPLACE_ONE	vp_sdk/config.h	28;"	d
REQ_BASENUM	vp_sys/sys_manager.c	11;"	d	file:
RM	config.mak	/^RM		= rm -f$/;"	m
Recv	vp_sdk/common.c	/^int Recv(int s, void * buf, u32 len, int flags)$/;"	f
Recvn	vp_sdk/common.c	/^ssize_t Recvn(int fd, char *vptr, size_t n) $/;"	f
SA	vp_sdk/config.h	18;"	d
SAI	vp_sdk/config.h	19;"	d
SAVE_FAID	vp_sys/sys_manager.c	4;"	d	file:
SAVE_SCES	vp_sys/sys_manager.c	3;"	d	file:
SDK_HEDS	Makefile	/^SDK_HEDS	= $(wildcard $(SDK_PATH)\/*.h)$/;"	m
SDK_HEDS	vp_sys/Makefile	/^SDK_HEDS	= $(wildcard $(SDK_PATH)\/*.h)$/;"	m
SDK_OBJS	Makefile	/^SDK_OBJS	= $(patsubst %.c, %.o, $(SDK_SRCS))$/;"	m
SDK_OBJS	vp_sys/Makefile	/^SDK_OBJS	= $(patsubst %.c, %.o, $(SDK_SRCS))$/;"	m
SDK_PATH	Makefile	/^SDK_PATH	= vp_sdk$/;"	m
SDK_PATH	vp_sys/Makefile	/^SDK_PATH	= ..\/vp_sdk$/;"	m
SDK_SRCS	Makefile	/^SDK_SRCS	= $(wildcard $(SDK_PATH)\/*.c)$/;"	m
SDK_SRCS	vp_sys/Makefile	/^SDK_SRCS	= $(wildcard $(SDK_PATH)\/*.c)$/;"	m
SDP_SIGN	vp_ferry/common_28181.c	/^const static char SDP_SIGN[] = "application\/sdp";$/;"	v	file:
SDP_SIGN	vp_ferry/ferry_amplesky_28181.c	/^const static char SDP_SIGN[] = "application\/sdp";$/;"	v	file:
SDP_SIGN	vp_ferry/ferry_h3c_fs.c	11;"	d	file:
SDP_SIGN	vp_ferry/ferry_h3c_harbin.c	11;"	d	file:
SDP_SIGN	vp_ferry/ferry_hik_28181.c	/^const static char SDP_SIGN[] = "application\/sdp";$/;"	v	file:
SDP_SIGN	vp_ferry/ferry_nanyang_h3c_hik.c	39;"	d	file:
SD_MEDSER_PORT	vp_ferry/ferry_sandun.c	6;"	d	file:
SER_CONF	vp_sys/sys_manager.c	9;"	d	file:
SIG_AWAY_FAMILY	vp_sdk/process_family.c	5;"	d	file:
SIG_DISMISS_MEMBER	vp_sdk/process_family.c	4;"	d	file:
SIPPORT	vp_ferry/ferry_nanyang_h3c_hik.c	36;"	d	file:
SIP_FLAG_ACK	vp_ferry/common_28181.c	/^const static char SIP_FLAG_ACK[] = "ACK ";$/;"	v	file:
SIP_FLAG_ACK	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_ACK[] = "ACK ";$/;"	v	file:
SIP_FLAG_ACK	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_ACK[] = "ACK ";$/;"	v	file:
SIP_FLAG_BYE	vp_ferry/common_28181.c	/^const static char SIP_FLAG_BYE[] = "BYE ";$/;"	v	file:
SIP_FLAG_BYE	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_BYE[] = "BYE ";$/;"	v	file:
SIP_FLAG_BYE	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_BYE[] = "BYE ";$/;"	v	file:
SIP_FLAG_CONTACT	vp_ferry/common_28181.c	/^const static char SIP_FLAG_CONTACT[] = "Contact:";$/;"	v	file:
SIP_FLAG_CONTACT	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_CONTACT[] = "Contact:";$/;"	v	file:
SIP_FLAG_CONTACT	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_CONTACT[] = "Contact:";$/;"	v	file:
SIP_FLAG_FROM	vp_ferry/common_28181.c	/^const static char SIP_FLAG_FROM[] = "From:";$/;"	v	file:
SIP_FLAG_FROM	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_FROM[] = "From:";$/;"	v	file:
SIP_FLAG_INFO	vp_ferry/common_28181.c	/^const static char SIP_FLAG_INFO[] = "INFO ";$/;"	v	file:
SIP_FLAG_INFO	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_INFO[] = "INFO ";$/;"	v	file:
SIP_FLAG_INFO	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_INFO[] = "INFO ";$/;"	v	file:
SIP_FLAG_INVITE	vp_ferry/common_28181.c	/^const static char SIP_FLAG_INVITE[] = "INVITE ";$/;"	v	file:
SIP_FLAG_INVITE	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_INVITE[] = "INVITE ";$/;"	v	file:
SIP_FLAG_INVITE	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_INVITE[] = "INVITE ";$/;"	v	file:
SIP_FLAG_MESSAGE	vp_ferry/common_28181.c	/^const static char SIP_FLAG_MESSAGE[] = "MESSAGE ";$/;"	v	file:
SIP_FLAG_MESSAGE	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_MESSAGE[] = "MESSAGE ";$/;"	v	file:
SIP_FLAG_MESSAGE	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_MESSAGE[] = "MESSAGE ";$/;"	v	file:
SIP_FLAG_OK	vp_ferry/common_28181.c	/^const static char SIP_FLAG_OK[] = "SIP\/2.0 200 OK";$/;"	v	file:
SIP_FLAG_OK	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_OK[] = "SIP\/2.0 200 OK";$/;"	v	file:
SIP_FLAG_OK	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_OK[] = "SIP\/2.0 200 OK";$/;"	v	file:
SIP_FLAG_REGISTER	vp_ferry/common_28181.c	/^const static char SIP_FLAG_REGISTER[] = "REGISTER";$/;"	v	file:
SIP_FLAG_REGISTER	vp_ferry/ferry_amplesky_28181.c	/^const static char SIP_FLAG_REGISTER[] = "REGISTER";$/;"	v	file:
SIP_FLAG_REGISTER	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_REGISTER[] = "REGISTER";$/;"	v	file:
SIP_FLAG_TO	vp_ferry/common_28181.c	/^const static char SIP_FLAG_TO[] = "To:";$/;"	v	file:
SIP_FLAG_TO	vp_ferry/ferry_hik_28181.c	/^const static char SIP_FLAG_TO[] = "To:";$/;"	v	file:
SIP_MAX_SIZE	vp_sdk/vp_uthttp.h	14;"	d
SIP_OK	vp_ferry/ferry_nanyang_h3c_hik.c	37;"	d	file:
SRCS	vp_ferry/Makefile	/^SRCS		= $(wildcard *.c)$/;"	m
SRCS	vp_mod/Makefile	/^SRCS		= $(wildcard *.c)$/;"	m
SRCS	vp_sdk/Makefile	/^SRCS		= $(wildcard *.c)$/;"	m
SRCS	vp_sys/Makefile	/^SRCS		= $(wildcard *.c)$/;"	m
SUBDIRS	Makefile	/^SUBDIRS := $(dirs)$/;"	m
SYS_CONFIG_FILE	vp_sdk/config.h	57;"	d
SYS_DBG	vp_mod/filter_rules.c	19;"	d	file:
SYS_ERR	vp_mod/filter_rules.c	18;"	d	file:
SYS_INF	vp_mod/filter_rules.c	16;"	d	file:
SYS_LI_NAME	vp_sdk/config.h	61;"	d
SYS_MANA_VER	vp_sys/sys_manager.c	/^const static char SYS_MANA_VER[] = "1.2";$/;"	v	file:
SYS_OBJS	Makefile	/^SYS_OBJS	= $(patsubst %.c, %.o, $(SYS_SRCS))$/;"	m
SYS_OBJS	vp_ferry/Makefile	/^SYS_OBJS	= $(patsubst %.c, %.o, $(SYS_SRCS))$/;"	m
SYS_PATH	Makefile	/^SYS_PATH	= vp_sys$/;"	m
SYS_PATH	vp_ferry/Makefile	/^SYS_PATH	= ..\/vp_sys$/;"	m
SYS_PATH	vp_sys/sys_manager.c	6;"	d	file:
SYS_SRCS	Makefile	/^SYS_SRCS	= $(wildcard $(SYS_PATH)\/*.c)$/;"	m
SYS_SRCS	vp_ferry/Makefile	/^SYS_SRCS	= $(wildcard $(SYS_PATH)\/*.c)$/;"	m
SYS_WAR	vp_mod/filter_rules.c	17;"	d	file:
SZ_CFGVAL	vp_sdk/config.h	63;"	d
SZ_MACHINE_ID	vp_sdk/license.h	16;"	d
SZ_SIGN	vp_sdk/license.h	15;"	d
SZ_SRVID	vp_sys/sys_manager.c	12;"	d	file:
S_IP	vp_sdk/config.h	/^    S_IP,       \/\/ source ip$/;"	e	enum:m_conf_info
S_TIMEOUT	vp_sdk/config.h	/^    S_TIMEOUT,$/;"	e	enum:m_conf_value
Select	vp_sdk/common.c	/^int Select(int nfds, fd_set * rfds, fd_set * wfds, fd_set * efds, struct timeval * tout)$/;"	f
Send	vp_sdk/common.c	/^int Send(int s, const void * buf, u32 len, int flags)$/;"	f
Setsockopt	vp_sdk/common.c	/^int Setsockopt(int sock, int level, int optname)$/;"	f
TDSECONDS	vp_sdk/common.h	11;"	d
THROUGH	vp_mod/mod_monitor_flow.h	6;"	d
TIMEOUT	vp_portmap.c	3;"	d	file:
TIME_SPEC	promon/vp_promon.c	3;"	d	file:
TMP_PATH	vp_sys/sys_manager.c	7;"	d	file:
TOPMTP_CONFIG_MAK	config.mak	/^TOPMTP_CONFIG_MAK=1$/;"	m
TOTALPORT	vp_ferry/ferry_h3c.c	10;"	d	file:
TOTALPORT	vp_ferry/ferry_h3c_fs.c	10;"	d	file:
TOTALPORT	vp_ferry/ferry_h3c_harbin.c	10;"	d	file:
TRUE	vp_sdk/udeftype.h	/^    TRUE = 1,$/;"	e	enum:__anon3
TSET_CONN_TIMES	vp_sdk/vp_thread_setting.h	/^	TSET_CONN_TIMES		= 1 << 0,	\/\/ just accept connect by given times. def: keep listening.$/;"	e	enum:__e_flg_tset
TSET_DEF_NONE	vp_sdk/vp_thread_setting.h	/^	TSET_DEF_NONE		= 0,		\/\/ nothing special to do.$/;"	e	enum:__e_flg_tset
TSET_ENABLE_CHUNKED	vp_sdk/vp_thread_setting.h	/^	TSET_ENABLE_CHUNKED = 1 << 3,	\/\/ enable http chunked mode$/;"	e	enum:__e_flg_tset
TSET_LSN_TOUT_EXIT	vp_sdk/vp_thread_setting.h	/^	TSET_LSN_TOUT_EXIT	= 1 << 1,	\/\/ exit thread when listen time is out. $/;"	e	enum:__e_flg_tset
TSET_MAX_COUNT	vp_sdk/vp_thread_setting.h	/^	TSET_MAX_COUNT  = (uint64_t)(~0),	\/\/ this can makes me large as 64 bits.$/;"	e	enum:__e_flg_tset
TSET_PPORT_FREE	vp_sdk/vp_thread_setting.h	/^	TSET_PPORT_FREE		= 1 << 2,	\/\/ free pool port. def: not using pool port, so neend't to free.$/;"	e	enum:__e_flg_tset
TSET_USE_PROTO_TMS_CLIENT	vp_sdk/vp_thread_setting.h	/^    TSET_USE_PROTO_TMS_CLIENT= 1 << 4,\/\/received from client by tms $/;"	e	enum:__e_flg_tset
TSET_USE_PROTO_TMS_SERVER	vp_sdk/vp_thread_setting.h	/^    TSET_USE_PROTO_TMS_SERVER= 1 << 5,\/\/received from ums by tms $/;"	e	enum:__e_flg_tset
TSET_USE_PROTO_UMS_CLIENT	vp_sdk/vp_thread_setting.h	/^    TSET_USE_PROTO_UMS_CLIENT= 1 << 6,\/\/received from tms by ums $/;"	e	enum:__e_flg_tset
TSET_USE_PROTO_UMS_SERVER	vp_sdk/vp_thread_setting.h	/^    TSET_USE_PROTO_UMS_SERVER= 1 << 7,\/\/received from outer server by ums $/;"	e	enum:__e_flg_tset
TYPE_HTTP	vp_sdk/vp_multi_protol.h	/^	TYPE_HTTP,$/;"	e	enum:protocal_type
TYPE_NONE	vp_sdk/vp_multi_protol.h	/^	TYPE_NONE,$/;"	e	enum:protocal_type
TYPE_OSP	vp_sdk/vp_multi_protol.h	/^	TYPE_OSP,$/;"	e	enum:protocal_type
TYPE_RTSP	vp_sdk/vp_multi_protol.h	/^	TYPE_RTSP,$/;"	e	enum:protocal_type
TYPE_SIP	vp_sdk/vp_multi_protol.h	/^	TYPE_SIP,$/;"	e	enum:protocal_type
T_DETACH	vp_sdk/vp_uthttp.h	10;"	d
T_RUNNING	vp_sdk/vp_uthttp.h	8;"	d
T_WAITING	vp_sdk/vp_uthttp.h	9;"	d
UDP_CONNECT_ACK	vp_sdk/vp_udpproxy.c	/^const static char UDP_CONNECT_ACK[] = "ack ok";$/;"	v	file:
UDP_CONNECT_TIMEOUT	vp_sdk/vp_udpproxy.c	/^const static int UDP_CONNECT_TIMEOUT = 3;$/;"	v	file:
UDP_CONNECT_TIMES_TRY	vp_sdk/vp_udpproxy.c	/^const static int UDP_CONNECT_TIMES_TRY = 3;$/;"	v	file:
UDP_PROXY_LIST	vp_sdk/vp_udpproxy.c	/^typedef struct UDP_PROXY_LIST {$/;"	s	file:
Usage	vp_ferry/vp_ferry.c	/^void Usage(const char *app_name)$/;"	f
VERSION	vp_sdk/license.h	17;"	d
VPATH	Makefile	/^VPATH		= $(LIBPATH)$/;"	m
VPATH	vp_ferry/Makefile	/^VPATH		= $(LIBPATH)$/;"	m
VPATH	vp_mod/Makefile	/^VPATH		= $(LIBPATH)$/;"	m
VPATH	vp_sdk/Makefile	/^VPATH		= $(LIBPATH)$/;"	m
VPATH	vp_sys/Makefile	/^VPATH		= $(LIBPATH)$/;"	m
VP_FERRY	vp_ferry/Makefile	/^VP_FERRY	= vp-ferry$/;"	m
VP_LOCAL_CLIENT	vp_sdk/vp_local_tcpclient.h	/^typedef struct VP_LOCAL_CLIENT$/;"	s
VP_LOCAL_CLIENT_ARGS	vp_sdk/vp_local_tcpclient.h	/^typedef struct VP_LOCAL_CLIENT_ARGS $/;"	s
VP_MULTI_PROTOL_H	vp_sdk/vp_multi_protol.h	2;"	d
VP_PORTMAP	Makefile	/^VP_PORTMAP  = vp-portmap$/;"	m
VP_UTHTTP	vp_sdk/vp_uthttp.h	/^typedef struct VP_UTHTTP {$/;"	s
VP_UTHTTP_TRANS	vp_sdk/vp_uthttp.h	/^typedef struct VP_UTHTTP_TRANS$/;"	s
VP_VSTCP	Makefile	/^VP_VSTCP	= vp-vstcp$/;"	m
VP_VSUDP	Makefile	/^VP_VSUDP	= vp-vsudp$/;"	m
VP_VSUDP_M	Makefile	/^VP_VSUDP_M	= vp-vsudp-m$/;"	m
VS_EXPIRES	vp_ferry/ferry_fiber.c	5;"	d	file:
VS_INVITE	vp_ferry/ferry_fiber.c	4;"	d	file:
V_PEERIP	vp_sdk/config.h	/^    V_PEERIP,$/;"	e	enum:m_conf_value
V_TCP_PROXY	vp_sdk/config.h	51;"	d
V_UDP_PROXY	vp_sdk/config.h	50;"	d
WARN	promon/Makefile	/^WARN		= -Wall -Winvalid-pch -unreachable-code -g #-Wcast-align -Wsign-compare #-Wmissing-prototypes -Wpacked -Wpadded -Winline #-Werror$/;"	m
WARN	vp_mod/Makefile	/^WARN		= -Wall -Wcast-align -Wsign-compare -unreachable-code #-Wmissing-prototypes #-Wpacked -Wpadded -Winline #-Werror$/;"	m
WARN	vp_sdk/Makefile	/^WARN		= -Wall -Wcast-align -Wsign-compare -unreachable-code #-Wmissing-prototypes #-Wpacked -Wpadded -Winline #-Werror$/;"	m
WARN	vp_sys/Makefile	/^WARN		= -Wall -Wcast-align -Wsign-compare -unreachable-code #-Wmissing-prototypes #-Wpacked -Wpadded -Winline #-Werror$/;"	m
WARS	Makefile	/^WARS		= -Wall -Winvalid-pch #-unreachable-code #-Wimplicit-function-declaration $/;"	m
WAR_OUT	vp_mod/filter_rules.c	13;"	d	file:
Y_CACHE	vp_sdk/vp_uthttp.h	12;"	d
Y_LOAD	vp_sdk/common.h	108;"	d
Y_USE	vp_sdk/pool_ip.h	8;"	d
Y_USE	vp_sdk/pool_port.h	8;"	d
_CHECK_PROTOCOL_FORMAT_H_	vp_mod/check_protocol_format.h	2;"	d
_CLI_IP	vp_ferry/ferry_keda_v2800.c	/^const static char _CLI_IP[] = "client_ip";$/;"	v	file:
_CLI_VS_BASE_PORT	vp_ferry/ferry_keda_v2800.c	/^const static char _CLI_VS_BASE_PORT[] = "cli_vs_port";$/;"	v	file:
_COMMON_28181_H_	vp_ferry/common_28181.h	2;"	d
_COMMON_KEDA_H_	vp_ferry/common_keda.h	2;"	d
_FILTER_RULES_H_	vp_mod/filter_rules.h	2;"	d
_FLG_BASE_PORT	vp_ferry/ferry_keda_v2800.c	/^const static char _FLG_BASE_PORT[] = "base_port";$/;"	v	file:
_GNU_SOURCE	vp_sdk/sysheader.h	5;"	d
_LICENSE_FILE_PROCESS_H_	vp_sdk/license.h	2;"	d
_MEMREPLACE_H_	vp_sdk/memreplace.h	2;"	d
_MOD_ARG_H_	vp_mod/mod_arg.h	2;"	d
_MOD_CACHE_FIFO_H_	vp_mod/mod_cache_fifo.h	2;"	d
_MOD_CHUMKED_H_	vp_mod/mod_chunked.h	2;"	d
_MOD_MONITOR_FLOW_H_	vp_mod/mod_monitor_flow.h	2;"	d
_MOD_MYSQL_H_	vp_mod/mod_mysql.h	2;"	d
_MOD_TOOLS_	vp_mod/mod_tools.h	2;"	d
_MOD_VIDEOFORMAT_FILTER_H_	vp_mod/mod_videoformat_filter.h	2;"	d
_PROCESS_FAMILY_H_	vp_sdk/process_family.h	2;"	d
_UDEFTYPE_H_	vp_sdk/udeftype.h	2;"	d
_USER_ONLINE_	vp_mod/user_online.h	2;"	d
_VP_LOCAL_TCPCLIENT_H_	vp_sdk/vp_local_tcpclient.h	2;"	d
_VP_LOCAL_TCPSERVER_H_	vp_sdk/vp_local_tcpserver.h	2;"	d
_ZCOMPRESS_H_	vp_sdk/zcompress.h	2;"	d
__30kt_init	vp_ferry/ferry_30kt.c	/^int __30kt_init(const char *parg)$/;"	f
__30kt_quit	vp_ferry/ferry_30kt.c	/^void __30kt_quit()$/;"	f
__30kt_request	vp_ferry/ferry_30kt.c	/^int __30kt_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__COMMON_H	vp_sdk/common.h	2;"	d
__CONFIGURATION_H_	vp_sdk/config.h	2;"	d
__FLOWCLI_H	vp_sdk/flowcli.h	2;"	d
__FLOW_DEF_H	vp_sdk/defflow.h	2;"	d
__GLOBAL_LIST_H	vp_sdk/global_list.h	2;"	d
__PM_PROXY_H	vp_ferry/pm_proxy.h	2;"	d
__POOL_IP_H	vp_sdk/pool_ip.h	2;"	d
__POOL_PORT_H	vp_sdk/pool_port.h	2;"	d
__SYSHEADER_H_	vp_sdk/sysheader.h	2;"	d
__THREAD_PRIVATE_DATA_H	vp_sdk/thread_private_data.h	2;"	d
__THREAD_SETTING_H_	vp_sdk/vp_thread_setting.h	2;"	d
__TOPLIST_H	vp_sdk/toplist.h	2;"	d
__VISIT_LIST_H	vp_sdk/visit_list.h	2;"	d
__VPHEADER_H_	vpheader.h	2;"	d
__VPSDK_H_	vp_sdk/vpsdk.h	2;"	d
__VP_DISTRIBUTE_H	vp_sdk/vp_distribute.h	5;"	d
__VP_MODEL	vp_mod/vpmod.h	2;"	d
__VP_PACK_H	vp_sdk/vp_pack.h	2;"	d
__VP_UTHTTP_H	vp_sdk/vp_uthttp.h	2;"	d
___run_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * ___run_tcp_proxy(void *arg, bool is_ferry)$/;"	f	file:
___start_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * ___start_tcp_proxy(void * arg, bool is_ferry)$/;"	f	file:
__amplesky28181_close	vp_ferry/ferry_amplesky_28181.c	/^int __amplesky28181_close(pvp_uthttp put, int sockfd)$/;"	f
__amplesky28181_init	vp_ferry/ferry_amplesky_28181.c	/^int __amplesky28181_init(const char *parg)$/;"	f
__amplesky28181_quit	vp_ferry/ferry_amplesky_28181.c	/^void __amplesky28181_quit()$/;"	f
__amplesky28181_reply	vp_ferry/ferry_amplesky_28181.c	/^int __amplesky28181_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__amplesky28181_request	vp_ferry/ferry_amplesky_28181.c	/^int __amplesky28181_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__amplesky28181_socket	vp_ferry/ferry_amplesky_28181.c	/^int __amplesky28181_socket(pvp_uthttp put, int sockfd)$/;"	f
__amplesky_ctrl_reply	vp_ferry/ferry_amplesky.c	/^int __amplesky_ctrl_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__amplesky_init	vp_ferry/ferry_amplesky.c	/^int __amplesky_init()$/;"	f
__amplesky_quit	vp_ferry/ferry_amplesky.c	/^void __amplesky_quit()$/;"	f
__amplesky_replace_allproto_uplen	vp_ferry/ferry_amplesky.c	/^void __amplesky_replace_allproto_uplen(char **ut_buf, u32 *pack_len, char *src, char *dst)$/;"	f
__amplesky_replace_oneproto_uplen	vp_ferry/ferry_amplesky.c	/^char *__amplesky_replace_oneproto_uplen(char **ut_buf, u32 *pack_len, char *pos, char *src, char *dst)$/;"	f
__amplesky_request	vp_ferry/ferry_amplesky.c	/^int __amplesky_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__bin_cmd	vp_mod/filter_rules.h	/^typedef struct __bin_cmd$/;"	s
__cli_visit_list	vp_sdk/visit_list.h	/^typedef struct __cli_visit_list {$/;"	s
__conf_item	tmp.c	/^typedef struct __conf_item$/;"	s	file:
__conf_item	vp_sdk/config.h	/^typedef struct __conf_item$/;"	s
__create_vs_smem	vp_sdk/vp_distribute.c	/^vs_list * __create_vs_smem(const char * smid)$/;"	f
__dahua_close	vp_ferry/ferry_dahua.c	/^int __dahua_close(pvp_uthttp put, int sockfd)$/;"	f
__dahua_init	vp_ferry/ferry_dahua.c	/^int __dahua_init()$/;"	f
__dahua_quit	vp_ferry/ferry_dahua.c	/^void __dahua_quit()$/;"	f
__dahua_recv	vp_ferry/ferry_dahua.c	/^int __dahua_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
__dahua_reply	vp_ferry/ferry_dahua.c	/^int __dahua_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__dahua_request	vp_ferry/ferry_dahua.c	/^int __dahua_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__dahua_socket	vp_ferry/ferry_dahua.c	/^int __dahua_socket(pvp_uthttp put, int sockfd)$/;"	f
__datang_close	vp_ferry/ferry_datang.c	/^int __datang_close(pvp_uthttp put, int sockfd)$/;"	f
__datang_init	vp_ferry/ferry_datang.c	/^int __datang_init()$/;"	f
__datang_quit	vp_ferry/ferry_datang.c	/^void __datang_quit()$/;"	f
__datang_reply	vp_ferry/ferry_datang.c	/^int __datang_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__datang_request	vp_ferry/ferry_datang.c	/^int __datang_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__datang_socket	vp_ferry/ferry_datang.c	/^int  __datang_socket(pvp_uthttp put, int sockfd)$/;"	f
__e_flg_tset	vp_sdk/vp_thread_setting.h	/^typedef enum __e_flg_tset$/;"	g
__e_mode	vp_sdk/vp_pack.h	/^enum __e_mode{$/;"	g
__e_proto_type	vp_mod/filter_rules.h	/^enum __e_proto_type$/;"	g
__fd	vp_sdk/flowcli.c	/^static int __fd = -1;$/;"	v	file:
__fd_lock	vp_sdk/flowcli.c	/^static pthread_mutex_t __fd_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
__fiber_close	vp_ferry/ferry_fiber.c	/^int __fiber_close(pvp_uthttp put, int sockfd)$/;"	f
__fiber_init	vp_ferry/ferry_fiber.c	/^int __fiber_init(const char *parg)$/;"	f
__fiber_reply	vp_ferry/ferry_fiber.c	/^int __fiber_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__fiber_request	vp_ferry/ferry_fiber.c	/^int __fiber_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__fiber_socket	vp_ferry/ferry_fiber.c	/^int __fiber_socket(pvp_uthttp put, int sockfd)$/;"	f
__find_mem	vp_sdk/memreplace.h	/^typedef struct __find_mem$/;"	s
__find_pos	vp_sdk/memreplace.h	/^typedef struct __find_pos$/;"	s
__flt__	vp_mod/filter_rules.h	/^struct __flt__$/;"	s
__flt_bw_type	vp_mod/filter_rules.h	/^enum __flt_bw_type$/;"	g
__flt_chk_flg	vp_mod/filter_rules.h	/^enum __flt_chk_flg$/;"	g
__flt_item	vp_mod/filter_rules.h	/^struct __flt_item$/;"	s
__flt_rules	vp_mod/filter_rules.h	/^typedef struct __flt_rules$/;"	s
__fr_accctl	vp_mod/filter_rules.h	/^typedef struct __fr_accctl$/;"	s
__fr_ctrlcmd	vp_mod/filter_rules.h	/^typedef struct __fr_ctrlcmd$/;"	s
__fr_ip	vp_mod/filter_rules.h	/^typedef struct __fr_ip$/;"	s
__fr_proto	vp_mod/filter_rules.h	/^typedef struct __fr_proto$/;"	s
__fr_string	vp_mod/filter_rules.h	/^typedef struct __fr_string$/;"	s
__fr_time	vp_mod/filter_rules.h	/^typedef struct __fr_time$/;"	s
__frame_modify_paras	vp_sdk/config.h	/^typedef struct __frame_modify_paras$/;"	s
__fread	vp_sdk/common.c	/^int __fread(void *ptr, size_t size, size_t n, FILE *fp)$/;"	f
__fwrite	vp_sdk/common.c	/^int __fwrite(const void *ptr, size_t size, size_t n, FILE *fp)$/;"	f
__gg	vp_sdk/config.h	148;"	d
__global_list_data	vp_sdk/global_list.h	/^typedef struct __global_list_data$/;"	s
__h3c_v8500_close	vp_ferry/ferry_h3c_v8500.c	/^int  __h3c_v8500_close(pvp_uthttp put, int sockfd)$/;"	f
__h3c_v8500_init	vp_ferry/ferry_h3c_v8500.c	/^int  __h3c_v8500_init()$/;"	f
__h3c_v8500_quit	vp_ferry/ferry_h3c_v8500.c	/^void __h3c_v8500_quit()$/;"	f
__h3c_v8500_recv	vp_ferry/ferry_h3c_v8500.c	/^int __h3c_v8500_recv(pvp_uthttp put, char *utbuf, int *pack_len, int directon)$/;"	f
__h3c_v8500_reply	vp_ferry/ferry_h3c_v8500.c	/^int  __h3c_v8500_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__h3c_v8500_request	vp_ferry/ferry_h3c_v8500.c	/^int  __h3c_v8500_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__h3c_v8500_socket	vp_ferry/ferry_h3c_v8500.c	/^int  __h3c_v8500_socket(pvp_uthttp put, int sockfd)$/;"	f
__hik28181_close	vp_ferry/ferry_hik_28181.c	/^int __hik28181_close(pvp_uthttp put, int sockfd)$/;"	f
__hik28181_init	vp_ferry/ferry_hik_28181.c	/^int __hik28181_init(const char *parg)$/;"	f
__hik28181_quit	vp_ferry/ferry_hik_28181.c	/^void __hik28181_quit()$/;"	f
__hik28181_reply	vp_ferry/ferry_hik_28181.c	/^int __hik28181_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__hik28181_request	vp_ferry/ferry_hik_28181.c	/^int __hik28181_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__hik28181_socket	vp_ferry/ferry_hik_28181.c	/^int __hik28181_socket(pvp_uthttp put, int sockfd)$/;"	f
__huasan_close	vp_ferry/ferry_huasan.c	/^int  __huasan_close(pvp_uthttp put, int sockfd)$/;"	f
__huasan_init	vp_ferry/ferry_huasan.c	/^int  __huasan_init()$/;"	f
__huasan_quit	vp_ferry/ferry_huasan.c	/^void __huasan_quit()$/;"	f
__huasan_reply	vp_ferry/ferry_huasan.c	/^int  __huasan_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__huasan_request	vp_ferry/ferry_huasan.c	/^int  __huasan_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__huasan_socket	vp_ferry/ferry_huasan.c	/^int  __huasan_socket(pvp_uthttp put, int sockfd)$/;"	f
__ipplist_add	vp_sdk/pool_ip.h	29;"	d
__ipplist_free	vp_sdk/pool_ip.h	35;"	d
__kd_ga_video_proxy	vp_ferry/common_keda.c	/^int __kd_ga_video_proxy(u32 lip, u32 dip, u16 l_base_port, u16 d_base_port, int count_proxy, int step, u16 tout)$/;"	f
__keda2800_close	vp_ferry/ferry_keda_v2800.c	/^int __keda2800_close(pvp_uthttp put, int sockfd)$/;"	f
__keda2800_init	vp_ferry/ferry_keda_v2800.c	/^int __keda2800_init(const char *parg)$/;"	f
__keda2800_quit	vp_ferry/ferry_keda_v2800.c	/^void __keda2800_quit()$/;"	f
__keda2800_reply	vp_ferry/ferry_keda_v2800.c	/^int __keda2800_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__keda2800_request	vp_ferry/ferry_keda_v2800.c	/^int __keda2800_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__keda2800_socket	vp_ferry/ferry_keda_v2800.c	/^int __keda2800_socket(pvp_uthttp put, int sockfd)$/;"	f
__keda2801e_1722_close	vp_ferry/ferry_keda_v2801e.c	/^static int  __keda2801e_1722_close(pvp_uthttp put, int sockfd)$/;"	f	file:
__keda2801e_1722_reply	vp_ferry/ferry_keda_v2801e.c	/^static int __keda2801e_1722_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
__keda2801e_1722_socket	vp_ferry/ferry_keda_v2801e.c	/^static int  __keda2801e_1722_socket(pvp_uthttp put, int sockfd)$/;"	f	file:
__keda2801e_init	vp_ferry/ferry_keda_v2801e.c	/^int __keda2801e_init(const char *parg)$/;"	f
__keda2801e_play	vp_ferry/ferry_keda_v2801e.c	/^static int __keda2801e_play(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
__keda2801e_quit	vp_ferry/ferry_keda_v2801e.c	/^void __keda2801e_quit()$/;"	f
__license_append	vp_sdk/license.h	/^typedef struct __license_append$/;"	s
__license_head	vp_sdk/license.h	/^typedef struct __license_head$/;"	s
__license_history	vp_sdk/license.h	/^typedef struct __license_history$/;"	s
__license_information	vp_sdk/license.h	/^typedef struct __license_information$/;"	s
__list_add	vp_sdk/toplist.h	/^static INLINE void __list_add(struct list_head *new_n,$/;"	f
__list_del	vp_sdk/toplist.h	/^static INLINE void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_splice	vp_sdk/toplist.h	/^static INLINE void __list_splice(struct list_head *list,$/;"	f
__load_general_config	vp_sdk/config.c	/^int __load_general_config()$/;"	f
__load_general_config_path	vp_sdk/config.c	/^int __load_general_config_path(const char *path)$/;"	f
__load_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static int __load_tcp_proxy(pvp_uthtrans pt, int t_state, bool is_ferry)$/;"	f	file:
__load_udp_proxy	vp_sdk/vp_udpproxy.c	/^static int __load_udp_proxy(pvp_uthtrans pu, int t_state, bool is_ferry)$/;"	f	file:
__mem_len	vp_sdk/global_list.h	/^	int __mem_len;$/;"	m	struct:__global_list_data
__mem_len	vp_sdk/thread_private_data.h	/^	int __mem_len;$/;"	m	struct:__thread_data
__mode	vp_sdk/vp_pack.c	/^enum __e_mode __mode;$/;"	v	typeref:enum:__e_mode
__nanyang_h3c_hik_close	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_close(pvp_uthttp put, int sockfd)$/;"	f
__nanyang_h3c_hik_init	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_init(const char *parg)$/;"	f
__nanyang_h3c_hik_quit	vp_ferry/ferry_nanyang_h3c_hik.c	/^void __nanyang_h3c_hik_quit()$/;"	f
__nanyang_h3c_hik_recv	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
__nanyang_h3c_hik_reply	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__nanyang_h3c_hik_request	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__nanyang_h3c_hik_socket	vp_ferry/ferry_nanyang_h3c_hik.c	/^int __nanyang_h3c_hik_socket(pvp_uthttp put, int sockfd)$/;"	f
__oss_free	vp_sdk/common.c	/^void __oss_free(void **p)$/;"	f
__oss_malloc	vp_sdk/common.c	/^int __oss_malloc(void **p, int size)$/;"	f
__pf_home	vp_sdk/process_family.c	/^typedef struct __pf_home$/;"	s	file:
__pf_member	vp_sdk/process_family.c	/^typedef struct __pf_member$/;"	s	file:
__pf_process_id	vp_sdk/process_family.c	/^typedef struct __pf_process_id$/;"	s	file:
__portmap	vp_sdk/portmap.c	/^struct __portmap$/;"	s	file:
__process_information	vp_sdk/license.h	/^typedef struct __process_information$/;"	s
__query_conf	tmp.c	/^typedef struct __query_conf$/;"	s	file:
__query_conf	vp_sdk/config.h	/^typedef struct __query_conf$/;"	s
__run_amplesky_udp_proxy	vp_ferry/ferry_amplesky.c	/^void __run_amplesky_udp_proxy(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__run_local_tcp_server	vp_sdk/vp_local_tcpserver.c	/^static void * __run_local_tcp_server(void *arg)$/;"	f	file:
__run_tcp_proxy	vp_vstcp.c	/^void * __run_tcp_proxy(void * args)$/;"	f
__sandun_close	vp_ferry/ferry_sandun.c	/^int __sandun_close(pvp_uthttp put, int sockfd)$/;"	f
__sandun_init	vp_ferry/ferry_sandun.c	/^int __sandun_init()$/;"	f
__sandun_quit	vp_ferry/ferry_sandun.c	/^void __sandun_quit()$/;"	f
__sandun_reply	vp_ferry/ferry_sandun.c	/^int __sandun_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__sandun_request	vp_ferry/ferry_sandun.c	/^int __sandun_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__start_local_tcpclient	vp_sdk/vp_local_tcpclient.c	/^static void * __start_local_tcpclient(void * arg)$/;"	f	file:
__start_local_tcpserver	vp_sdk/vp_local_tcpserver.c	/^static void * __start_local_tcpserver(void * arg)$/;"	f	file:
__start_media_proxy	vp_ferry/pm_proxy.c	/^int __start_media_proxy(char *type, u32 lip, u32 dip, u16 lport, u16 dport, u16 tout, int priv_port)$/;"	f
__start_tcp_proxy	vp_vstcp.c	/^void __start_tcp_proxy(clivlist *pcvn)$/;"	f
__start_udp_proxy	vp_sdk/vp_udpproxy.c	/^static void * __start_udp_proxy(void * arg, bool is_ferry)$/;"	f	file:
__start_vs_proxy	vp_sdk/vp_uthttp.c	/^int __start_vs_proxy(clivlist *pcvn, const char *vs_type, u16 priv_port, bool use_pp)$/;"	f
__start_vs_tcp_proxy	vp_sdk/vp_uthttp.c	/^int __start_vs_tcp_proxy(clivlist *pcvn, bool flags, u16 priv_port)$/;"	f
__start_vs_udp_proxy	vp_sdk/vp_uthttp.c	/^int __start_vs_udp_proxy(clivlist *pcvn, bool flags, u16 priv_port)$/;"	f
__strtrim	vp_sdk/common.c	/^char * __strtrim(char * s)$/;"	f
__thread_data	vp_sdk/thread_private_data.h	/^typedef struct __thread_data$/;"	s
__thread_private_data	vp_sdk/thread_private_data.c	/^typedef struct __thread_private_data$/;"	s	file:
__thread_setting	vp_sdk/vp_thread_setting.h	/^typedef struct __thread_setting$/;"	s
__tms_reqst	vp_sys/sys_manager.c	/^struct __tms_reqst {$/;"	s	file:
__tset_arg	vp_sdk/vp_thread_setting.h	/^typedef struct __tset_arg$/;"	s
__visit_list	vp_sdk/visit_list.h	/^typedef struct __visit_list {$/;"	s
__vlist_add	vp_sdk/visit_list.h	38;"	d
__vlist_free	vp_sdk/visit_list.h	44;"	d
__vp_ippool_head	vp_sdk/vp_uthttp.h	/^typedef struct __vp_ippool_head {$/;"	s
__vser_add_tail	vp_sdk/vp_distribute.h	70;"	d
__vslist_del	vp_sdk/vp_distribute.h	83;"	d
__vsnode_add_tail	vp_sdk/vp_distribute.h	77;"	d
__zsyh_close	vp_ferry/ferry_zsyh.c	/^int __zsyh_close(pvp_uthttp put, int sockfd)$/;"	f
__zsyh_init	vp_ferry/ferry_zsyh.c	/^int __zsyh_init()$/;"	f
__zsyh_quit	vp_ferry/ferry_zsyh.c	/^void __zsyh_quit()$/;"	f
__zsyh_recv	vp_ferry/ferry_zsyh.c	/^int __zsyh_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
__zsyh_reply	vp_ferry/ferry_zsyh.c	/^int __zsyh_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__zsyh_request	vp_ferry/ferry_zsyh.c	/^int __zsyh_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
__zsyh_socket	vp_ferry/ferry_zsyh.c	/^int __zsyh_socket(pvp_uthttp put, int sockfd)$/;"	f
_cache_handle	vp_mod/mod_cache_fifo.h	/^typedef struct _cache_handle$/;"	s
_e_videoformat	vp_mod/mod_videoformat_filter.h	/^typedef enum _e_videoformat$/;"	g
_modchunked_t	vp_mod/mod_chunked.h	/^typedef struct _modchunked_t$/;"	s
_pool_port_segment	vp_sdk/pool_port.c	/^struct _pool_port_segment$/;"	s	file:
_rtpheader	vp_mod/check_protocol_format.h	/^typedef struct _rtpheader$/;"	s
_sessions	vp_ferry/ferry_amplesky_28181.c	/^struct _sessions$/;"	s	file:
_sessions	vp_ferry/ferry_hik_28181.c	/^struct _sessions$/;"	s	file:
_t_disbuf	vp_sdk/common.c	/^void _t_disbuf(const unsigned char *buf, int len)$/;"	f
_videoformat_t	vp_mod/mod_videoformat_filter.c	/^typedef struct _videoformat_t$/;"	s	file:
_wlog	vp_sdk/common.c	/^_wlog(const char *name, char *str)$/;"	f
_wlog2	vp_sdk/common.c	/^_wlog2(const char *name, char *fmt, ...)$/;"	f
a2i	vp_mod/filter_rules.c	/^a2i(char *ansi_num)$/;"	f	file:
a_exit	vp_mod/mod_arg.c	/^void a_exit(int n)$/;"	f
a_get_cfgpath_portmap	vp_mod/mod_arg.c	/^char *a_get_cfgpath_portmap()$/;"	f
a_get_ferry_port	vp_mod/mod_arg.c	/^int  a_get_ferry_port()$/;"	f
a_get_ferry_port_str	vp_mod/mod_arg.c	/^char *a_get_ferry_port_str()$/;"	f
a_get_pmid	vp_mod/mod_arg.c	/^int  a_get_pmid()$/;"	f
a_get_pmid_str	vp_mod/mod_arg.c	/^char *a_get_pmid_str()$/;"	f
a_init	vp_mod/mod_arg.c	/^bool a_init(int argc, char *argv[], void(*exit_sys)(int), const char *logname)$/;"	f
add_find	vp_sdk/memreplace.c	/^void add_find(find_mem *fmem, char *pfind)$/;"	f
add_numconn	vp_vstcp.c	14;"	d	file:
alloc_flt_rules	vp_mod/filter_rules.c	/^static flt_rules	*alloc_flt_rules()	{ FR_ALLOC(flt_rules); }$/;"	f	file:
alloc_fr_accctl	vp_mod/filter_rules.c	/^static fr_accctl	*alloc_fr_accctl()	{ FR_ALLOC(fr_accctl); }$/;"	f	file:
alloc_fr_ctrlcmd	vp_mod/filter_rules.c	/^static fr_ctrlcmd	*alloc_fr_ctrlcmd() { FR_ALLOC(fr_ctrlcmd); }$/;"	f	file:
alloc_fr_ip	vp_mod/filter_rules.c	/^static fr_ip		*alloc_fr_ip()		{ FR_ALLOC(fr_ip); }$/;"	f	file:
alloc_fr_string	vp_mod/filter_rules.c	/^static fr_string	*alloc_fr_string()	{ FR_ALLOC(fr_string); }$/;"	f	file:
alloc_fr_time	vp_mod/filter_rules.c	/^static fr_time		*alloc_fr_time()	{ FR_ALLOC(fr_time); }$/;"	f	file:
app_dir	vp_sdk/config.h	/^    char *app_dir;$/;"	m	struct:general_config_t
arg_init	vp_vsudp_m.c	/^bool arg_init(int argc, char **argv)$/;"	f
arg_reducer	vp_mod/mod_cache_fifo.h	/^    int arg_reducer;$/;"	m	struct:_cache_handle
args	vp_sdk/vp_local_tcpclient.h	/^	vp_local_client_args args;$/;"	m	struct:VP_LOCAL_CLIENT
array_replace	vp_sdk/memreplace.c	/^int array_replace(char *array, int sz_array, int *sz_valid,$/;"	f
bEnable	vp_mod/filter_rules.h	/^	bool bEnable;$/;"	m	struct:__fr_proto
b_head_is_head	vp_mod/mod_cache_fifo.h	/^    int  b_head_is_head;    \/\/ whether cursor_head is head of cursor_tail by address$/;"	m	struct:_cache_handle
base_port	vp_sdk/pool_port.c	/^	u16 base_port;$/;"	m	struct:_pool_port_segment	file:
bcmd	vp_mod/filter_rules.h	/^	bin_cmd *bcmd;$/;"	m	struct:__fr_ctrlcmd
before_exit	vp_sdk/license.h	/^	void	(*before_exit)(int);$/;"	m	struct:li_run_status
before_exit	vp_sdk/license.h	/^	void (*before_exit)(int);$/;"	m	struct:li_arg
before_exit	vp_sdk/process_family.c	/^	void (*before_exit)(int);$/;"	m	struct:__pf_member	file:
bin_cmd	vp_mod/filter_rules.h	/^}bin_cmd;$/;"	t	typeref:struct:__bin_cmd
bind_video_ip	vp_sdk/visit_list.h	/^    u32    bind_video_ip;   \/\/ the ip need to bind port$/;"	m	struct:__cli_visit_list
bind_video_ip	vp_sdk/vp_uthttp.h	/^    u32  bind_video_ip;   \/\/ the ip need to bind port$/;"	m	struct:VP_UTHTTP
bind_video_ip	vp_sdk/vp_uthttp.h	/^    u32  bind_video_ip;   \/\/ the ip need to bind port$/;"	m	struct:vp_ferry_tcp_req
bind_video_ip	vp_sdk/vp_uthttp.h	/^    u32  bind_video_ip;   \/\/ the ip need to bind port$/;"	m	struct:vp_ferry_udp_req
bind_video_port	vp_sdk/visit_list.h	/^    u16    bind_video_port; \/\/ bind port for tms or ums $/;"	m	struct:__cli_visit_list
bind_video_port	vp_sdk/vp_uthttp.h	/^    u16  bind_video_port; \/\/ bind port for tms or ums $/;"	m	struct:VP_UTHTTP
bind_video_port	vp_sdk/vp_uthttp.h	/^    u16  bind_video_port; \/\/ bind port for tms or ums $/;"	m	struct:vp_ferry_tcp_req
bind_video_port	vp_sdk/vp_uthttp.h	/^    u16  bind_video_port; \/\/ bind port for tms or ums $/;"	m	struct:vp_ferry_udp_req
blen	vp_sdk/vp_udpproxy.c	/^    u32    blen;               \/\/ http pack boday len$/;"	m	struct:UDP_PROXY_LIST	file:
bool	vp_sdk/udeftype.h	/^} BOOL, bool;$/;"	t	typeref:enum:__anon3
buffer_head	vp_mod/mod_cache_fifo.h	/^    char *buffer_head;$/;"	m	struct:_cache_handle
buffer_tail	vp_mod/mod_cache_fifo.h	/^    char *buffer_tail;$/;"	m	struct:_cache_handle
cache	vp_sdk/portmap.c	/^    char cache[2];$/;"	m	struct:__portmap	file:
cache_handle	vp_mod/mod_cache_fifo.h	/^}cache_handle;$/;"	t	typeref:struct:_cache_handle
calc_inetid	vp_mod/filter_rules.c	/^calc_inetid(int inetip, int inetmask)$/;"	f	file:
camera_id	vp_sdk/visit_list.h	/^    char   camera_id[32];$/;"	m	struct:__cli_visit_list
cert_is_enable	vp_sdk/common.c	/^bool cert_is_enable()$/;"	f
changeable	vp_sdk/vp_uthttp.h	/^    int  changeable;        \/\/ the value use at the different platform$/;"	m	struct:VP_UTHTTP
check_vsformat	vp_ferry/ferry_amplesky_28181.c	/^int check_vsformat(pvp_uthttp put, char *pkg, u32 len_pkg)$/;"	f
chk_flag	vp_mod/filter_rules.h	/^	enum __flt_chk_flg chk_flag;$/;"	m	struct:__flt_item	typeref:enum:__flt_item::__flt_chk_flg
chk_mach_work_on	vp_sys/sys_manager.c	/^int chk_mach_work_on(char *chk_ip)$/;"	f
chk_net_link	vp_sys/sys_manager.c	/^int chk_net_link(int sock, char recv_msg[])$/;"	f
chk_port_work_on	vp_sys/sys_manager.c	/^int chk_port_work_on(char *chk_ip, char *chk_port)$/;"	f
cip	vp_sdk/vp_uthttp.h	/^    u32 cip;    \/\/ inner client ip$/;"	m	struct:vp_ferry_req
cli_addr	vp_sdk/vp_distribute.h	/^    SAI cli_addr;$/;"	m	struct:video_visit_node
cli_addr	vp_sdk/vp_udpproxy.c	/^    struct sockaddr_in cli_addr;$/;"	m	struct:UDP_PROXY_LIST	typeref:struct:UDP_PROXY_LIST::sockaddr_in	file:
cli_addr	vp_sdk/vp_uthttp.h	/^    SAI  cli_addr;$/;"	m	struct:VP_UTHTTP
cli_sock	vp_sdk/vp_distribute.h	/^    int cli_sock;                \/\/ connect client socket useful tcp$/;"	m	struct:video_visit_node
cli_sock	vp_sdk/vp_uthttp.h	/^    int  cli_sock;$/;"	m	struct:VP_UTHTTP
cliip	vp_sdk/visit_list.h	/^    u32    cliip;$/;"	m	struct:__cli_visit_list
cliport	vp_sdk/visit_list.h	/^    u16    cliport;$/;"	m	struct:__cli_visit_list
clisock	vp_sdk/vp_udpproxy.c	/^    int    clisock;$/;"	m	struct:UDP_PROXY_LIST	file:
clivlist	vp_sdk/visit_list.h	/^} clivlist;$/;"	t	typeref:struct:__cli_visit_list
close_sock	vp_sdk/common.c	/^void close_sock(int *sock)$/;"	f
clr_find	vp_sdk/memreplace.c	/^void clr_find(find_mem *fmem)$/;"	f
cmd	vp_mod/filter_rules.h	/^	char *cmd;$/;"	m	struct:__bin_cmd
company	vp_sdk/license.h	/^	char	    company[256];   \/\/ Which company register to.$/;"	m	struct:__license_head
conf_item	tmp.c	/^} conf_item;$/;"	t	typeref:struct:__conf_item	file:
conf_item	vp_sdk/config.h	/^} conf_item;$/;"	t	typeref:struct:__conf_item
control_user_filter	vp_mod/filter_rules.c	/^control_user_filter(FILTER *g_flt, char **ut_buf, char *user, u32 sip, u32 dip, int control_type)$/;"	f
count	vp_sdk/pool_port.c	/^	int count;$/;"	m	struct:_pool_port_segment	file:
cport	vp_sdk/vp_uthttp.h	/^    u16 cport;$/;"	m	struct:vp_ferry_req
create_daemon	vp_sdk/common.c	/^pid_t create_daemon()$/;"	f
create_dt_smem	vp_sdk/vp_distribute.c	/^vs_list * create_dt_smem(const char * smid)$/;"	f
create_filter	vp_mod/filter_rules.c	/^create_filter(char *db_ip, int db_port, char *db_user, char *db_pass, char *db_name, unsigned int timeout_sec)$/;"	f
create_filter_wl	vp_mod/filter_rules.c	/^create_filter_wl(char *db_ip, int db_port, char *db_user, char *db_pass, char *db_name, unsigned int timeout_sec, const char *svrid)$/;"	f
create_flow_smem	vp_mod/mod_monitor_flow.c	/^static char* create_flow_smem(const char * psmid)$/;"	f	file:
create_pid_file	vp_sdk/common.c	/^int create_pid_file(const char * pid)$/;"	f
create_pp_smem	vp_sdk/pool_port.c	/^pp_list * create_pp_smem(const char * psmid)$/;"	f
create_tuvs_smem	vp_sdk/visit_list.c	/^clivlist * create_tuvs_smem(const char * psmid)$/;"	f
ctofy	vp_sdk/vp_uthttp.h	/^    u16  ctofy;\/\/ received from client by ferry$/;"	m	struct:vp_ferry_tcp_req
ctrlcmd	vp_mod/filter_rules.h	/^	char *ctrlcmd;$/;"	m	struct:__flt_item
current_tprivate	vp_sdk/thread_private_data.c	/^tprivate *current_tprivate()$/;"	f
cursor_head	vp_mod/mod_cache_fifo.h	/^    char *cursor_head;$/;"	m	struct:_cache_handle
cursor_tail	vp_mod/mod_cache_fifo.h	/^    char *cursor_tail;$/;"	m	struct:_cache_handle
cvlist	vp_sdk/visit_list.h	/^    clivlist cvlist;$/;"	m	struct:__visit_list
data	vp_sdk/global_list.h	/^	char *data;$/;"	m	struct:__global_list_data
data	vp_sdk/license.h	/^	char        *data;      \/\/ point to data$/;"	m	struct:__license_append
data	vp_sdk/thread_private_data.h	/^	char *data;$/;"	m	struct:__thread_data
data_cache	vp_sdk/vp_uthttp.h	/^    int  data_cache;        \/\/ recv data mode$/;"	m	struct:VP_UTHTTP
data_chunked	vp_mod/mod_chunked.h	/^    char *data_chunked;$/;"	m	struct:_modchunked_t
date_create	vp_sdk/license.h	/^	LI_TIME     date_create;	\/\/ the date of creating license file.$/;"	m	struct:__license_head
date_reg	vp_sdk/license.h	/^	LI_TIME		date_reg;		\/\/ the latest register date.$/;"	m	struct:__process_information
db_dbname	vp_mod/filter_rules.h	/^	char db_dbname[32];$/;"	m	struct:__flt__
db_ip	vp_mod/filter_rules.h	/^	char db_ip[16];$/;"	m	struct:__flt__
db_pass	vp_mod/filter_rules.h	/^	char db_pass[32];$/;"	m	struct:__flt__
db_port	vp_mod/filter_rules.h	/^	int db_port;$/;"	m	struct:__flt__
db_timeout_sec	vp_mod/filter_rules.h	/^	unsigned int db_timeout_sec;$/;"	m	struct:__flt__
db_uname	vp_mod/filter_rules.h	/^	char db_uname[32];$/;"	m	struct:__flt__
deal_system_request	vp_sys/sys_manager.c	/^static int deal_system_request(int cli_socket, char recv_msg[])$/;"	f	file:
deal_tms_reqst	vp_sys/sys_manager.c	/^    int     (*deal_tms_reqst)(int sock, char recv_msg[]);$/;"	m	struct:__tms_reqst	file:
deal_with_item_line	tmp.c	/^static conf_item *deal_with_item_line(char *read_line, query_conf **p_conf_que, conf_item **p_item_tail)$/;"	f	file:
deal_with_item_line	vp_sdk/config.c	/^static conf_item *deal_with_item_line(char *read_line, query_conf **p_conf_que, conf_item **p_item_tail)$/;"	f	file:
deal_with_label_line	tmp.c	/^static query_conf *deal_with_label_line(char *read_line, query_conf **p_conf_head, query_conf **p_conf_tail)$/;"	f	file:
deal_with_label_line	vp_sdk/config.c	/^static query_conf *deal_with_label_line(char *read_line, query_conf **p_conf_head, query_conf **p_conf_tail)$/;"	f	file:
del_numconn	vp_vstcp.c	20;"	d	file:
del_out_fip	vp_sys/sys_manager.c	/^static int del_out_fip(char *ethVar, char *ip, char *mask)$/;"	f	file:
del_same_netseg	vp_sys/sys_manager.c	/^int del_same_netseg(char *buf, char *ethVar, char *ip, char *mask, int buf_len)$/;"	f
del_tout_flow_data	vp_sys/vp_flowsvr.c	/^int del_tout_flow_data()$/;"	f
delete_aflow_data	vp_sys/vp_flowsvr.c	/^int delete_aflow_data()$/;"	f
delete_flow_data	vp_sys/vp_flowsvr.c	/^int delete_flow_data(char *dvs_id)$/;"	f
des_ip	vp_sdk/defflow.h	/^    u32    des_ip;$/;"	m	struct:flow_stat
des_port	vp_sdk/defflow.h	/^    u32    des_port;$/;"	m	struct:flow_stat
destroy_filter	vp_mod/filter_rules.c	/^destroy_filter(FILTER **flt)$/;"	f
destroy_portpool	vp_sdk/pool_port.c	/^void destroy_portpool()$/;"	f
destroy_segment_port	vp_sdk/pool_port.c	/^void destroy_segment_port()$/;"	f
destroy_value	vp_sdk/vp_tcpproxy.c	14;"	d	file:
dip	vp_sdk/pool_ip.h	/^    u32    dip;           \/\/ des visit ip from ip pool$/;"	m	struct:IP_POOL
dip	vp_sdk/pool_port.h	/^    char dip[IP_COUNT][32]; \/\/ Mapping dest ip$/;"	m	struct:play_record
dip	vp_sdk/pool_port.h	/^    u32  dip;$/;"	m	struct:POOL_PORT
dip	vp_sdk/portmap.c	/^    char dip[16];$/;"	m	struct:__portmap	file:
dip	vp_sdk/visit_list.h	/^    u32    dip;    \/\/ dest video ip$/;"	m	struct:__cli_visit_list
dip	vp_sdk/vp_distribute.h	/^    u32  dip;                    \/\/ dest video server ip or camera ip$/;"	m	struct:video_way
dip	vp_sdk/vp_local_tcpclient.h	/^    u32  dip;               \/\/ visit des ip$/;"	m	struct:VP_LOCAL_CLIENT_ARGS
dip	vp_sdk/vp_uthttp.h	/^    u32  dip;               \/\/ visit des ip$/;"	m	struct:VP_UTHTTP
dip	vp_sdk/vp_uthttp.h	/^    u32  dip;$/;"	m	struct:vp_ferry_tcp_req
dip	vp_sdk/vp_uthttp.h	/^    u32 dip;    \/\/ destination ip (outer server ip)$/;"	m	struct:vp_ferry_req
dip	vp_sdk/vp_uthttp.h	/^    u32 dip;$/;"	m	struct:vp_ferry_udp_req
direct	vp_mod/filter_rules.h	/^	int direct;$/;"	m	struct:__fr_string
direct_str	vp_mod/filter_rules.h	/^    int direct_str;$/;"	m	struct:__flt_item
dirs	Makefile	/^dirs := $(basename $(patsubst .\/%,%,$(dirs)))$/;"	m
dirs	Makefile	/^dirs := $(filter-out $(exclude_dirs),$(dirs))$/;"	m
dirs	Makefile	/^dirs := $(patsubst $(MOD_PATH), , $(dirs))$/;"	m
dirs	Makefile	/^dirs := $(patsubst $(SDK_PATH), , $(dirs))$/;"	m
dirs	Makefile	/^dirs := $(patsubst ascript, , $(dirs))$/;"	m
dirs	Makefile	/^dirs := $(patsubst license_tools, , $(dirs))$/;"	m
dirs	Makefile	/^dirs := $(shell find . -maxdepth 1 -type d)$/;"	m
dis_header	vp_mod/check_protocol_format.c	/^dis_header(rtpheader *h)$/;"	f
dis_interpret	vp_sdk/common.c	/^static void dis_interpret(const unsigned char *buf, int len)$/;"	f	file:
do_cascade	vp_ferry/ferry_keda_v2800.c	/^int do_cascade(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f
do_cascade_reply	vp_ferry/ferry_hik.c	/^int do_cascade_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_cascade_request	vp_ferry/ferry_hik.c	/^int do_cascade_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_close	vp_ferry/pm_proxy.h	/^    int  (* do_close)(pvp_uthttp put, int sockfd);$/;"	m	struct:pm_proxy
do_close	vp_sdk/vp_uthttp.h	/^    int  (* do_close)(pvp_uthttp put, int sockfd);$/;"	m	struct:VP_UTHTTP_TRANS
do_connect	vp_sdk/vp_local_tcpclient.h	/^	int  (* do_connect)(vp_local_client_args *pclient_args, char **ppsend, int *psend_len);	\/\/ this will be called once, when succeed to connect to server$/;"	m	struct:VP_LOCAL_CLIENT
do_ferry_huasan_6060_vscmd_reply	vp_ferry/ferry_huasan.c	/^static int do_ferry_huasan_6060_vscmd_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
do_ferry_huasan_vsreq	vp_ferry/ferry_huasan.c	/^static int do_ferry_huasan_vsreq(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
do_ferry_sip_request_200ok	vp_ferry/ferry_amplesky_28181.c	/^int do_ferry_sip_request_200ok(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_ferry_sip_request_message	vp_ferry/common_28181.c	/^int do_ferry_sip_request_message(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_ferry_sip_request_register	vp_ferry/common_28181.c	/^int do_ferry_sip_request_register(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_hik_rtsp_reply	vp_ferry/ferry_hik_28181.c	/^int do_hik_rtsp_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_jonet_replace_content	vp_ferry/ferry_shanxi_jonet.c	/^int do_jonet_replace_content(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_keda2800_logon	vp_ferry/ferry_keda_v2800.c	/^static int do_keda2800_logon(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
do_process_recv	vp_sdk/vp_local_tcpclient.h	/^	int  (* do_process_recv)(vp_local_client_args *pclient_args, char **ppreply, int *preply_len, int *pbuf_len);$/;"	m	struct:VP_LOCAL_CLIENT
do_promon	promon/vp_promon.c	/^void do_promon(char *line)$/;"	f
do_recv	vp_ferry/pm_proxy.h	/^    int  (* do_recv)(pvp_uthttp put, char *data_buf, int *data_len, int direction);$/;"	m	struct:pm_proxy
do_recv	vp_sdk/vp_uthttp.h	/^    int  (* do_recv)(pvp_uthttp put, char *buf, int *pack_len, int direct);$/;"	m	struct:VP_UTHTTP_TRANS
do_reply	vp_ferry/pm_proxy.h	/^    int  (* do_reply)(pvp_uthttp put, char **ut_buf, u32 *pack_len);$/;"	m	struct:pm_proxy
do_reply	vp_sdk/vp_uthttp.h	/^    int  (* do_reply)(pvp_uthttp phttp, char **buf, u32 *pack_len);$/;"	m	struct:VP_UTHTTP_TRANS
do_reply_receiver_http	vp_sdk/vp_multi_protol.c	/^int do_reply_receiver_http(int sockfd, void *void_put, char **pkg, u32 *len_pkg, SA *src_addr, socklen_t *addrlen)$/;"	f
do_reply_receiver_osp	vp_sdk/vp_multi_protol.c	/^int do_reply_receiver_osp(int sockfd, void *put, char **pkg, u32 *len_pkg,SA *src_addr, socklen_t *addrlen )$/;"	f
do_request	vp_ferry/pm_proxy.h	/^    int  (* do_request)(pvp_uthttp put, char **ut_buf, u32 *pack_len);$/;"	m	struct:pm_proxy
do_request	vp_sdk/vp_uthttp.h	/^    int  (* do_request)(pvp_uthttp phttp, char **buf, u32 *pack_len);$/;"	m	struct:VP_UTHTTP_TRANS
do_request_receiver_osp	vp_sdk/vp_multi_protol.c	/^int do_request_receiver_osp(int sockfd, void *put, char **pkg, u32 *len_pkg,SA *src_addr, socklen_t *addrlen )$/;"	f
do_sip_ok	vp_ferry/ferry_shanxi_jonet.c	/^int do_sip_ok(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f
do_sip_register	vp_ferry/ferry_datang.c	/^do_sip_register(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
do_sip_replace_invite	vp_ferry/common_28181.c	/^int do_sip_replace_invite(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_sip_reply_invite	vp_ferry/ferry_amplesky_28181.c	/^int do_sip_reply_invite(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_sip_reply_replace_to_by_key	vp_ferry/common_28181.c	/^int do_sip_reply_replace_to_by_key(pvp_uthttp put, const char *key, const char *dst_ip, u16 dst_port, char **ut_buf, u32 *pack_len)$/;"	f
do_sip_sdp	vp_ferry/ferry_shanxi_jonet.c	/^int do_sip_sdp(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
do_socket	vp_ferry/pm_proxy.h	/^    int  (* do_socket)(pvp_uthttp put, int sockfd);$/;"	m	struct:pm_proxy
do_socket	vp_sdk/vp_uthttp.h	/^    int  (* do_socket)(pvp_uthttp put, int sockfd);$/;"	m	struct:VP_UTHTTP_TRANS
doexit_sys	vp_mod/mod_arg.c	/^static void  (*doexit_sys)(int) = NULL;$/;"	v	file:
dport	vp_sdk/pool_port.h	/^	u16  dport;$/;"	m	struct:POOL_PORT
dport	vp_sdk/pool_port.h	/^    u16  dport[IP_COUNT];   \/\/ mapping dest port$/;"	m	struct:play_record
dport	vp_sdk/portmap.c	/^    char dport[8];$/;"	m	struct:__portmap	file:
dport	vp_sdk/vp_distribute.h	/^    u16  dport;                  \/\/ dest video server ip or camera port$/;"	m	struct:video_way
dport	vp_sdk/vp_local_tcpclient.h	/^    u16  dport;             \/\/ visit des port$/;"	m	struct:VP_LOCAL_CLIENT_ARGS
dport	vp_sdk/vp_uthttp.h	/^    u16  dport;             \/\/ visit des port$/;"	m	struct:VP_UTHTTP
dport	vp_sdk/vp_uthttp.h	/^    u16  dport;$/;"	m	struct:vp_ferry_tcp_req
dport	vp_sdk/vp_uthttp.h	/^    u16 dport;$/;"	m	struct:vp_ferry_req
dport	vp_sdk/vp_uthttp.h	/^    u16 dport;$/;"	m	struct:vp_ferry_udp_req
dt_empty	vp_sdk/vp_distribute.c	/^int dt_empty(vs_list * pvslist)$/;"	f
dt_id	vp_sdk/vp_distribute.h	/^    char dt_id[32];              \/\/ distribute id auth process share video stream process$/;"	m	struct:video_way
dt_init	vp_sdk/vp_distribute.h	62;"	d
dt_print	vp_sdk/vp_distribute.c	/^void dt_print(vs_list *pvslist)$/;"	f
dt_quit	vp_sdk/vp_distribute.c	/^void dt_quit(vs_list *pvslist)$/;"	f
dt_recv_x	vp_sdk/vp_distribute.c	/^int dt_recv_x(vs_list *pvslist,$/;"	f
dt_send_x	vp_sdk/vp_distribute.c	/^void dt_send_x(vs_list *pvslist,$/;"	f
dvport	vp_sdk/visit_list.h	/^    u16    dvport; \/\/ dest video port$/;"	m	struct:__cli_visit_list
dvs_id	vp_sdk/defflow.h	/^    char   dvs_id[32];$/;"	m	struct:flow_stat
eTransFormat	vp_mod/check_protocol_format.h	/^}eTransFormat;$/;"	t	typeref:enum:e_trans_format
e_flg_tset	vp_sdk/vp_thread_setting.h	/^}e_flg_tset;$/;"	t	typeref:enum:__e_flg_tset
e_ports	vp_ferry/ferry_shanxi_jonet.c	/^enum e_ports$/;"	g	file:
e_trans_format	vp_mod/check_protocol_format.h	/^typedef enum e_trans_format$/;"	g
e_vf	vp_mod/mod_videoformat_filter.h	/^}e_vf;$/;"	t	typeref:enum:_e_videoformat
efr_proto	vp_mod/filter_rules.h	/^	enum __e_proto_type efr_proto;$/;"	m	struct:__fr_proto	typeref:enum:__fr_proto::__e_proto_type
enable_proto_filter	vp_mod/filter_rules.c	/^enable_proto_filter(FILTER *flt, enum __e_proto_type efr_proto, enum __flt_bw_type stat)$/;"	f
exit_code	vp_sdk/license.h	/^	int		exit_code;$/;"	m	struct:li_run_status
exit_code	vp_sdk/license.h	/^	int exit_code;$/;"	m	struct:li_arg
exit_code	vp_sdk/process_family.c	/^	int exit_code;$/;"	m	struct:__pf_member	file:
exit_sys	vp_portmap.c	/^static void exit_sys(int signnum)$/;"	f	file:
expr	vp_mod/filter_rules.h	/^	char expr[1024];$/;"	m	struct:__fr_string
false	vp_sdk/udeftype.h	/^    false = 0$/;"	e	enum:__anon3
ferry_accept	vp_sdk/vp_tcpproxy.c	/^static int ferry_accept(int fd, SAI *addr, pvp_uthtrans puthtrans)$/;"	f	file:
ferry_port	vp_sdk/config.h	/^    u16  ferry_port;$/;"	m	struct:general_config_t
filter_accctl	vp_mod/filter_rules.c	/^filter_accctl(fr_accctl *fraccctl, char *uname, int inet_sip, int inet_smask, int inet_dip, int inet_dmask, time_t t, int *rid)$/;"	f	file:
filter_check	vp_mod/filter_rules.c	/^filter_check(FILTER *flt, flt_item *fi)$/;"	f
filter_ctrlcmd	vp_mod/filter_rules.c	/^filter_ctrlcmd(fr_ctrlcmd *frctrlcmd, char *cmd, int len, int *rid)$/;"	f	file:
filter_ip	vp_mod/filter_rules.c	/^filter_ip(fr_ip *frip, int inet_ip, int inet_mask, int *rid)$/;"	f	file:
filter_string	vp_mod/filter_rules.c	/^filter_string(fr_string *frstring, char *string, int len, int direct, int *rid)$/;"	f	file:
filter_time	vp_mod/filter_rules.c	/^filter_time(fr_time *frtime, time_t t, int *rid\/*rule id matched*\/)$/;"	f	file:
find_label	tmp.c	/^query_conf *find_label(query_conf *p_query_conf, char *label_name)$/;"	f
find_label	vp_sdk/config.c	/^query_conf *find_label(query_conf *p_query_conf, char *label_name)$/;"	f
find_mem	vp_sdk/memreplace.h	/^}find_mem;$/;"	t	typeref:struct:__find_mem
find_pos	vp_sdk/memreplace.h	/^}find_pos;$/;"	t	typeref:struct:__find_pos
find_sip_addr	vp_sdk/common.c	/^int find_sip_addr(char **ut_buf, char *ip, char *port)$/;"	f
flag	vp_sdk/pool_ip.h	/^    char   flag;          \/\/ 0-->ip no use; 1-->ip use$/;"	m	struct:IP_POOL
flag	vp_sdk/pool_port.c	/^	char *flag;$/;"	m	struct:_pool_port_segment	file:
flag	vp_sdk/pool_port.h	/^    char flag;             \/* 0-port no use; 1-port use *\/$/;"	m	struct:POOL_PORT
flag	vp_sdk/pool_port.h	/^    char flag[IP_COUNT];    \/\/ port applications sign$/;"	m	struct:play_record
flg	vp_sdk/vp_thread_setting.h	/^	e_flg_tset flg;	\/\/ flag for finding me.$/;"	m	struct:__tset_arg
flg	vp_sdk/vp_thread_setting.h	/^	uint64_t	flg;		\/\/ thread setting.$/;"	m	struct:__thread_setting
floperate	vp_sys/vp_flowsvr.c	/^}floperate, *pflow;$/;"	t	typeref:struct:flow_operate	file:
flow_operate	vp_sys/vp_flowsvr.c	/^typedef struct flow_operate$/;"	s	file:
flow_stat	vp_sdk/defflow.h	/^typedef struct flow_stat$/;"	s
flow_stat_t	vp_sdk/defflow.h	/^} flow_stat_t;$/;"	t	typeref:struct:flow_stat
flt_get_results	vp_mod/filter_rules.c	/^flt_get_results(FILTER *flt, const char* str, int len_str)$/;"	f	file:
flt_item	vp_mod/filter_rules.h	/^typedef struct __flt_item	flt_item;$/;"	t	typeref:struct:__flt_item
flt_rules	vp_mod/filter_rules.h	/^}flt_rules;$/;"	t	typeref:struct:__flt_rules
fltck_full_acl	vp_mod/filter_rules.c	/^fltck_full_acl(FILTER *flt, char *uname, time_t t, int inet_sip, int inet_smask, int inet_dip, int inet_dmask)$/;"	f
fltck_oacl	vp_mod/filter_rules.c	/^fltck_oacl(FILTER *flt, char *uname, time_t t, int inet_sip, int inet_smask, int inet_dip, int inet_dmask)$/;"	f
fltck_ocmd	vp_mod/filter_rules.c	/^fltck_ocmd(FILTER *flt, char *ctrlcmd)$/;"	f
fltck_odip	vp_mod/filter_rules.c	/^fltck_odip(FILTER *flt, int inet_ip, int inet_mask)$/;"	f
fltck_oproto	vp_mod/filter_rules.c	/^fltck_oproto(FILTER *flt, char *proto, int len_proto)$/;"	f
fltck_osip	vp_mod/filter_rules.c	/^fltck_osip(FILTER *flt, int inet_ip, int inet_mask)$/;"	f
fltck_ostr	vp_mod/filter_rules.c	/^fltck_ostr(FILTER *flt, char *str, int len_str, int str_direct)$/;"	f
fltck_otm	vp_mod/filter_rules.c	/^fltck_otm(FILTER *flt, time_t t)$/;"	f
fnd_pos	vp_sdk/memreplace.h	/^    find_pos *fnd_pos;$/;"	m	struct:__find_mem
fnd_pos_tail	vp_sdk/memreplace.h	/^    find_pos *fnd_pos_tail;$/;"	m	struct:__find_mem
fr	vp_mod/filter_rules.h	/^	flt_rules *fr;$/;"	m	struct:__flt__
fr_accctl	vp_mod/filter_rules.h	/^}fr_accctl;$/;"	t	typeref:struct:__fr_accctl
fr_ctrlcmd	vp_mod/filter_rules.h	/^}fr_ctrlcmd;$/;"	t	typeref:struct:__fr_ctrlcmd
fr_ip	vp_mod/filter_rules.h	/^}fr_ip;$/;"	t	typeref:struct:__fr_ip
fr_is_amplesky	vp_mod/filter_rules.c	/^static bool fr_is_amplesky(char *proto, int len)$/;"	f	file:
fr_is_ftp	vp_mod/filter_rules.c	/^static bool fr_is_ftp(char *proto, int len)$/;"	f	file:
fr_is_http	vp_mod/filter_rules.c	/^static bool fr_is_http(char *proto, int len)$/;"	f	file:
fr_is_rtsp	vp_mod/filter_rules.c	/^static bool fr_is_rtsp(char *proto, int len)$/;"	f	file:
fr_is_sip	vp_mod/filter_rules.c	/^static bool fr_is_sip(char *proto, int len)$/;"	f	file:
fr_proto	vp_mod/filter_rules.h	/^}fr_proto;$/;"	t	typeref:struct:__fr_proto
fr_string	vp_mod/filter_rules.h	/^}fr_string;$/;"	t	typeref:struct:__fr_string
fr_time	vp_mod/filter_rules.h	/^}fr_time;$/;"	t	typeref:struct:__fr_time
frame_enable	vp_sdk/config.h	/^    bool frame_enable;$/;"	m	struct:__frame_modify_paras
frame_modify_flg	vp_sdk/config.h	/^    int frame_modify_flg;$/;"	m	struct:__frame_modify_paras
frame_modify_num	vp_sdk/config.h	/^    int frame_modify_num;$/;"	m	struct:__frame_modify_paras
frame_modify_paras	vp_sdk/config.h	/^} frame_modify_paras;$/;"	t	typeref:struct:__frame_modify_paras
frame_run_count	vp_sdk/config.c	/^int frame_run_count(int * count)$/;"	f
free_configuration	tmp.c	/^void free_configuration(query_conf **pque)$/;"	f
free_configuration	vp_sdk/config.c	/^void free_configuration(query_conf **pque)$/;"	f
free_flt_rules	vp_mod/filter_rules.c	/^free_flt_rules(flt_rules **fr)$/;"	f	file:
free_fr_accctl	vp_mod/filter_rules.c	/^static void free_fr_accctl(fr_accctl **fraccctl)	{ FR_FREE(fr_accctl, fraccctl); }$/;"	f	file:
free_fr_ctrlcmd	vp_mod/filter_rules.c	/^static void free_fr_ctrlcmd(fr_ctrlcmd **frctrlcmd)$/;"	f	file:
free_fr_ip	vp_mod/filter_rules.c	/^static void free_fr_ip(fr_ip **frip)				{ FR_FREE(fr_ip, frip); }$/;"	f	file:
free_fr_string	vp_mod/filter_rules.c	/^static void free_fr_string(fr_string **frstring)	{ FR_FREE(fr_string, frstring); }$/;"	f	file:
free_fr_time	vp_mod/filter_rules.c	/^static void free_fr_time(fr_time **frtime)			{ FR_FREE(fr_time, frtime); }$/;"	f	file:
free_idle_segment_port	vp_sdk/pool_port.c	/^void free_idle_segment_port(u16 port)$/;"	f
free_ip_pool	vp_sdk/pool_ip.c	/^void free_ip_pool()$/;"	f
free_item	tmp.c	/^void free_item(conf_item **item)$/;"	f
free_item	vp_sdk/config.c	/^void free_item(conf_item **item)$/;"	f
frproto	vp_mod/filter_rules.h	/^	fr_proto	frproto;$/;"	m	struct:__flt_rules
fs_okey	vp_sys/vp_flowsvr.c	14;"	d	file:
fs_value	vp_sdk/defflow.h	/^    l_int  fs_value;$/;"	m	struct:flow_stat
fst_ip_val	vp_mod/mod_monitor_flow.c	/^static char fst_ip_val[FSTIPROW][FSTIPCOL] = {{0}};$/;"	v	file:
fstip_record_row	vp_mod/mod_monitor_flow.c	/^static int fstip_record_row = 0;$/;"	v	file:
g_apps	vp_sys/sys_license.c	/^static const char g_apps[] = "vp-fiber vp-vsudp vp-vstcp";$/;"	v	file:
g_cache_fifo_mutex	vp_mod/mod_cache_fifo.c	/^static pthread_mutex_t  g_cache_fifo_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_cascade_ip	vp_ferry/ferry_keda_v2800.c	/^static char g_cascade_ip[16] = {0};$/;"	v	file:
g_cascade_ip	vp_ferry/ferry_keda_v2801e.c	/^static char g_cascade_ip[16] = {0};$/;"	v	file:
g_cert_enable	vp_sdk/common.c	/^static bool g_cert_enable = false;$/;"	v	file:
g_cfg_value	vp_ferry/ferry_huasan.c	/^static char g_cfg_value[C_TOTAL][32] = {{0}};$/;"	v	file:
g_cfgpath_portmap	vp_mod/mod_arg.c	/^static char  g_cfgpath_portmap[128] = {0};$/;"	v	file:
g_conns	vp_mod/mod_mysql.c	/^static my_conn			*g_conns = NULL;$/;"	v	file:
g_dip	vp_vsudp_m.c	/^static int g_dip = 0;$/;"	v	file:
g_distb	vp_vstcp.c	/^static   bool     g_distb = false;$/;"	v	file:
g_distb	vp_vsudp.c	/^static   bool     g_distb = false;  \/\/ use distribute$/;"	v	file:
g_dport	vp_vsudp_m.c	/^static int g_dport = 0;$/;"	v	file:
g_e_tformat	vp_ferry/ferry_amplesky_28181.c	/^static int      g_e_tformat = E_TFORMAT_ERROR;$/;"	v	file:
g_ferry_port	vp_mod/mod_arg.c	/^static int   g_ferry_port = 30020;$/;"	v	file:
g_ferry_port_str	vp_mod/mod_arg.c	/^static char  g_ferry_port_str[] = "30020";$/;"	v	file:
g_frmp	vp_sdk/config.c	/^frame_modify_paras g_frmp = {false,0,0};$/;"	v
g_general_config	vp_sdk/config.c	/^struct general_config_t g_general_config = { is_loaded: 0, };$/;"	v	typeref:struct:general_config_t
g_general_path	vp_ferry/vp_ferry.c	/^const char *g_general_path = GENERAL_CONFIG_FILE;$/;"	v
g_gl_data	vp_sdk/global_list.c	/^static gldata *g_gl_data = NULL;$/;"	v	file:
g_ipplist	vp_sdk/pool_ip.c	/^static ipp_list g_ipplist;$/;"	v	file:
g_ippool	vp_vsudp.c	/^static   bool     g_ippool = false; \/\/ use ip pool$/;"	v	file:
g_lip	vp_vsudp_m.c	/^static int g_lip = 0;$/;"	v	file:
g_lport	vp_sdk/pool_port.c	/^static int g_lport = INIT_PORT;$/;"	v	file:
g_lport	vp_vsudp_m.c	/^static int g_lport = 0;$/;"	v	file:
g_mod_isopen	vp_mod/mod_mysql.c	/^static volatile bool	g_mod_isopen = false;$/;"	v	file:
g_mutex	vp_mod/mod_mysql.c	/^static pthread_mutex_t	g_mutex;$/;"	v	file:
g_mutex	vp_vstcp.c	/^pthread_mutex_t   g_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
g_numconn	vp_vstcp.c	/^static   int      g_numconn = 0;$/;"	v	file:
g_p_app_dir	vp_sdk/common.c	/^static const char *g_p_app_dir = DEFAULT_APP_DIR;$/;"	v	file:
g_pf_home	vp_sdk/process_family.c	/^static pf_home g_pf_home = {token:-1, pro_id:NULL};$/;"	v	file:
g_pf_member	vp_sdk/process_family.c	/^static pf_member g_pf_member = {home_pid:0, token:-1, exit_code:0, before_exit:NULL};$/;"	v	file:
g_pflow	vp_sys/vp_flowsvr.c	/^static floperate *g_pflow = NULL;$/;"	v	file:
g_pidfn	vp_sys/sys_license.c	/^static const char g_pidfn[] = "sys-license.pid";$/;"	v	file:
g_pm	vp_ferry/pm_proxy.c	/^struct pm_proxy g_pm = {0,-1,0,0,0, NULL, NULL,NULL,NULL,NULL,NULL};$/;"	v	typeref:struct:pm_proxy
g_pmid	vp_ferry/ferry_amplesky_28181.c	/^static const char *g_pmid = NULL;$/;"	v	file:
g_pmid	vp_ferry/ferry_hik_28181.c	/^static const char *g_pmid = NULL;$/;"	v	file:
g_pmid	vp_ferry/ferry_keda_v2801e.c	/^static int g_pmid = 0;$/;"	v	file:
g_pmid_str	vp_ferry/ferry_keda_v2801e.c	/^static char g_pmid_str[16] = {0};$/;"	v	file:
g_pmid_str	vp_mod/mod_arg.c	/^static char  g_pmid_str[64] = {0};$/;"	v	file:
g_pp_segment	vp_sdk/pool_port.c	/^struct _pool_port_segment g_pp_segment = {0,0,0, NULL};$/;"	v	typeref:struct:_pool_port_segment
g_pplist	vp_sdk/pool_port.c	/^static  pp_list   * g_pplist = NULL;$/;"	v	file:
g_pport	vp_vstcp.c	/^static   bool     g_pport = false;$/;"	v	file:
g_pport	vp_vsudp.c	/^static   bool     g_pport = false;  \/\/ use port pool$/;"	v	file:
g_rmutex	vp_sdk/pool_port.c	/^static pthread_mutex_t g_rmutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_times	vp_vstcp.c	/^static   char     g_times = 0;$/;"	v	file:
g_tms_ip	vp_ferry/ferry_h3c_v8500.c	/^static char g_tms_ip[16] = {0};$/;"	v	file:
g_tout	vp_ferry/vp_ferry.c	/^static int g_tout = DEFAULT_TOUT;$/;"	v	file:
g_tout	vp_vsudp_m.c	/^static int g_tout = 30;$/;"	v	file:
g_tprivate	vp_sdk/thread_private_data.c	/^static tprivate *g_tprivate = NULL;$/;"	v	file:
g_ums_ip	vp_ferry/ferry_h3c_v8500.c	/^static char g_ums_ip[16] = {0};$/;"	v	file:
g_ums_ip	vp_ferry/ferry_hik.c	/^static char g_ums_ip[16] = {0};$/;"	v	file:
g_ums_ip	vp_ferry/ferry_keda_v2800.c	/^static char g_ums_ip[16] = {0};$/;"	v	file:
g_ums_ip	vp_ferry/ferry_keda_v2801e.c	/^static char g_ums_ip[16] = {0};$/;"	v	file:
g_value	vp_ferry/ferry_keda_v2801e.c	/^static char g_value[C_TOTAL][32] = {{0}};$/;"	v	file:
g_vf	vp_mod/mod_videoformat_filter.c	/^static int g_vf = 0;$/;"	v	file:
g_vport	vp_vstcp.c	/^static   u16      g_vport;$/;"	v	file:
g_vport	vp_vsudp.c	/^static   u16      g_vport;$/;"	v	file:
gdata	vp_ferry/ferry_hik.c	/^static gldata *gdata = NULL;$/;"	v	file:
general_config_t	vp_sdk/config.h	/^struct general_config_t$/;"	s
get_bufline	vp_sys/sys_manager.c	/^char* get_bufline(char *line, char *buf, char *pos_bufend)$/;"	f
get_call_id	vp_ferry/common_28181.c	/^char *get_call_id(char *pkg, u32 len_pkg, char *call_id, u32 sz_call_id)$/;"	f
get_cmd_ip_port	vp_ferry/common_28181.c	/^int get_cmd_ip_port(char *pkg, u32 len_pkg, char *ip, char *port)$/;"	f
get_conf_value	vp_sdk/config.c	/^char *get_conf_value(char *label_name, char *item_name, query_conf *p_query_conf)$/;"	f
get_content_len	vp_sdk/common.c	/^int get_content_len(char *buf, u32 len)$/;"	f
get_content_len_http	vp_sdk/common.c	/^int get_content_len_http(char *buf, u32 len)$/;"	f
get_content_len_osp	vp_sdk/common.c	/^int get_content_len_osp(char *pkg,int start_pos)$/;"	f
get_cpu_mem_rate	vp_sys/sys_manager.c	/^int get_cpu_mem_rate(int sock, char recv_msg[])$/;"	f
get_cur_ipinfo	vp_sys/sys_manager.c	/^int get_cur_ipinfo(char *ip, char *mask, char *ethVar)$/;"	f
get_db_property	vp_mod/mod_mysql.c	/^get_db_property(char *ip, char *port, char *user, char *pwd)$/;"	f
get_diskinfo	vp_sys/sys_manager.c	/^int get_diskinfo(int sock, char recvmsg[])$/;"	f
get_dt_smem	vp_sdk/vp_distribute.c	/^vs_list * get_dt_smem(const char * smid)$/;"	f
get_expires	vp_ferry/ferry_amplesky_28181.c	/^int get_expires(char *pkg)$/;"	f
get_filter	vp_mod/filter_rules.c	/^get_filter(const char *svrid)$/;"	f
get_float_ipmask	vp_sys/sys_manager.c	/^static int get_float_ipmask(char *buf, char *ip, char *mask, char *ethVar, int* flag)$/;"	f	file:
get_flow_key	vp_sys/vp_flowsvr.c	/^int get_flow_key(char *pdvs)$/;"	f
get_idle_ip	vp_ferry/ferry_huasan.c	/^static ip_pool *get_idle_ip(pvp_uthttp put)$/;"	f	file:
get_idle_ip	vp_ferry/ferry_sandun.c	/^static ip_pool *get_idle_ip(pvp_uthttp put)$/;"	f	file:
get_idle_segment_port	vp_sdk/pool_port.c	/^u16 get_idle_segment_port()$/;"	f
get_inet_ip_from_socket	vp_sdk/common.c	/^u32 get_inet_ip_from_socket(int sockfd)$/;"	f
get_inet_port_from_socket	vp_sdk/common.c	/^u16 get_inet_port_from_socket(int sockfd)$/;"	f
get_mac_addr	vp_ferry/ferry_zsyh.c	/^void get_mac_addr(char *mac_addr)$/;"	f
get_max_fip_idx	vp_sys/sys_manager.c	/^static int get_max_fip_idx(char *buf, int buf_len, char *flag)$/;"	f	file:
get_max_flow_rate	vp_mod/mod_monitor_flow.c	/^int get_max_flow_rate(char *_supp_id)$/;"	f
get_meminfo	vp_sys/sys_manager.c	/^int get_meminfo(int sock, char recvmsg[])$/;"	f
get_netconf	vp_sys/sys_manager.c	/^int get_netconf(int sock, char recv_msg[])$/;"	f
get_netinfo	vp_sys/sys_manager.c	/^int get_netinfo(int sock, char recvmsg[])$/;"	f
get_request_index	vp_sys/sys_manager.c	/^static int get_request_index(int cmd, struct __tms_reqst *rqst)$/;"	f	file:
get_sharemem_pid	vp_sdk/common.c	/^int get_sharemem_pid()$/;"	f
get_sql_dat_flg	vp_mod/mod_monitor_flow.c	/^static int get_sql_dat_flg = 0;$/;"	v	file:
get_sshdstatus	vp_sys/sys_manager.c	/^int get_sshdstatus(int sock, char recv_msg[])$/;"	f
get_string_val	vp_ferry/ferry_fiber.c	/^static void get_string_val(char *s,char *b,char *e,char *result)$/;"	f	file:
get_sysinfo	vp_sys/sys_manager.c	/^int get_sysinfo(int sock, char recvmsg[])$/;"	f
get_systime	vp_sys/sys_manager.c	/^int get_systime(int sock, char recv_msg[]) $/;"	f
get_user_id	vp_sdk/common.c	/^int get_user_id(SAI cliaddr, char *userid)$/;"	f
get_user_name	vp_sdk/common.c	/^int get_user_name(SAI cliaddr, char *username)$/;"	f
get_value_from_label	tmp.c	/^char *get_value_from_label(query_conf *que, char *item_name)$/;"	f
get_value_from_label	vp_sdk/config.c	/^char *get_value_from_label(query_conf *que, char *item_name)$/;"	f
get_virtual_cameraid	vp_sdk/common.c	/^char * get_virtual_cameraid(char * cameraid)$/;"	f
getarg	vp_vstcp.c	/^int getarg(int argc, char * argv[])$/;"	f
getarg	vp_vsudp.c	/^int getarg(int argc, char * argv[])$/;"	f
getfilesz	vp_sys/sys_manager.c	/^size_t getfilesz(FILE* fp)$/;"	f
getsockport	vp_sdk/common.c	/^u16 getsockport(int sockfd)$/;"	f
getsubstring	vp_sdk/common.c	/^void getsubstring(char *str, char a[][MAX_ARRAY], char seg)$/;"	f
gl_clr_data	vp_sdk/global_list.c	/^void gl_clr_data()$/;"	f
gl_get_data	vp_sdk/global_list.c	/^gldata *gl_get_data(const char *name)$/;"	f
gl_mod_data	vp_sdk/global_list.c	/^bool gl_mod_data(const char *name, char *data, int len)$/;"	f
gl_rm_data	vp_sdk/global_list.c	/^bool gl_rm_data(const char *name)$/;"	f
gl_set_data	vp_sdk/global_list.c	/^bool gl_set_data(const char *name, char *data, int len)$/;"	f
gldata	vp_sdk/global_list.h	/^}gldata;$/;"	t	typeref:struct:__global_list_data
gzcompress	vp_sdk/zcompress.c	/^int gzcompress(Bytef *data, uLong ndata, Bytef *zdata, uLong *nzdata)$/;"	f
gzdecompress	vp_sdk/zcompress.c	/^int gzdecompress(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)$/;"	f
h3c_close	vp_ferry/ferry_h3c.c	/^int h3c_close(pvp_uthttp put, int sockfd)$/;"	f
h3c_fs_close	vp_ferry/ferry_h3c_fs.c	/^int h3c_fs_close(pvp_uthttp put, int sockfd)$/;"	f
h3c_fs_init	vp_ferry/ferry_h3c_fs.c	/^int h3c_fs_init()$/;"	f
h3c_fs_quit	vp_ferry/ferry_h3c_fs.c	/^void h3c_fs_quit()$/;"	f
h3c_fs_recv	vp_ferry/ferry_h3c_fs.c	/^int h3c_fs_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
h3c_fs_reply	vp_ferry/ferry_h3c_fs.c	/^int h3c_fs_reply(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f
h3c_fs_request	vp_ferry/ferry_h3c_fs.c	/^int h3c_fs_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f
h3c_fs_socket	vp_ferry/ferry_h3c_fs.c	/^ int h3c_fs_socket(pvp_uthttp put, const int sockfd)$/;"	f
h3c_harbin_close	vp_ferry/ferry_h3c_harbin.c	/^int h3c_harbin_close(pvp_uthttp put, int sockfd)$/;"	f
h3c_harbin_init	vp_ferry/ferry_h3c_harbin.c	/^int h3c_harbin_init()$/;"	f
h3c_harbin_quit	vp_ferry/ferry_h3c_harbin.c	/^void h3c_harbin_quit()$/;"	f
h3c_harbin_recv	vp_ferry/ferry_h3c_harbin.c	/^int h3c_harbin_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
h3c_harbin_reply	vp_ferry/ferry_h3c_harbin.c	/^int h3c_harbin_reply(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f
h3c_harbin_request	vp_ferry/ferry_h3c_harbin.c	/^int h3c_harbin_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f
h3c_harbin_socket	vp_ferry/ferry_h3c_harbin.c	/^ int h3c_harbin_socket(pvp_uthttp put, const int sockfd)$/;"	f
h3c_init	vp_ferry/ferry_h3c.c	/^int h3c_init()$/;"	f
h3c_quit	vp_ferry/ferry_h3c.c	/^void h3c_quit()$/;"	f
h3c_recv	vp_ferry/ferry_h3c.c	/^int h3c_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
h3c_request	vp_ferry/ferry_h3c.c	/^int h3c_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
h3c_socket	vp_ferry/ferry_h3c.c	/^int h3c_socket(pvp_uthttp put, const int sockfd)$/;"	f
has_empty_record	vp_mod/filter_rules.c	/^has_empty_record(MYSQL_ROW record, int num_idx, ...)$/;"	f	file:
head	vp_sdk/map.h	/^  node_t *head;$/;"	m	struct:__anon2
high_rate_minlast	vp_mod/mod_monitor_flow.c	/^const static int high_rate_minlast = 3;$/;"	v	file:
hik_fcg_init	vp_ferry/ferry_hik.c	/^int hik_fcg_init()$/;"	f
hik_fcg_quit	vp_ferry/ferry_hik.c	/^void hik_fcg_quit()$/;"	f
hik_fcg_reply	vp_ferry/ferry_hik.c	/^int hik_fcg_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
hik_fcg_request	vp_ferry/ferry_hik.c	/^int hik_fcg_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
hik_rtsp_replace	vp_ferry/ferry_hik_28181.c	/^int hik_rtsp_replace(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
hlen	vp_sdk/vp_udpproxy.c	/^    u32    hlen;               \/\/ http pack head len$/;"	m	struct:UDP_PROXY_LIST	file:
home_pid	vp_sdk/process_family.c	/^	pid_t home_pid;$/;"	m	struct:__pf_member	file:
home_signal_handler	vp_sdk/process_family.c	/^static void home_signal_handler(int signum, siginfo_t *info, void *myact)$/;"	f	file:
host_side	vp_sdk/config.h	/^    int  host_side;          \/\/ current hosts side(inner\/outer)$/;"	m	struct:general_config_t
http_chunk_content	vp_sdk/vp_uthttp.c	/^int http_chunk_content(char * str)$/;"	f
http_chunked_change	vp_sdk/vp_uthttp.c	/^int http_chunked_change(char * str, u32 * rt)$/;"	f
http_chunked_check	vp_sdk/vp_uthttp.c	/^int http_chunked_check(char *str, u32 len)$/;"	f
http_chunked_deal	vp_sdk/vp_uthttp.c	/^int http_chunked_deal(char **reqst, char *buf, u32 *total, int ret, int chunked)$/;"	f
http_chunked_exchange	vp_sdk/vp_uthttp.c	/^int http_chunked_exchange(char *str, u32 lbody, u32 *total)$/;"	f
http_chunked_mode	vp_sdk/vp_uthttp.c	/^int http_chunked_mode(char **reqst, char *buf, int ret, u32 *tl, int *chk)$/;"	f
http_general_mode	vp_sdk/vp_uthttp.c	/^int http_general_mode(char **reqst, char *buf, int ret, u32 *tl, u32 *hl, u32 *bl)$/;"	f
http_head	vp_mod/mod_chunked.h	/^    char *http_head;$/;"	m	struct:_modchunked_t
http_parse_req_data	vp_sdk/vp_uthttp.c	/^int http_parse_req_data(char **reqst, char *dbuf, int ret,$/;"	f
http_parse_req_head	vp_sdk/vp_uthttp.c	/^int http_parse_req_head(u32 *hlen, u32 *blen, char *dbuf)$/;"	f
httpgzdecompress	vp_sdk/zcompress.c	/^int httpgzdecompress(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)$/;"	f
id	vp_mod/filter_rules.h	/^	int  id;$/;"	m	struct:__fr_ctrlcmd
id	vp_mod/filter_rules.h	/^	int id;$/;"	m	struct:__fr_accctl
id	vp_mod/filter_rules.h	/^	int id;$/;"	m	struct:__fr_ip
id	vp_mod/filter_rules.h	/^	int id;$/;"	m	struct:__fr_string
id	vp_mod/filter_rules.h	/^	int id;$/;"	m	struct:__fr_time
inet_atoul	tmp.c	/^unsigned int inet_atoul(const char * s)$/;"	f
inet_atoul	vp_sdk/common.c	/^u32 inet_atoul(const char * s)$/;"	f
inet_dip	vp_mod/filter_rules.h	/^	int inet_dip;$/;"	m	struct:__flt_item
inet_dip	vp_mod/filter_rules.h	/^	int inet_dip;$/;"	m	struct:__fr_accctl
inet_dmask	vp_mod/filter_rules.h	/^	int inet_dmask;$/;"	m	struct:__flt_item
inet_dmask	vp_mod/filter_rules.h	/^	int inet_dmask;$/;"	m	struct:__fr_accctl
inet_ip	vp_mod/filter_rules.h	/^	u32 inet_ip;$/;"	m	struct:__fr_ip
inet_mask	vp_mod/filter_rules.h	/^	int inet_mask;$/;"	m	struct:__fr_ip
inet_sip	vp_mod/filter_rules.h	/^	int inet_sip;$/;"	m	struct:__flt_item
inet_sip	vp_mod/filter_rules.h	/^	int inet_sip;$/;"	m	struct:__fr_accctl
inet_smask	vp_mod/filter_rules.h	/^	int inet_smask;$/;"	m	struct:__flt_item
inet_smask	vp_mod/filter_rules.h	/^	int inet_smask;$/;"	m	struct:__fr_accctl
inet_ultoa	tmp.c	/^char * inet_ultoa(unsigned int u, char * s)$/;"	f
inet_ultoa	vp_sdk/common.c	/^char * inet_ultoa(u32 u, char * s)$/;"	f
init_find	vp_sdk/memreplace.c	/^void init_find(find_mem *fmem)$/;"	f
init_flti	vp_mod/filter_rules.c	/^init_flti(flt_item *fi, time_t t, char *uname, int inet_sip, int inet_smask, int inet_dip, int inet_dmask, char *ctrlcmd, char *str, int len_str, int str_direct, int chk_flag)$/;"	f
init_flti_oacl	vp_mod/filter_rules.c	/^init_flti_oacl(flt_item *fi, char *uname, time_t t, int inet_sip, int inet_smask, int inet_dip, int inet_dmask)$/;"	f
init_flti_ocmd	vp_mod/filter_rules.c	/^init_flti_ocmd(flt_item *fi, char *ctrlcmd, int len_cmd)$/;"	f
init_flti_odip	vp_mod/filter_rules.c	/^init_flti_odip(flt_item *fi, int inet_ip, int inet_mask)$/;"	f
init_flti_oproto	vp_mod/filter_rules.c	/^init_flti_oproto(flt_item *fi, char *proto, int len_proto)$/;"	f
init_flti_osip	vp_mod/filter_rules.c	/^init_flti_osip(flt_item *fi, int inet_ip, int inet_mask)$/;"	f
init_flti_ostr	vp_mod/filter_rules.c	/^init_flti_ostr(flt_item *fi, char *str, int len_str, int direct)$/;"	f
init_flti_otm	vp_mod/filter_rules.c	/^init_flti_otm(flt_item *fi, time_t t)$/;"	f
init_frame_paras	vp_sdk/config.c	/^bool init_frame_paras()$/;"	f
init_prio_ip_para	vp_mod/mod_monitor_flow.c	/^int init_prio_ip_para(u32 plat_id, u32 local_ip)$/;"	f
init_record_server	vp_sdk/pool_port.c	/^void init_record_server()$/;"	f
init_segment_port	vp_sdk/pool_port.c	/^int init_segment_port(u16 base, int step, int count)$/;"	f
init_sockaddr	vp_sdk/common.c	/^void init_sockaddr(SAI *sockaddr, u32 ip, u16 port)$/;"	f
init_uthtrans	vp_vstcp.c	/^static int init_uthtrans( pvp_uthtrans puthtrans, clivlist *pcvn)$/;"	f	file:
init_uthtrans	vp_vsudp.c	/^static int init_uthtrans( pvp_uthtrans puthtrans, clivlist *pcvn)$/;"	f	file:
init_vser_node	vp_sdk/vp_distribute.h	108;"	d
inner_addr	vp_sdk/config.h	/^    u32  inner_addr;        \/\/ innet public ip$/;"	m	struct:general_config_t
inner_priv_addr	vp_sdk/config.h	/^    u32  inner_priv_addr;$/;"	m	struct:general_config_t
insert_epoll_event	vp_sdk/vp_udpproxy.c	/^static int insert_epoll_event(int epfd, int sockfd, int *curfds)$/;"	f	file:
insert_flow_data	vp_sys/vp_flowsvr.c	/^int insert_flow_data(flow_stat_t *pbuf)$/;"	f
insert_into_database	vp_sys/vp_flowsvr.c	/^int insert_into_database(flow_stat_t *pvalue)$/;"	f
interval_ping	vp_mod/mod_mysql.c	/^const static int interval_ping = 60*10;	\/\/ every ten minutes check the connection.$/;"	v	file:
ip	vp_ferry/ferry_amplesky_28181.c	/^    u32 ip;$/;"	m	struct:_sessions	file:
ip	vp_ferry/ferry_hik_28181.c	/^    u32 ip;$/;"	m	struct:_sessions	file:
ip	vp_sdk/vp_uthttp.h	/^    u32 ip;$/;"	m	struct:__vp_ippool_head
ip_can_through	vp_mod/mod_monitor_flow.c	/^int ip_can_through(int *flg, u32 src_ip, time_t *t_old)$/;"	f
ip_pool	vp_sdk/pool_ip.h	/^} ip_pool;$/;"	t	typeref:struct:IP_POOL
ipp_list	vp_sdk/pool_ip.h	/^} ipp_list;$/;"	t	typeref:struct:IPP_LIST
ipplist_print	vp_sdk/pool_ip.c	/^void ipplist_print()$/;"	f
ippmutex	vp_sdk/pool_ip.h	/^    pthread_mutex_t ippmutex;$/;"	m	struct:IPP_LIST
ippool	vp_sdk/pool_ip.h	/^    ip_pool         ippool;$/;"	m	struct:IPP_LIST
ippool_add	vp_sdk/pool_ip.c	/^ip_pool * ippool_add(u32 lip, u32 dip)$/;"	f
ippool_del_all	vp_sdk/pool_ip.c	/^void ippool_del_all()$/;"	f
ippool_rset_flag	vp_sdk/pool_ip.c	/^void ippool_rset_flag(SAI desaddr)$/;"	f
ippool_search_by_desaddr	vp_sdk/pool_ip.c	/^ip_pool * ippool_search_by_desaddr(SAI desaddr)$/;"	f
ippool_search_dip_pairs	vp_sdk/pool_ip.c	/^ip_pool * ippool_search_dip_pairs(u32 dip)$/;"	f
ippool_search_idle_addr	vp_sdk/pool_ip.c	/^ip_pool * ippool_search_idle_addr(SAI desaddr)$/;"	f
ippool_search_lip_pairs	vp_sdk/pool_ip.c	/^ip_pool * ippool_search_lip_pairs(u32 lip)$/;"	f
ipproto	vp_sdk/vp_uthttp.h	/^    u16  ipproto;$/;"	m	struct:vp_ferry_tcp_req
ipproto	vp_sdk/vp_uthttp.h	/^    u16 ipproto;$/;"	m	struct:vp_ferry_req
is_busy	vp_mod/mod_mysql.c	/^	bool	is_busy;$/;"	m	struct:__anon4	file:
is_extend	vp_mod/check_protocol_format.h	/^	unsigned char is_extend:1;$/;"	m	struct:_rtpheader
is_in_config	vp_sys/sys_manager.c	/^int is_in_config(char *buf, char* ip, char* mask, char* ethVar, int buf_len)$/;"	f
is_in_range	vp_mod/filter_rules.c	/^is_in_range(int min, int max, int beg, int end, int pos, bool inc_frontier)$/;"	f	file:
is_ip_in_fstip	vp_mod/mod_monitor_flow.c	/^int is_ip_in_fstip(u32 src_ip)$/;"	f
is_loaded	vp_mod/filter_rules.h	/^	bool is_loaded;$/;"	m	struct:__flt__
is_loaded	vp_sdk/config.h	/^    int  is_loaded;$/;"	m	struct:general_config_t
is_padding	vp_mod/check_protocol_format.h	/^	unsigned char is_padding:1;$/;"	m	struct:_rtpheader
is_regular	vp_mod/filter_rules.h	/^	bool is_regular;$/;"	m	struct:__fr_string
is_same_net	vp_sys/sys_manager.c	/^int is_same_net(char *cmpip1, char *cmpmask1, char *cmpip2, char *cmpmask2)$/;"	f
is_time_in_rule	vp_mod/filter_rules.c	/^is_time_in_rule(time_t t, int t_beg, int t_end, int mode)$/;"	f	file:
is_tms	vp_ferry/pm_proxy.c	/^bool is_tms()$/;"	f
item_name	tmp.c	/^    char *item_name;$/;"	m	struct:__conf_item	file:
item_name	vp_sdk/config.h	/^    char *item_name;$/;"	m	struct:__conf_item
item_next	tmp.c	/^    struct __conf_item *item_next;$/;"	m	struct:__conf_item	typeref:struct:__conf_item::__conf_item	file:
item_next	vp_sdk/config.h	/^    struct __conf_item *item_next;$/;"	m	struct:__conf_item	typeref:struct:__conf_item::__conf_item
item_value	tmp.c	/^    char *item_value;$/;"	m	struct:__conf_item	file:
item_value	vp_sdk/config.h	/^    char *item_value;$/;"	m	struct:__conf_item
jincheng_h3c_record_rtsp_request	vp_ferry/ferry_h3c_v8500.c	/^int jincheng_h3c_record_rtsp_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
jincheng_h3c_reply_ack	vp_ferry/ferry_h3c_v8500.c	/^int jincheng_h3c_reply_ack(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
jincheng_h3c_rtsp_replace_outeraddr	vp_ferry/ferry_h3c_v8500.c	/^jincheng_h3c_rtsp_replace_outeraddr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
jincheng_h3c_rtsp_request	vp_ferry/ferry_h3c_v8500.c	/^jincheng_h3c_rtsp_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
jonet_close	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_close(pvp_uthttp put, int sockfd)$/;"	f
jonet_init	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_init(const char *parg)$/;"	f
jonet_quit	vp_ferry/ferry_shanxi_jonet.c	/^void jonet_quit()$/;"	f
jonet_recv	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_recv(pvp_uthttp put, char *ut_buf, int *pack_len, int direction)$/;"	f
jonet_replace_contact	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_replace_contact(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
jonet_reply	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
jonet_request	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
jonet_socket	vp_ferry/ferry_shanxi_jonet.c	/^int jonet_socket(pvp_uthttp put, int sockfd)$/;"	f
key	vp_sdk/map.h	/^  char key[64];$/;"	m	struct:node
kill_process	vp_sdk/common.c	/^void kill_process()$/;"	f
l_int	vp_sdk/config.h	/^typedef long int      l_int;$/;"	t
label_item	tmp.c	/^    conf_item *label_item;$/;"	m	struct:__query_conf	file:
label_item	vp_sdk/config.h	/^    conf_item *label_item;$/;"	m	struct:__query_conf
label_name	tmp.c	/^    char *label_name;$/;"	m	struct:__query_conf	file:
label_name	vp_sdk/config.h	/^    char *label_name;$/;"	m	struct:__query_conf
label_next	tmp.c	/^    struct __query_conf *label_next;$/;"	m	struct:__query_conf	typeref:struct:__query_conf::__query_conf	file:
label_next	vp_sdk/config.h	/^    struct __query_conf *label_next;$/;"	m	struct:__query_conf	typeref:struct:__query_conf::__query_conf
len	vp_mod/filter_rules.h	/^	u16 len;$/;"	m	struct:__bin_cmd
len	vp_sdk/global_list.h	/^	int len;$/;"	m	struct:__global_list_data
len	vp_sdk/memreplace.h	/^    int  len;$/;"	m	struct:__find_pos
len	vp_sdk/thread_private_data.h	/^	int len;$/;"	m	struct:__thread_data
len_chunked	vp_mod/mod_chunked.h	/^    u32  len_chunked;$/;"	m	struct:_modchunked_t
len_ctrlcmd	vp_mod/filter_rules.h	/^	int len_ctrlcmd;$/;"	m	struct:__flt_item
len_current_block	vp_mod/mod_chunked.h	/^    u32  len_current_block;$/;"	m	struct:_modchunked_t
len_current_block_left	vp_mod/mod_chunked.h	/^    u32  len_current_block_left;$/;"	m	struct:_modchunked_t
len_http_head	vp_mod/mod_chunked.h	/^    u32  len_http_head;$/;"	m	struct:_modchunked_t
len_str	vp_mod/filter_rules.h	/^    int len_str;$/;"	m	struct:__flt_item
lh	vp_sdk/vp_distribute.h	/^typedef struct list_head lh;$/;"	t	typeref:struct:list_head
li_arg	vp_sdk/license.h	/^struct li_arg$/;"	s
li_free	vp_sdk/license.h	117;"	d
li_path	vp_sdk/license.h	/^	char	li_path[512];$/;"	m	struct:li_run_status
li_path	vp_sdk/license.h	/^	char li_path[256];$/;"	m	struct:li_arg
li_run_status	vp_sdk/license.h	/^struct li_run_status $/;"	s
li_sign	vp_sdk/license.h	/^    char        li_sign[SZ_SIGN];   \/\/ sign of license file$/;"	m	struct:__license_information
lia	vp_sdk/license.h	/^	liappend    *lia;$/;"	m	struct:__license_information
lia	vp_sdk/license.h	/^    liappend    *lia;           \/\/ current license append info.$/;"	m	struct:__process_information
liappend	vp_sdk/license.h	/^}liappend;$/;"	t	typeref:struct:__license_append
license_information	vp_sdk/license.h	/^}license_information;$/;"	t	typeref:struct:__license_information
lih	vp_sdk/license.h	/^	lihead      lih;$/;"	m	struct:__license_information
lih	vp_sdk/license.h	/^    lihead          lih;$/;"	m	struct:__license_history
lih	vp_sdk/license.h	/^    lihead      lih;            \/\/ current license head info.$/;"	m	struct:__process_information
lihead	vp_sdk/license.h	/^}lihead;$/;"	t	typeref:struct:__license_head
lihis	vp_sdk/license.h	/^    lihistory   *lihis;         \/\/ license history, including current license.$/;"	m	struct:__process_information
lihistory	vp_sdk/license.h	/^}lihistory;$/;"	t	typeref:struct:__license_history
line_from_buf	tmp.c	/^char* line_from_buf(char *cursor, char *store, int storesz)$/;"	f
line_from_buf	vp_sdk/config.c	/^line_from_buf(char *cursor, char *store, int storesz)$/;"	f
line_from_buf2	vp_sdk/pool_ip.c	/^line_from_buf2(char *cursor, char *store, int storesz)$/;"	f
lip	vp_ferry/pm_proxy.h	/^    u32 lip;$/;"	m	struct:pm_proxy
lip	vp_sdk/pool_ip.h	/^    u32    lip;           \/\/ local listen ip from ip pool$/;"	m	struct:IP_POOL
lip	vp_sdk/visit_list.h	/^    u32    lip;    \/\/ local video ip$/;"	m	struct:__cli_visit_list
lip	vp_sdk/vp_distribute.h	/^    u32  lip;                    \/\/ local server proxy ip$/;"	m	struct:video_way
lip	vp_sdk/vp_local_tcpclient.h	/^    u32  lip;               \/\/ local ip$/;"	m	struct:VP_LOCAL_CLIENT_ARGS
lip	vp_sdk/vp_uthttp.h	/^    u32  lip;               \/\/ local listen ip$/;"	m	struct:VP_UTHTTP
lip	vp_sdk/vp_uthttp.h	/^    u32 lip;    \/\/ local ip (ums ip)$/;"	m	struct:vp_ferry_req
list	vp_sdk/pool_ip.h	/^    struct list_head list;$/;"	m	struct:IP_POOL	typeref:struct:IP_POOL::list_head
list	vp_sdk/visit_list.h	/^    struct list_head list;$/;"	m	struct:__cli_visit_list	typeref:struct:__cli_visit_list::list_head
list	vp_sdk/vp_distribute.h	/^    lh      list;$/;"	m	struct:video_visit_server
list	vp_sdk/vp_distribute.h	/^    lh  list;$/;"	m	struct:video_visit_node
list	vp_sdk/vp_udpproxy.c	/^    struct list_head list;$/;"	m	struct:UDP_PROXY_LIST	typeref:struct:UDP_PROXY_LIST::list_head	file:
list_add_n	vp_sdk/toplist.h	/^static INLINE void list_add_n(struct list_head *new_n, struct list_head *head)$/;"	f
list_add_node	vp_sdk/vp_udpproxy.c	/^static udpproxylist *list_add_node(pvp_uthtrans puh, udpproxylist **udplist, SAI *cliaddr, $/;"	f	file:
list_add_tail	vp_sdk/toplist.h	/^static INLINE void list_add_tail(struct list_head *new_n, struct list_head *head)$/;"	f
list_del	vp_sdk/toplist.h	/^static INLINE void list_del(struct list_head *entry)$/;"	f
list_del_all_node	vp_sdk/vp_udpproxy.c	/^static void list_del_all_node(pvp_uthtrans ptrans, udpproxylist *udplist, int epfd, int *curfds)$/;"	f	file:
list_del_cliaddr_node	vp_sdk/vp_udpproxy.c	/^static void list_del_cliaddr_node(pvp_uthtrans ptrans, udpproxylist *udplist, SAI cliaddr, int epfd, int *curfds)$/;"	f	file:
list_del_init	vp_sdk/toplist.h	/^static INLINE void list_del_init(struct list_head *entry)$/;"	f
list_del_svrsock_node	vp_sdk/vp_udpproxy.c	/^static void list_del_svrsock_node(pvp_uthtrans ptrans, udpproxylist *udplist, int sockfd, int epfd, int *curfds)$/;"	f	file:
list_del_tout_node	vp_sdk/vp_udpproxy.c	/^static void list_del_tout_node(pvp_uthtrans ptrans, udpproxylist *udplist, int session_tout, int epfd, int *curfds)$/;"	f	file:
list_empty	vp_sdk/toplist.h	/^static INLINE int list_empty(struct list_head *head)$/;"	f
list_entry	vp_sdk/toplist.h	196;"	d
list_for_each	vp_sdk/toplist.h	204;"	d
list_for_each_entry	vp_sdk/toplist.h	232;"	d
list_for_each_entry_safe	vp_sdk/toplist.h	244;"	d
list_for_each_prev	vp_sdk/toplist.h	212;"	d
list_for_each_safe	vp_sdk/toplist.h	222;"	d
list_free_node	vp_sdk/vp_udpproxy.c	/^static void list_free_node(pvp_uthtrans ptrans, udpproxylist *pn, struct list_head *pos, int epfd, int *curfds)$/;"	f	file:
list_head	vp_sdk/toplist.h	/^struct list_head {$/;"	s
list_move	vp_sdk/toplist.h	/^static INLINE void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	vp_sdk/toplist.h	/^static INLINE void list_move_tail(struct list_head *list,$/;"	f
list_search_cliaddr_node	vp_sdk/vp_udpproxy.c	/^static udpproxylist *list_search_cliaddr_node(udpproxylist *udplist, SAI *cliaddr)$/;"	f	file:
list_search_svrsock_node	vp_sdk/vp_udpproxy.c	/^static udpproxylist *list_search_svrsock_node(udpproxylist *udplist, int sockfd)$/;"	f	file:
list_set_node	vp_sdk/vp_udpproxy.c	/^static void list_set_node(udpproxylist *pn)$/;"	f	file:
list_splice	vp_sdk/toplist.h	/^static INLINE void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	vp_sdk/toplist.h	/^static INLINE void list_splice_init(struct list_head *list,$/;"	f
load_configuration	tmp.c	/^query_conf * load_configuration(const char *filepath)$/;"	f
load_configuration	vp_sdk/config.c	/^query_conf * load_configuration(const char *filepath)$/;"	f
load_ferry_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^int load_ferry_tcp_proxy(pvp_uthtrans pt, int t_state)$/;"	f
load_ferry_udp_proxy	vp_sdk/vp_udpproxy.c	/^int load_ferry_udp_proxy(pvp_uthtrans pu, int t_state)$/;"	f
load_filter_rules	vp_mod/filter_rules.c	/^load_filter_rules(FILTER *flt, const char *svrid)$/;"	f
load_fr_accctl	vp_mod/filter_rules.c	/^load_fr_accctl(FILTER* flt)$/;"	f	file:
load_fr_ctrlcmd	vp_mod/filter_rules.c	/^load_fr_ctrlcmd(FILTER *flt)$/;"	f	file:
load_fr_dip	vp_mod/filter_rules.c	/^load_fr_dip(FILTER* flt)$/;"	f	file:
load_fr_sip	vp_mod/filter_rules.c	/^load_fr_sip(FILTER* flt)$/;"	f	file:
load_fr_string	vp_mod/filter_rules.c	/^load_fr_string(FILTER* flt)$/;"	f	file:
load_fr_time	vp_mod/filter_rules.c	/^load_fr_time(FILTER *flt)$/;"	f	file:
load_ip_pool	vp_sdk/pool_ip.c	/^int load_ip_pool()$/;"	f
load_ip_pool2	vp_sdk/pool_ip.c	/^int load_ip_pool2(const char *name)$/;"	f
load_local_tcpclient	vp_sdk/vp_local_tcpclient.c	/^int load_local_tcpclient(vp_local_client *pclient, int t_state)$/;"	f
load_local_tcpserver	vp_sdk/vp_local_tcpserver.c	/^int load_local_tcpserver(pvp_uthtrans pt, int t_state)$/;"	f
load_portmap	vp_sdk/portmap.c	/^int load_portmap(vp_uthtrans *__ut)$/;"	f
load_portmap_cfg	vp_sdk/portmap.c	/^int load_portmap_cfg(vp_uthtrans *__ut, const char *cfgPath)$/;"	f
load_portpool	vp_sdk/pool_port.c	/^int load_portpool()$/;"	f
load_proto_type_filter	vp_mod/filter_rules.c	/^load_proto_type_filter(FILTER *flt)$/;"	f
load_proxy_config	vp_sdk/common.c	/^int load_proxy_config(const char *config_name, int pmid, int proxy_sign, char value[C_TOTAL][32])$/;"	f
load_proxy_simple	vp_sdk/vp_uthttp.c	/^int  load_proxy_simple(bool is_tcp, int t_state, int pmid, int tout, u32 peer_ip,$/;"	f
load_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^int load_tcp_proxy(pvp_uthtrans pt, int t_state)$/;"	f
load_tcp_proxy_simple_n	vp_sdk/vp_uthttp.c	/^int  load_tcp_proxy_simple_n(int t_state, int pmid, int tout, u32 peer_ip,$/;"	f
load_tcp_proxy_simple_s	vp_sdk/vp_uthttp.c	/^int  load_tcp_proxy_simple_s(int t_state, int pmid, const char *tout, const char *peer_ip,$/;"	f
load_transport_format_filter	vp_mod/check_protocol_format.c	/^load_transport_format_filter()$/;"	f
load_udp_proxy	vp_sdk/vp_udpproxy.c	/^int load_udp_proxy(pvp_uthtrans pu, int t_state)$/;"	f
load_udp_proxy_simple_n	vp_sdk/vp_uthttp.c	/^int  load_udp_proxy_simple_n(int t_state, int pmid, int tout, u32 peer_ip,$/;"	f
load_udp_proxy_simple_s	vp_sdk/vp_uthttp.c	/^int  load_udp_proxy_simple_s(int t_state, int pmid, const char *tout, const char *peer_ip,$/;"	f
load_user_cert	vp_sdk/common.c	/^bool load_user_cert()$/;"	f
local_priv_addr	vp_sdk/config.h	/^    u32  local_priv_addr;$/;"	m	struct:general_config_t
lock	vp_sdk/map.h	/^  pthread_mutex_t lock;$/;"	m	struct:__anon2
logdbg_fmt	vp_sdk/common.h	29;"	d
logdbg_out	vp_sdk/common.h	25;"	d
logerr_fmt	vp_sdk/common.h	28;"	d
logerr_out	vp_sdk/common.h	24;"	d
login_user	vp_sdk/vp_uthttp.h	/^	char login_user[64];$/;"	m	struct:VP_UTHTTP
loginf_fmt	vp_sdk/common.h	26;"	d
loginf_out	vp_sdk/common.h	22;"	d
logwar_fmt	vp_sdk/common.h	27;"	d
logwar_out	vp_sdk/common.h	23;"	d
loop_cur	vp_sdk/memreplace.h	/^    find_pos *loop_cur;	\/\/ for loop getting position use.$/;"	m	struct:__find_mem
loop_find	vp_sdk/memreplace.c	/^char *loop_find(find_mem *fmem)$/;"	f
loop_find_back	vp_sdk/memreplace.c	/^char *loop_find_back(find_mem *fmem)$/;"	f
loop_line_from_buf	vp_sdk/common.c	/^loop_line_from_buf(char *cursor, char *store, int storesz)$/;"	f
lport	vp_ferry/pm_proxy.h	/^    u16 lport;$/;"	m	struct:pm_proxy
lport	vp_sdk/pool_port.h	/^    u16  lport[IP_COUNT];   \/\/ local mapping port$/;"	m	struct:play_record
lport	vp_sdk/vp_distribute.h	/^    u16  lport;                  \/\/ local server proxy port$/;"	m	struct:video_way
lport	vp_sdk/vp_local_tcpclient.h	/^    u16  lport;             \/\/ local port$/;"	m	struct:VP_LOCAL_CLIENT_ARGS
lport	vp_sdk/vp_uthttp.h	/^    u16  lport;             \/\/ local listen port$/;"	m	struct:VP_UTHTTP
lport	vp_sdk/vp_uthttp.h	/^    u16 lport;$/;"	m	struct:vp_ferry_req
lser_set	vp_sdk/vp_distribute.c	/^void lser_set(v_ser *pser, u32 lip, u16 lport)$/;"	f
lvport	vp_sdk/visit_list.h	/^    u16    lvport; \/\/ local video port $/;"	m	struct:__cli_visit_list
m_conf_info	vp_sdk/config.h	/^enum m_conf_info$/;"	g
m_conf_key	vp_sdk/config.c	/^char m_conf_key[][SZ_CFGVAL] = {$/;"	v
m_conf_value	vp_sdk/config.h	/^enum m_conf_value {$/;"	g
machine_id	vp_sdk/license.h	/^	char	    machine_id[SZ_MACHINE_ID];    \/\/ machind id register to.$/;"	m	struct:__license_information
main	promon/vp_promon.c	/^int main(int argc, char **argv)$/;"	f
main	t.c	/^int main(int argc, char *argv[])$/;"	f
main	tmp.c	/^int main()$/;"	f
main	vp_ferry/vp_ferry.c	/^int main(int argc, char * argv[])$/;"	f
main	vp_portmap.c	/^int main(int argc, char *argv[])$/;"	f
main	vp_sys/sys_license.c	/^main(int argc, char **argv)$/;"	f
main	vp_sys/sys_manager.c	/^int main(int argc, char * argv[])$/;"	f
main	vp_sys/vp_flowsvr.c	/^int main(int argc, char *argv[])$/;"	f
main	vp_vstcp.c	/^int main(int argc, char *argv[])$/;"	f
main	vp_vsudp.c	/^int main(int argc, char * argv[])$/;"	f
main	vp_vsudp_m.c	/^int main(int argc, char * argv[])$/;"	f
make_floatip_down	vp_sys/sys_manager.c	/^int make_floatip_down(FILE *fp, char *ethVar, char *ip, char *mask, int fsz, char *buf, char *fname)$/;"	f
make_floatip_up	vp_sys/sys_manager.c	/^int make_floatip_up(FILE *fp, char *ethVar, char *ip, char *mask, int fsz, char *buf, char *fname)$/;"	f
make_subdir	Makefile	/^define make_subdir$/;"	m
manu	vp_ferry/pm_proxy.h	/^    char  *manu;$/;"	m	struct:pm_proxy
map_add	vp_sdk/map.c	/^int map_add(map_t *pmap, char *key, void *val)$/;"	f
map_clear	vp_sdk/map.c	/^int map_clear(map_t *pmap)$/;"	f
map_del	vp_sdk/map.c	/^int map_del(map_t *pmap, char *key)$/;"	f
map_destroy	vp_sdk/map.c	/^int map_destroy(map_t *pmap)$/;"	f
map_init	vp_sdk/map.c	/^void map_init(map_t *pmap)$/;"	f
map_search	vp_sdk/map.c	/^void * map_search(map_t *pmap, char *key)$/;"	f
map_show	vp_sdk/map.c	/^int map_show(map_t *pmap)$/;"	f
map_t	vp_sdk/map.h	/^}map_t;$/;"	t	typeref:struct:__anon2
mark	vp_mod/check_protocol_format.h	/^	unsigned char mark:1;$/;"	m	struct:_rtpheader
match_char	vp_sdk/common.c	/^match_char(char ch1, char ch2, bool sensitive)$/;"	f	file:
match_rtph	vp_mod/check_protocol_format.c	/^match_rtph(rtpheader *sample, rtpheader *data)$/;"	f
max_err_times	vp_sys/sys_manager.c	/^const static int  max_err_times = 5;$/;"	v	file:
maxrate	vp_mod/mod_monitor_flow.c	/^static int maxrate = 0;$/;"	v	file:
md5	vp_sdk/license.h	/^    unsigned char   md5[16];$/;"	m	struct:__license_history
mem_flg	vp_mod/mod_monitor_flow.c	/^static int mem_flg = 0;$/;"	v	file:
mem_replace	vp_ferry/ferry_h3c_fs.c	/^static int mem_replace(char **ppbuf, char *sbuf, char *dbuf, int times, u32 *pack_len)$/;"	f	file:
mem_replace	vp_ferry/ferry_h3c_harbin.c	/^static int mem_replace(char **ppbuf, char *sbuf, char *dbuf, int times, u32 *pack_len)$/;"	f	file:
member_signal_handler	vp_sdk/process_family.c	/^static void member_signal_handler(int signum, siginfo_t *info, void *myact)$/;"	f	file:
memreplace_pos	vp_sdk/common.c	/^int memreplace_pos(char *pos_b, char *pos_e, char **content, u32 *len, int times, char *src, int nsrc, char *dst, int ndst)$/;"	f
mod_cache_fifo_destroy	vp_mod/mod_cache_fifo.c	/^void mod_cache_fifo_destroy(cache_handle *h)$/;"	f
mod_cache_fifo_get_data_left_size	vp_mod/mod_cache_fifo.c	/^static int mod_cache_fifo_get_data_left_size(cache_handle *h)$/;"	f	file:
mod_cache_fifo_get_data_size	vp_mod/mod_cache_fifo.c	/^static int mod_cache_fifo_get_data_size(cache_handle *h)$/;"	f	file:
mod_cache_fifo_init	vp_mod/mod_cache_fifo.c	/^int mod_cache_fifo_init(cache_handle *h, int size_cache, int size_buf, tfunc_reducer reducer, int svr_sock)$/;"	f
mod_cache_fifo_produce	vp_mod/mod_cache_fifo.c	/^int mod_cache_fifo_produce(cache_handle *h, char *data, int sz_data)$/;"	f
mod_cache_fifo_read_buffer	vp_mod/mod_cache_fifo.c	/^static int mod_cache_fifo_read_buffer(cache_handle *h, char *data, int sz_data)$/;"	f	file:
mod_cache_fifo_reduce_run	vp_mod/mod_cache_fifo.c	/^int mod_cache_fifo_reduce_run(cache_handle *h)$/;"	f
mod_cache_fifo_write_buffer	vp_mod/mod_cache_fifo.c	/^static int mod_cache_fifo_write_buffer(cache_handle *h, char *data, int sz_data)$/;"	f	file:
mod_floatip	vp_sys/sys_manager.c	/^int mod_floatip(int sock, char recv_msg[])$/;"	f
mod_vf_filter_check	vp_mod/mod_videoformat_filter.c	/^bool mod_vf_filter_check(e_vf videoformat)$/;"	f
mod_vf_filter_gettype	vp_mod/mod_videoformat_filter.c	/^e_vf mod_vf_filter_gettype(char *pkg, int len_pkg)$/;"	f
mod_vf_filter_init	vp_mod/mod_videoformat_filter.c	/^bool mod_vf_filter_init()$/;"	f
modchunked_cache	vp_mod/mod_chunked.c	/^bool modchunked_cache(modchunked_t *chkd)$/;"	f
modchunked_cache_chunked	vp_mod/mod_chunked.c	/^bool modchunked_cache_chunked(modchunked_t *chkd)$/;"	f
modchunked_end	vp_mod/mod_chunked.c	/^bool modchunked_end(modchunked_t *chkd)$/;"	f
modchunked_init	vp_mod/mod_chunked.c	/^bool modchunked_init(modchunked_t *chkd, int sock_recv, int sock_send, char *pdata, u32 len_data)$/;"	f
modchunked_peel	vp_mod/mod_chunked.c	/^char *modchunked_peel(char *pchunked, u32 len_chunked, u32 *len_data, u32 *len_block_left)$/;"	f
modchunked_send_chunked_blockend	vp_mod/mod_chunked.c	/^bool modchunked_send_chunked_blockend(modchunked_t *chkd)$/;"	f
modchunked_send_chunkedlength	vp_mod/mod_chunked.c	/^bool modchunked_send_chunkedlength(modchunked_t *chkd, int len)$/;"	f
modchunked_skip_split	vp_mod/mod_chunked.c	/^static char *modchunked_skip_split(char *ptr)$/;"	f	file:
modchunked_split_send	vp_mod/mod_chunked.c	/^bool modchunked_split_send(modchunked_t *chkd, int len_split)$/;"	f
modchunked_t	vp_mod/mod_chunked.h	/^}modchunked_t;$/;"	t	typeref:struct:_modchunked_t
modchunked_test	vp_mod/mod_chunked.c	/^bool modchunked_test(char *data, u32 len)$/;"	f
modmysql_close	vp_mod/mod_mysql.c	/^modmysql_close()$/;"	f
modmysql_close_all_conn	vp_mod/mod_mysql.c	/^modmysql_close_all_conn()$/;"	f	file:
modmysql_get_freeconn	vp_mod/mod_mysql.c	/^modmysql_get_freeconn()$/;"	f
modmysql_get_new_conn	vp_mod/mod_mysql.c	/^modmysql_get_new_conn(const char *dbname)$/;"	f	file:
modmysql_isopen	vp_mod/mod_mysql.c	/^modmysql_isopen()$/;"	f
modmysql_keep_conn	vp_mod/mod_mysql.c	/^modmysql_keep_conn(void *arg)$/;"	f	file:
modmysql_open	vp_mod/mod_mysql.c	/^modmysql_open(const char *dbname, int nConn)$/;"	f
modmysql_return_conn	vp_mod/mod_mysql.c	/^modmysql_return_conn(MYSQL *mysql)$/;"	f
mon_sys_proc	vp_sys/sys_manager.c	/^int mon_sys_proc(int sock, char recv_msg[])$/;"	f
mtp_call_back	vp_ferry/common_keda.h	/^typedef int(*mtp_call_back)(pvp_uthttp put, char **ut_buf, u32 *pack_len);$/;"	t
my_conn	vp_mod/mod_mysql.c	/^}my_conn;$/;"	t	typeref:struct:__anon4	file:
mysql	vp_mod/mod_mysql.c	/^	MYSQL	*mysql;$/;"	m	struct:__anon4	file:
mysql_conn	vp_sys/vp_flowsvr.c	/^    MYSQL *mysql_conn;$/;"	m	struct:flow_operate	file:
n	vp_sdk/vp_thread_setting.h	/^	int64_t	n;		\/\/ integer argument$/;"	m	struct:__tset_arg
name	vp_mod/filter_rules.h	/^	char name[128];$/;"	m	struct:__fr_ctrlcmd
name	vp_sdk/global_list.h	/^	char name[128];$/;"	m	struct:__global_list_data
name	vp_sdk/license.h	/^	char        name[32];   \/\/ name of data$/;"	m	struct:__license_append
name	vp_sdk/thread_private_data.h	/^	char name[128];$/;"	m	struct:__thread_data
next	vp_mod/filter_rules.h	/^	struct __bin_cmd *next;$/;"	m	struct:__bin_cmd	typeref:struct:__bin_cmd::__bin_cmd
next	vp_mod/filter_rules.h	/^	struct __flt_rules	*next;$/;"	m	struct:__flt_rules	typeref:struct:__flt_rules::__flt_rules
next	vp_mod/filter_rules.h	/^	struct __fr_accctl *next;$/;"	m	struct:__fr_accctl	typeref:struct:__fr_accctl::__fr_accctl
next	vp_mod/filter_rules.h	/^	struct __fr_ctrlcmd *next;$/;"	m	struct:__fr_ctrlcmd	typeref:struct:__fr_ctrlcmd::__fr_ctrlcmd
next	vp_mod/filter_rules.h	/^	struct __fr_ip *next;$/;"	m	struct:__fr_ip	typeref:struct:__fr_ip::__fr_ip
next	vp_mod/filter_rules.h	/^	struct __fr_string *next;$/;"	m	struct:__fr_string	typeref:struct:__fr_string::__fr_string
next	vp_mod/filter_rules.h	/^	struct __fr_time *next;$/;"	m	struct:__fr_time	typeref:struct:__fr_time::__fr_time
next	vp_sdk/global_list.h	/^	struct __global_list_data *next;$/;"	m	struct:__global_list_data	typeref:struct:__global_list_data::__global_list_data
next	vp_sdk/license.h	/^	struct __license_append *next;$/;"	m	struct:__license_append	typeref:struct:__license_append::__license_append
next	vp_sdk/license.h	/^    struct __license_history *next;$/;"	m	struct:__license_history	typeref:struct:__license_history::__license_history
next	vp_sdk/map.h	/^  struct node *next;$/;"	m	struct:node	typeref:struct:node::node
next	vp_sdk/memreplace.h	/^    struct __find_pos *next;$/;"	m	struct:__find_pos	typeref:struct:__find_pos::__find_pos
next	vp_sdk/process_family.c	/^	struct __pf_process_id *next;$/;"	m	struct:__pf_process_id	typeref:struct:__pf_process_id::__pf_process_id	file:
next	vp_sdk/thread_private_data.c	/^	struct __thread_private_data *next;$/;"	m	struct:__thread_private_data	typeref:struct:__thread_private_data::__thread_private_data	file:
next	vp_sdk/thread_private_data.h	/^	struct __thread_data *next;$/;"	m	struct:__thread_data	typeref:struct:__thread_data::__thread_data
next	vp_sdk/toplist.h	/^    struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	vp_sdk/vp_thread_setting.h	/^	struct __tset_arg *next;$/;"	m	struct:__tset_arg	typeref:struct:__tset_arg::__tset_arg
nfind	vp_sdk/memreplace.h	/^    int nfind; \/\/ how many position have been find.$/;"	m	struct:__find_mem
noblock_accept	vp_sdk/common.c	/^int noblock_accept(int fd, SA * paddr, int addrlen, const int time_out)$/;"	f
node	vp_sdk/map.h	/^typedef struct node{$/;"	s
node_t	vp_sdk/map.h	/^}node_t;$/;"	t	typeref:struct:node
num_append_inf	vp_sdk/license.h	/^	LI_UINT32   num_append_inf; \/\/ how many append items are there.$/;"	m	struct:__license_head
num_csrc	vp_mod/check_protocol_format.h	/^	unsigned char num_csrc:4;$/;"	m	struct:_rtpheader
num_history	vp_sdk/license.h	/^    LI_UINT32   num_history;    \/\/ how many license history item are there.$/;"	m	struct:__process_information
online_tb	vp_mod/user_online.c	/^const static char online_tb[] = "vgap_onlineuser";$/;"	v	file:
only_1bit_is_1	vp_sdk/vp_thread_setting.c	/^static bool only_1bit_is_1(uint64_t n)$/;"	f	file:
oss_free	vp_sdk/common.h	71;"	d
oss_malloc	vp_sdk/common.h	72;"	d
outer_addr	vp_sdk/config.h	/^    u32  outer_addr;        \/\/ outnet public ip$/;"	m	struct:general_config_t
outer_priv_addr	vp_sdk/config.h	/^    u32  outer_priv_addr;$/;"	m	struct:general_config_t
parse_bcmd	vp_mod/filter_rules.c	/^parse_bcmd(bin_cmd **bcmd, bool is_bin, char *buf, int buf_len)$/;"	f	file:
parse_key	vp_sdk/common.c	/^int parse_key(char **ut_buf, char *key, char *seg)$/;"	f
parse_line	vp_sdk/portmap.c	/^static int parse_line(char *line, vp_uthtrans *__ut)$/;"	f	file:
parse_longarg	vp_ferry/vp_ferry.c	/^bool parse_longarg(const char *name, const char *pArg)$/;"	f
parse_longarg	vp_vsudp_m.c	/^bool parse_longarg(const char *name, const char *pArg)$/;"	f
parse_net_link_item	vp_sys/sys_manager.c	/^int parse_net_link_item(char *buf, char *pres)$/;"	f
parse_reqst_cmd	vp_sdk/vp_pack.c	/^int parse_reqst_cmd(int sockfd,$/;"	f
parse_sdp	vp_ferry/ferry_nanyang_h3c_hik.c	/^static int parse_sdp(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f	file:
parse_sip	vp_ferry/ferry_nanyang_h3c_hik.c	/^static int parse_sip(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f	file:
parse_str	vp_sdk/portmap.c	/^static char * parse_str(char *s, char *s1, char *s2, char seg)$/;"	f	file:
peer	vp_vstcp.c	/^static   SAI      peer;$/;"	v	file:
peer_priv_addr	vp_sdk/config.h	/^    u32  peer_priv_addr;$/;"	m	struct:general_config_t
peerip	vp_sdk/vp_uthttp.h	/^    u32  peerip;            \/\/ tms or ums ip$/;"	m	struct:VP_UTHTTP
pf_add_member	vp_sdk/process_family.c	/^bool pf_add_member(pid_t member_pid)$/;"	f
pf_add_pro_id	vp_sdk/process_family.c	/^pf_add_pro_id(pf_pro_id **ppro_id, pid_t pid)$/;"	f	file:
pf_away_home	vp_sdk/process_family.c	/^pf_away_home()$/;"	f
pf_daemon	vp_sdk/process_family.c	/^pf_daemon()$/;"	f
pf_del_member	vp_sdk/process_family.c	/^static bool pf_del_member(pid_t member_pid)$/;"	f	file:
pf_del_pro_id	vp_sdk/process_family.c	/^pf_del_pro_id(pf_pro_id **ppro_id, pid_t pid)$/;"	f	file:
pf_destroy_home	vp_sdk/process_family.c	/^void pf_destroy_home()$/;"	f
pf_dismiss_member	vp_sdk/process_family.c	/^void pf_dismiss_member(pid_t member_pid)$/;"	f
pf_home	vp_sdk/process_family.c	/^}pf_home;$/;"	t	typeref:struct:__pf_home	file:
pf_init_home	vp_sdk/process_family.c	/^pf_init_home()$/;"	f
pf_init_member	vp_sdk/process_family.c	/^pf_init_member(void (*before_exit)(int), int exit_code)$/;"	f
pf_member	vp_sdk/process_family.c	/^}pf_member;$/;"	t	typeref:struct:__pf_member	file:
pf_mutex	vp_sdk/process_family.c	/^pthread_mutex_t pf_mutex;$/;"	v
pf_pro_id	vp_sdk/process_family.c	/^}pf_pro_id;$/;"	t	typeref:struct:__pf_process_id	file:
pflow	vp_sys/vp_flowsvr.c	/^}floperate, *pflow;$/;"	t	typeref:struct:flow_operate	file:
pfr_accctl	vp_mod/filter_rules.h	/^	fr_accctl	*pfr_accctl;$/;"	m	struct:__flt_rules
pfr_ctrlcmd	vp_mod/filter_rules.h	/^	fr_ctrlcmd	*pfr_ctrlcmd;$/;"	m	struct:__flt_rules
pfr_dip	vp_mod/filter_rules.h	/^	fr_ip		*pfr_dip;$/;"	m	struct:__flt_rules
pfr_sip	vp_mod/filter_rules.h	/^	fr_ip		*pfr_sip;$/;"	m	struct:__flt_rules
pfr_string	vp_mod/filter_rules.h	/^	fr_string	*pfr_string;$/;"	m	struct:__flt_rules
pfr_time	vp_mod/filter_rules.h	/^	fr_time		*pfr_time;$/;"	m	struct:__flt_rules
pid	vp_sdk/process_family.c	/^	pid_t pid;$/;"	m	struct:__pf_process_id	file:
platform_id	vp_sdk/defflow.h	/^    u32    platform_id;$/;"	m	struct:flow_stat
platform_id	vp_sdk/visit_list.h	/^    u32    platform_id;$/;"	m	struct:__cli_visit_list
platform_id	vp_sdk/vp_uthttp.h	/^    u32  platform_id;       \/\/ the platform id of mark different video services$/;"	m	struct:VP_UTHTTP
play_record	vp_sdk/pool_port.h	/^struct play_record {$/;"	s
playrecord	vp_sdk/pool_port.c	/^struct play_record playrecord;$/;"	v	typeref:struct:play_record
plink	vp_sdk/defflow.h	/^    struct flow_stat *plink;$/;"	m	struct:flow_stat	typeref:struct:flow_stat::flow_stat
pm_id	vp_ferry/pm_proxy.h	/^    int pm_id;$/;"	m	struct:pm_proxy
pm_init	vp_ferry/pm_proxy.c	/^bool pm_init(struct pm_proxy *pm, const char *parg)$/;"	f
pm_proxy	vp_ferry/pm_proxy.h	/^struct pm_proxy$/;"	s
pm_quit	vp_ferry/pm_proxy.c	/^void pm_quit()$/;"	f
pm_quit	vp_ferry/pm_proxy.h	/^    void (* pm_quit)();$/;"	m	struct:pm_proxy
port	vp_ferry/ferry_amplesky_28181.c	/^    u16 port;$/;"	m	struct:_sessions	file:
port	vp_ferry/ferry_hik_28181.c	/^    u16 port;$/;"	m	struct:_sessions	file:
port	vp_sdk/pool_port.h	/^    u16  port;$/;"	m	struct:POOL_PORT
port_map	vp_sdk/portmap.h	2;"	d
pos	vp_mod/filter_rules.h	/^	u16 pos;	\/\/ if -1, means any position.$/;"	m	struct:__bin_cmd
pos	vp_sdk/memreplace.h	/^    char *pos;$/;"	m	struct:__find_pos
pp	vp_sdk/portmap.c	/^} pp;$/;"	v	typeref:struct:__portmap
pp_attr	vp_sdk/pool_port.c	/^pthread_mutexattr_t pp_attr;$/;"	v
pp_list	vp_sdk/pool_port.h	/^} pp_list;$/;"	t	typeref:struct:POOL_PORT
pp_mutex	vp_sdk/pool_port.c	/^pthread_mutex_t     pp_mutex;$/;"	v
pp_seg_mutex	vp_sdk/pool_port.c	/^pthread_mutex_t     pp_seg_mutex;$/;"	v
pplist_find_port	vp_sdk/pool_port.c	/^u16  pplist_find_port(u32 dip)$/;"	f
pplist_getidle_port	vp_sdk/pool_port.c	/^u16 pplist_getidle_port()$/;"	f
pplist_getidle_port2	vp_sdk/pool_port.c	/^int pplist_getidle_port2(u16 *port1, u16 *port2)$/;"	f
pplist_getidle_port2_step	vp_sdk/pool_port.c	/^int pplist_getidle_port2_step(u16 *host_port1, u16 *host_port2, int step)$/;"	f
pplist_getidle_port_ip	vp_sdk/pool_port.c	/^u16 pplist_getidle_port_ip(u32 dip)$/;"	f
pplist_getidle_port_t	vp_sdk/pool_port.c	/^u16 pplist_getidle_port_t(int offset)$/;"	f
pplist_getidle_port_x	vp_sdk/pool_port.c	/^u16 pplist_getidle_port_x()$/;"	f
pplist_init_value	vp_sdk/pool_port.c	/^void pplist_init_value()$/;"	f
pplist_print	vp_sdk/pool_port.c	/^void pplist_print()$/;"	f
pplist_set_flag	vp_sdk/pool_port.c	/^void pplist_set_flag(pp_list *pplist, u16 port)$/;"	f
pplist_set_flag_port	vp_sdk/pool_port.c	/^void pplist_set_flag_port(u16 port)$/;"	f
pr_sign	vp_sdk/license.h	/^    char        pr_sign[SZ_SIGN];   \/\/ sign of process file.$/;"	m	struct:__process_information
pre_deal_with_line	tmp.c	/^char *pre_deal_with_line(char *line)$/;"	f
pre_deal_with_line	vp_sdk/config.c	/^char *pre_deal_with_line(char *line)$/;"	f
pre_deal_with_line_pool_ip	vp_sdk/pool_ip.c	/^char *pre_deal_with_line_pool_ip(char *line)$/;"	f
pre_vs_proxy	vp_ferry/ferry_dahua.c	/^void pre_vs_proxy(u32 lip, u32 dip, u16 vport, int tout)$/;"	f
prev	vp_sdk/memreplace.h	/^    struct __find_pos *prev;$/;"	m	struct:__find_pos	typeref:struct:__find_pos::__find_pos
prev	vp_sdk/toplist.h	/^    struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_char	vp_sdk/common.c	/^print_char(char ch)$/;"	f	file:
pro_file_name	vp_sdk/license.h	/^	char	pro_file_name[512];$/;"	m	struct:li_run_status
pro_file_path	vp_sdk/license.h	/^	char	pro_file_path[512];$/;"	m	struct:li_run_status
pro_id	vp_sdk/process_family.c	/^	pf_pro_id *pro_id;$/;"	m	struct:__pf_home	file:
pro_info	vp_sdk/license.h	/^	process_information pro_info;$/;"	m	struct:li_run_status
pro_name	vp_sdk/license.h	/^	char pro_name[32];$/;"	m	struct:li_arg
process_information	vp_sdk/license.h	/^}process_information;$/;"	t	typeref:struct:__process_information
process_keda_comp_protocol	vp_ferry/common_keda.c	/^int process_keda_comp_protocol(pvp_uthttp put, char **ut_buf, u32 *pack_len, mtp_call_back func_process_data)$/;"	f
process_keda_comp_protocol	vp_ferry/ferry_keda_v2800.c	/^int process_keda_comp_protocol(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f
process_keda_one_protocol	t.c	/^int process_keda_one_protocol(char **pOneProto, u32 *len_one_proto)$/;"	f
process_keda_protocol	t.c	/^int process_keda_protocol(char **ut_buf, u32 *pack_len)$/;"	f
process_keda_uncompress	t.c	/^int process_keda_uncompress(pvp_uthttp put, unsigned char **pUncompress, u16 *uncompress_len)$/;"	f
proto	vp_sdk/portmap.c	/^    char proto[2];$/;"	m	struct:__portmap	file:
proto_type	vp_mod/filter_rules.c	/^static enum __e_proto_type proto_type(char *proto, int len, char type[16])$/;"	f	file:
protocal_type	vp_sdk/vp_multi_protol.h	/^enum protocal_type{$/;"	g
proxy_type	vp_ferry/pm_proxy.h	/^    int proxy_type;$/;"	m	struct:pm_proxy
prs_carema_url_pkg	vp_ferry/ferry_dahua.c	/^int prs_carema_url_pkg(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
psmid	vp_vstcp.c	/^static   char     psmid[32] = {0};$/;"	v	file:
psmid	vp_vsudp.c	/^static   char     psmid[32] = {0};$/;"	v	file:
pstat	vp_sys/vp_flowsvr.c	/^    flow_stat_t *pstat[vs_tnum];$/;"	m	struct:flow_operate	file:
ptr	vp_sdk/vp_thread_setting.h	/^	void    *ptr;  \/\/ pointer argument$/;"	m	struct:__tset_arg
ptr_mysql	vp_mod/filter_rules.h	/^	MYSQL *ptr_mysql;$/;"	m	struct:__flt__
ptype	vp_mod/check_protocol_format.h	/^	unsigned char ptype:7;$/;"	m	struct:_rtpheader
pudpproxylist	vp_sdk/vp_udpproxy.c	/^} *pudpproxylist, udpproxylist;$/;"	t	typeref:struct:UDP_PROXY_LIST	file:
pvp_uthtrans	vp_sdk/vp_uthttp.h	/^}*pvp_uthtrans, vp_uthtrans;$/;"	t	typeref:struct:VP_UTHTTP_TRANS
pvp_uthttp	vp_sdk/vp_uthttp.h	/^} *pvp_uthttp, vp_uthttp;$/;"	t	typeref:struct:VP_UTHTTP
query_conf	tmp.c	/^} query_conf;$/;"	t	typeref:struct:__query_conf	file:
query_conf	vp_sdk/config.h	/^} query_conf;$/;"	t	typeref:struct:__query_conf
query_floatip	vp_sys/sys_manager.c	/^int query_floatip(int sock, char recv_msg[])$/;"	f
query_prio_ips	vp_mod/mod_monitor_flow.c	/^int query_prio_ips(u32 plat_id, char *_supp_id)$/;"	f
quit_system	vp_ferry/vp_ferry.c	/^static void quit_system(int sign)$/;"	f	file:
quit_system	vp_sys/sys_license.c	/^static void quit_system(int n)$/;"	f	file:
quit_system	vp_sys/vp_flowsvr.c	/^static void quit_system(int n)$/;"	f	file:
quit_system	vp_vstcp.c	/^void quit_system(int n)$/;"	f
quit_system	vp_vsudp.c	/^static void quit_system(int n)$/;"	f	file:
re_write_file	vp_sys/sys_manager.c	/^int re_write_file(char *buf, char *fname)$/;"	f
read_cert	vp_sdk/common.c	/^bool read_cert(char * buf, int len)$/;"	f
read_flow_data	vp_sys/vp_flowsvr.c	/^int read_flow_data()$/;"	f
read_info	vp_sys/sys_manager.c	/^int read_info(int sock)$/;"	f
read_mem_flow_conf	vp_mod/mod_monitor_flow.c	/^static int read_mem_flow_conf(char *pmem, int* flow_rate)$/;"	f	file:
read_net_config	vp_sys/sys_manager.c	/^static int read_net_config(char file_buf[], char * net_dev)$/;"	f	file:
read_next_block_len	vp_mod/mod_chunked.c	/^int read_next_block_len(int sockfd)$/;"	f
recv_keda_complete_protocol	t.c	/^int recv_keda_complete_protocol(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
recv_tail	vp_sdk/common.c	/^int recv_tail(int sockfd, int extlen, char **ut_buf, u32 *pack_len)$/;"	f
recv_until_close	vp_sdk/common.c	/^int recv_until_close(int sockfd, char **ut_buf, u32 *pack_len)$/;"	f
recv_until_end_flag	vp_sdk/common.c	/^int  recv_until_end_flag(int sockfd, const char *flg, int len_flg, char **ut_buf, u32 *pack_len)$/;"	f
recv_until_flag	vp_sdk/common.c	/^int  recv_until_flag(int sockfd, const char *flg, int len_flg, char **ut_buf, u32 *pack_len)$/;"	f
reduce_run	vp_mod/mod_cache_fifo.c	/^void *reduce_run(void *arg)$/;"	f
reducer	vp_mod/mod_cache_fifo.h	/^    tfunc_reducer reducer;$/;"	m	struct:_cache_handle
reg_flag	vp_mod/filter_rules.h	/^    int  reg_flag;$/;"	m	struct:__fr_string
regex_match	vp_mod/filter_rules.c	/^regex_match(char *reg_exp, int reg_flag, char *string)$/;"	f	file:
reload_filter_rules	vp_mod/filter_rules.c	/^reload_filter_rules(FILTER *flt, char *svrid)$/;"	f
remove_path_slash	vp_sdk/config.c	/^static char * remove_path_slash(char * s)$/;"	f	file:
remove_pid_file	vp_sdk/common.c	/^int remove_pid_file(const char * pid)$/;"	f
rep_body_ip_addr	vp_ferry/ferry_dahua.c	/^int rep_body_ip_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_body_rtsp_addr	vp_ferry/ferry_dahua.c	/^int rep_body_rtsp_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_cli_req_addr	vp_ferry/ferry_dahua.c	/^int rep_cli_req_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_inf_addr	vp_ferry/ferry_dahua.c	/^int rep_inf_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_mac_addr	vp_ferry/ferry_zsyh.c	/^int rep_mac_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_post_req_addr	vp_ferry/ferry_dahua.c	/^int rep_post_req_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
rep_prog_addr	vp_ferry/ferry_dahua.c	/^int rep_prog_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_addr	vp_ferry/ferry_nanyang_h3c_hik.c	/^static int replace_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction)$/;"	f	file:
replace_cascade_addr	vp_ferry/ferry_keda_v2800.c	/^int replace_cascade_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_cmd_ip_port	vp_ferry/common_28181.c	/^int replace_cmd_ip_port(char **pkg, u32 *len_pkg, char *ip_to, u16 port_to)$/;"	f
replace_key_of_from	vp_ferry/common_28181.c	/^int replace_key_of_from(char **ut_buf, u32 *pack_len, char *ip_to, u16 port_to)$/;"	f
replace_received	vp_ferry/common_28181.c	/^int replace_received(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_record_addr	vp_ferry/ferry_keda_v2800.c	/^int replace_record_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_rport_received	vp_ferry/common_28181.c	/^int replace_rport_received(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_sip_contact	vp_sdk/vp_uthttp.c	/^int replace_sip_contact(char **ppbuf, u32 *pbuf_len, char *ip_from, char *ip_to, int port_from, int port_to)$/;"	f
replace_via	vp_ferry/common_28181.c	/^int replace_via(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_via_by_addr	vp_ferry/common_28181.c	/^int replace_via_by_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len, const char *ip, int port)$/;"	f
replace_via_hik_register	vp_ferry/common_28181.c	/^int replace_via_hik_register(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
replace_video_stream_addr	vp_ferry/ferry_keda_v2800.c	/^int replace_video_stream_addr(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
reply_receiver_multiprotocal	vp_sdk/vp_multi_protol.c	/^DO_RECEIVER_T reply_receiver_multiprotocal(int type)$/;"	f
reply_setup_rtsp	vp_ferry/ferry_h3c.c	/^int reply_setup_rtsp(char *ut_buf)$/;"	f
req_cmd	vp_sdk/vp_uthttp.h	/^    char req_cmd[64];       \/\/ request commond$/;"	m	struct:VP_UTHTTP
reqst	vp_sdk/vp_udpproxy.c	/^    char * reqst;              \/\/ reqst data buf$/;"	m	struct:UDP_PROXY_LIST	file:
reqst_cmd	vp_sys/sys_manager.c	/^    int     reqst_cmd;$/;"	m	struct:__tms_reqst	file:
request_receiver_multiprotocal	vp_sdk/vp_multi_protol.c	/^DO_RECEIVER_T request_receiver_multiprotocal(int type)$/;"	f
request_video_info	vp_ferry/ferry_fiber.c	/^static int request_video_info(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
reset_loop_find	vp_sdk/memreplace.c	/^void reset_loop_find(find_mem *fmem, bool head)$/;"	f
response_dealwith	vp_vsudp.c	/^void response_dealwith(clivlist *pcvn, int lsn_sock, int svr_sock, SAI lsn_addr, SAI svr_addr)$/;"	f
restart_sys	vp_sys/sys_manager.c	/^int restart_sys(int sock, char recv_msg[])$/;"	f
rtotal	vp_sys/sys_manager.c	13;"	d	file:
rtpheader	vp_mod/check_protocol_format.h	/^}rtpheader;$/;"	t	typeref:struct:_rtpheader
rtsp_reply	vp_ferry/ferry_h3c_fs.c	/^static int rtsp_reply(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
rtsp_reply	vp_ferry/ferry_h3c_harbin.c	/^static int rtsp_reply(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
rtsp_request	vp_ferry/ferry_h3c_fs.c	/^static int rtsp_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
rtsp_request	vp_ferry/ferry_h3c_harbin.c	/^static int rtsp_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
run_ferry_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * run_ferry_tcp_proxy(void *arg)$/;"	f	file:
run_proxy	vp_ferry/ferry_h3c.c	/^static int run_proxy(char *cliport)$/;"	f	file:
run_proxy	vp_ferry/ferry_sandun.c	/^static int run_proxy(u16 nlport, u32 nlip, u32 ndip)$/;"	f	file:
run_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * run_tcp_proxy(void * arg)$/;"	f	file:
run_thread_tcp_proxy	vp_sdk/vp_uthttp.c	/^int run_thread_tcp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int tout)$/;"	f
run_thread_tout_tcp_proxy	vp_sdk/vp_uthttp.c	/^int run_thread_tout_tcp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int tout, bool tout_exit, bool port_free)$/;"	f
run_thread_tout_udp_proxy	vp_sdk/vp_uthttp.c	/^int run_thread_tout_udp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int tout, bool tout_exit, bool port_free)$/;"	f
run_thread_udp_proxy	vp_sdk/vp_uthttp.c	/^int run_thread_udp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int tout)$/;"	f
run_ut_proxy	vp_ferry/vp_ferry.c	/^void run_ut_proxy(int proxy_type, int tout, bool daemon, bool cache, const char *manufactery, const char *parg)$/;"	f
run_vs_proxy	vp_ferry/ferry_h3c_fs.c	/^static int run_vs_proxy(u32 lsn_ip,  u16 lsn_port,$/;"	f	file:
run_vs_proxy	vp_ferry/ferry_h3c_harbin.c	/^static int run_vs_proxy(u32 lsn_ip,  u16 lsn_port,$/;"	f	file:
run_vs_proxy	vp_ferry/ferry_nanyang_h3c_hik.c	/^static int run_vs_proxy(pvp_uthttp put, u32 lip, u16 lport, u32 dip, u16 dport)$/;"	f	file:
run_vs_proxy	vp_sdk/vp_uthttp.c	/^int run_vs_proxy(const char *type, u32 lip, u32 dip, u16 lport, u16 dport, int pmid, int tout, int ferry_port)$/;"	f
run_vs_proxy	vp_vsudp.c	/^void * run_vs_proxy(void * arg)$/;"	f
run_vs_tcp_proxy	vp_ferry/ferry_hik.c	/^static int run_vs_tcp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, u16 bport, int pmid, int tout, int ferry_port)$/;"	f	file:
run_vs_tcp_proxy	vp_sdk/vp_uthttp.c	/^int run_vs_tcp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int pmid, int tout, int ferry_port)$/;"	f
run_vs_udp_proxy	vp_ferry/ferry_hik.c	/^static int run_vs_udp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, u16 bport, int pmid, int tout, int ferry_port)$/;"	f	file:
run_vs_udp_proxy	vp_sdk/vp_uthttp.c	/^int run_vs_udp_proxy(u32 lip, u32 dip, u16 lport, u16 dport, int pmid, int tout, int ferry_port)$/;"	f
s_gldata_mutex	vp_sdk/global_list.c	/^static pthread_mutex_t s_gldata_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
s_ip	tmp.c	/^	unsigned int s_ip;$/;"	m	struct:sock_conf	file:
s_port	tmp.c	/^	unsigned short s_port;$/;"	m	struct:sock_conf	file:
s_tp_mutex	vp_sdk/thread_private_data.c	/^static pthread_mutex_t s_tp_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
sample_rtph	vp_mod/check_protocol_format.c	/^sample_rtph(char *buf, int sz_buf, rtpheader *h)$/;"	f
save_net_config	vp_sys/sys_manager.c	/^static int save_net_config(char recv_msg[])$/;"	f	file:
save_netconf	vp_sys/sys_manager.c	/^int save_netconf(int sock, char recv_msg[])$/;"	f
sc	tmp.c	/^struct sock_conf sc;$/;"	v	typeref:struct:sock_conf
sce_ip	vp_sdk/defflow.h	/^    u32    sce_ip;$/;"	m	struct:flow_stat
sce_port	vp_sdk/defflow.h	/^    u32    sce_port;$/;"	m	struct:flow_stat
search_flow_data	vp_sys/vp_flowsvr.c	/^flow_stat_t * search_flow_data(char *dvs_id)$/;"	f
search_record_server	vp_sdk/pool_port.c	/^u16 search_record_server(char *dip)$/;"	f
sec_elapse	vp_sdk/license.h	/^    LI_TIME     sec_elapse;    \/\/ total seconds of license working.$/;"	m	struct:__process_information
sec_last	vp_sdk/license.h	/^	LI_TIME     sec_last;		\/\/ how many seconds did you registered.$/;"	m	struct:__license_head
sec_left	vp_sdk/license.h	/^    LI_TIME     sec_left;      \/\/ how many seconds left of license.$/;"	m	struct:__process_information
sensitive	vp_mod/filter_rules.h	/^    bool sensitive;$/;"	m	struct:__fr_ctrlcmd
sensitive	vp_mod/filter_rules.h	/^    bool sensitive;$/;"	m	struct:__fr_string
sequence_n	vp_mod/check_protocol_format.h	/^	uint16_t sequence_n;$/;"	m	struct:_rtpheader
sesn_timeout	vp_sdk/vp_uthttp.h	/^    u16 sesn_timeout;$/;"	m	struct:vp_ferry_udp_req
sesn_timeout	vp_sdk/vp_uthttp.h	/^    u32 sesn_timeout;$/;"	m	struct:vp_ferry_req
session_tout	vp_sdk/vp_local_tcpclient.h	/^    u16  session_tout;      \/\/ connect or receive time out$/;"	m	struct:VP_LOCAL_CLIENT_ARGS
session_tout	vp_sdk/vp_uthttp.h	/^    u16  session_tout;      \/\/ session visit time out$/;"	m	struct:VP_UTHTTP
set_app_dir	vp_sdk/common.c	/^const char *set_app_dir(const char *app_dir)$/;"	f
set_init_value	vp_sdk/vp_tcpproxy.c	8;"	d	file:
set_limit	vp_sdk/common.c	/^int set_limit()$/;"	f
set_record_server	vp_sdk/pool_port.c	/^u16 set_record_server(char *dip)$/;"	f
set_rtpheader	vp_mod/check_protocol_format.c	/^set_rtpheader(char *buf, rtpheader *prtph)$/;"	f
set_sock_timeout	vp_sdk/common.c	/^set_sock_timeout(int sockfd, int rTenthSec, int sTenthSec)$/;"	f
set_systime	vp_sys/sys_manager.c	/^int set_systime(int sock, char recv_msg[])$/;"	f
set_trans_arg	vp_sdk/vp_uthttp.c	/^void set_trans_arg(vp_uthtrans *ptrans, int pmid, int tout, u32 peer_ip, $/;"	f
set_webbrowser_nocache	vp_sdk/common.c	/^int set_webbrowser_nocache(char **reqst, int *pack_len)$/;"	f
setnonblocking	vp_sdk/common.c	/^int setnonblocking(int sockfd)$/;"	f
setup_rtsp	vp_ferry/ferry_h3c.c	/^int setup_rtsp(pvp_uthttp put, char *ut_buf, int *pack_len)$/;"	f
show_usage	vp_mod/mod_arg.c	/^static void show_usage(char *app_name)$/;"	f	file:
show_usages	vp_vsudp_m.c	/^void show_usages(char *name)$/;"	f
show_x	vp_mod/mod_cache_fifo.c	/^static void show_x(cache_handle *h)$/;"	f	file:
shutdown_sys	vp_sys/sys_manager.c	/^int shutdown_sys(int sock, char recv_msg[])$/;"	f
sig_pipe	vp_mod/mod_arg.c	/^static void sig_pipe(int signum)$/;"	f	file:
sig_pipe	vp_portmap.c	/^static void sig_pipe(int signum)$/;"	f	file:
sig_segv	vp_mod/mod_arg.c	/^static void sig_segv(int signum)$/;"	f	file:
sig_segv	vp_portmap.c	/^static void sig_segv(int signum)$/;"	f	file:
sip	vp_sdk/portmap.c	/^    char sip[16];$/;"	m	struct:__portmap	file:
sip	vp_sdk/visit_list.h	/^    u32    sip;    \/\/ source client ip$/;"	m	struct:__cli_visit_list
sip	vp_sdk/vp_uthttp.h	/^    u32  sip;$/;"	m	struct:vp_ferry_tcp_req
sip	vp_sdk/vp_uthttp.h	/^    u32 sip;$/;"	m	struct:vp_ferry_udp_req
sip_is	vp_ferry/common_28181.c	/^bool sip_is(const char *pkg, const char *type)$/;"	f
sip_reqst_addr	vp_ferry/ferry_h3c_fs.c	/^static int sip_reqst_addr(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
sip_reqst_addr	vp_ferry/ferry_h3c_harbin.c	/^static int sip_reqst_addr(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
sip_request	vp_ferry/ferry_h3c_fs.c	/^static int sip_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
sip_request	vp_ferry/ferry_h3c_harbin.c	/^static int sip_request(pvp_uthttp put, char **ppbuf, u32 *pack_len)$/;"	f	file:
sock_conf	tmp.c	/^struct sock_conf$/;"	s	file:
sock_recv	vp_mod/mod_chunked.h	/^    int  sock_recv;$/;"	m	struct:_modchunked_t
sock_send	vp_mod/mod_chunked.h	/^    int  sock_send;$/;"	m	struct:_modchunked_t
sockfd	vp_sdk/visit_list.h	/^    int    sockfd;         \/* for distribute *\/$/;"	m	struct:__cli_visit_list
sport	vp_sdk/portmap.c	/^    char sport[8];$/;"	m	struct:__portmap	file:
sport	vp_sdk/visit_list.h	/^    u16    sport;  \/\/ source client port$/;"	m	struct:__cli_visit_list
sport	vp_sdk/vp_uthttp.h	/^    u16  sport;$/;"	m	struct:vp_ferry_tcp_req
sport	vp_sdk/vp_uthttp.h	/^    u16 sport;$/;"	m	struct:vp_ferry_udp_req
src_ip	vp_sdk/vp_uthttp.h	/^    u32  src_ip;$/;"	m	struct:VP_UTHTTP
src_port	vp_sdk/vp_uthttp.h	/^    u16  src_port;$/;"	m	struct:VP_UTHTTP
ssrc	vp_mod/check_protocol_format.h	/^    uint32_t ssrc;$/;"	m	struct:_rtpheader
start_datang_proxy	vp_ferry/ferry_datang.c	/^int start_datang_proxy(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
start_ferry_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * start_ferry_tcp_proxy(void * arg)$/;"	f	file:
start_ferry_udp_proxy	vp_sdk/vp_udpproxy.c	/^static void * start_ferry_udp_proxy(void *arg)$/;"	f	file:
start_license	vp_sdk/common.c	/^start_license(void(*before_exit)(int))$/;"	f
start_port	vp_sdk/pool_port.h	/^    u16  start_port;        \/\/ init begin port (PORT_RECORD)$/;"	m	struct:play_record
start_proxy	vp_sdk/portmap.c	/^static int start_proxy(vp_uthtrans *__ut)$/;"	f	file:
start_sshd	vp_sys/sys_manager.c	/^int start_sshd(int sock, char recv_msg[])$/;"	f
start_tcp_proxy	vp_sdk/vp_tcpproxy.c	/^static void * start_tcp_proxy(void * arg)$/;"	f	file:
start_udp_proxy	vp_sdk/vp_udpproxy.c	/^static void * start_udp_proxy(void * arg)$/;"	f	file:
start_vs_proxy	vp_ferry/ferry_huasan.c	/^static int start_vs_proxy(clivlist *pcvn, char *type)$/;"	f	file:
start_vstream_proxy	vp_sdk/common.c	/^int start_vstream_proxy(char * proto_type, char * arg[])$/;"	f
stat	vp_ferry/ferry_amplesky_28181.c	/^    int stat; \/\/ whether package can go throuth$/;"	m	struct:_sessions	file:
stat	vp_ferry/ferry_hik_28181.c	/^    int stat; \/\/ whether package can go throuth$/;"	m	struct:_sessions	file:
stat	vp_mod/filter_rules.h	/^	int  stat;	\/\/ 0->black list; 1->white list$/;"	m	struct:__fr_ctrlcmd
stat	vp_mod/filter_rules.h	/^	int  stat;	\/\/ 0->black list; 1->white list$/;"	m	struct:__fr_proto
stat	vp_mod/filter_rules.h	/^	int stat;	\/\/ 0->black list; 1->white list$/;"	m	struct:__fr_accctl
stat	vp_mod/filter_rules.h	/^	int stat;	\/\/ 0->black list; 1->white list$/;"	m	struct:__fr_ip
stat	vp_mod/filter_rules.h	/^	int stat;	\/\/ 0->black list; 1->white list$/;"	m	struct:__fr_time
steal_line	vp_sys/sys_manager.c	/^void steal_line(char *buf, int buf_len, char *line, char *ip, char *mask)$/;"	f
step	vp_sdk/pool_port.c	/^	int step;$/;"	m	struct:_pool_port_segment	file:
stofy	vp_sdk/vp_uthttp.h	/^    u16  stofy;\/\/ received from server by ferry$/;"	m	struct:vp_ferry_tcp_req
stop_sshd	vp_sys/sys_manager.c	/^int stop_sshd(int sock, char recv_msg[])$/;"	f
str	vp_mod/filter_rules.h	/^	char *str;$/;"	m	struct:__flt_item
str2hex	t.c	/^int str2hex(char **str, u32 *len_str)$/;"	f
strncmp_sen	vp_sdk/common.c	/^strncmp_sen(char *s1, char *s2, int n, bool sensitive)$/;"	f
strncpy_safe	vp_mod/filter_rules.c	/^strncpy_safe(char *dest, char *src, size_t n)$/;"	f	file:
strnstr	vp_sdk/common.c	/^strnstr(const char *haystack, const char *needle, int max_len, bool sensitive) $/;"	f
strreplace	vp_sdk/common.c	/^int strreplace(char **content, char *src, char *dest, int times, u32 *len)$/;"	f
strreplace_pos	vp_sdk/common.c	/^int strreplace_pos(char *pos_b, char *pos_e, char **content, char *src, char *dst, int times, u32 *len)$/;"	f
strreply	vp_sdk/common.c	/^int strreply(char **content, char *src, char *dest, int replace_times, u32 *pack_len)$/;"	f
svr_addr	vp_sdk/vp_udpproxy.c	/^    struct sockaddr_in svr_addr;$/;"	m	struct:UDP_PROXY_LIST	typeref:struct:UDP_PROXY_LIST::sockaddr_in	file:
svr_addr	vp_sdk/vp_uthttp.h	/^    SAI  svr_addr;$/;"	m	struct:VP_UTHTTP
svr_sock	vp_sdk/vp_uthttp.h	/^    int  svr_sock;$/;"	m	struct:VP_UTHTTP
svrid	vp_mod/filter_rules.h	/^	char		svrid[16];$/;"	m	struct:__flt_rules
svrsock	vp_sdk/vp_udpproxy.c	/^    int    svrsock;$/;"	m	struct:UDP_PROXY_LIST	file:
sysmana_port	vp_sdk/config.h	/^    u16  sysmana_port;$/;"	m	struct:general_config_t
sz_buffer	vp_mod/mod_cache_fifo.h	/^    int  sz_buffer;$/;"	m	struct:_cache_handle
sz_buffer	vp_sdk/config.h	/^    int sz_buffer;$/;"	m	struct:general_config_t
sz_cache	vp_mod/mod_cache_fifo.h	/^    int  sz_cache;          \/\/ begin to reduce when data size reached sz_cache$/;"	m	struct:_cache_handle
sz_data	vp_sdk/license.h	/^	LI_UINT32   sz_data;    \/\/ data size$/;"	m	struct:__license_append
sz_self	vp_sdk/license.h	/^    LI_UINT32       sz_self;    \/\/ total size of this item(in file).  char        md5[16];    \/\/ md5 value of license file.$/;"	m	struct:__license_history
t	vp_ferry/ferry_amplesky_28181.c	/^    time_t t;$/;"	m	struct:_sessions	file:
t	vp_ferry/ferry_hik_28181.c	/^    time_t t;$/;"	m	struct:_sessions	file:
t_backup_file	vp_mod/mod_tools.c	/^t_backup_file(const char *fname, const char *info)$/;"	f
t_beg	vp_mod/filter_rules.h	/^	int t_beg;$/;"	m	struct:__fr_accctl
t_beg	vp_mod/filter_rules.h	/^	int t_beg;$/;"	m	struct:__fr_time
t_data	vp_sdk/thread_private_data.c	/^	tdata *t_data;$/;"	m	struct:__thread_private_data	file:
t_disbuf	vp_sdk/common.h	118;"	d
t_end	vp_mod/filter_rules.h	/^	int t_end;$/;"	m	struct:__fr_accctl
t_end	vp_mod/filter_rules.h	/^	int t_end;$/;"	m	struct:__fr_time
t_end	vp_sdk/defflow.h	/^    l_int  t_end;$/;"	m	struct:flow_stat
t_get_conf_line	vp_mod/mod_tools.c	/^t_get_conf_line(char *buf, char *store)$/;"	f
t_getfilesz	vp_mod/mod_tools.c	/^t_getfilesz(FILE *f)$/;"	f
t_mode	vp_mod/filter_rules.h	/^	int t_mode;	\/\/ 0->hour; 1->week$/;"	m	struct:__fr_accctl
t_mode	vp_mod/filter_rules.h	/^	int t_mode;	\/\/ 0->hour; 1->week$/;"	m	struct:__fr_time
t_pplist	vp_vstcp.c	/^static   pp_list *t_pplist;$/;"	v	file:
t_read_full_file	vp_mod/mod_tools.c	/^t_read_full_file(const char *fpath, char **buf, size_t *sz_buf, size_t sz_limit)$/;"	f
t_read_full_file_by_stream	vp_mod/mod_tools.c	/^t_read_full_file_by_stream(FILE *pf, char **buf, size_t *sz_buf, size_t sz_limit)$/;"	f
t_start	vp_sdk/defflow.h	/^    l_int  t_start;$/;"	m	struct:flow_stat
t_update	vp_sdk/defflow.h	/^    l_int  t_update;$/;"	m	struct:flow_stat
targ	vp_sdk/vp_thread_setting.h	/^	tset_arg	*targ;		\/\/ arguments of thread setting$/;"	m	struct:__thread_setting
tcp_accept	vp_sdk/vp_uthttp.c	/^int tcp_accept(int lsn_sock, SAI *cliaddr, pvp_uthtrans puthtrans)$/;"	f
tcp_connect	vp_sdk/vp_uthttp.c	/^int tcp_connect(int sersock, int tm_out, pvp_uthtrans puthtrans)$/;"	f
tcp_data_deal	vp_sdk/vp_tcpproxy.c	/^static int tcp_data_deal(pvp_uthtrans prun,$/;"	f	file:
tcp_link_con_test	vp_sys/sys_manager.c	/^int tcp_link_con_test(char *tip, char *tport, char *tres)$/;"	f
tdata	vp_sdk/thread_private_data.h	/^}tdata;$/;"	t	typeref:struct:__thread_data
test_user_cert	vp_sdk/common.c	/^bool test_user_cert(SAI cli_addr)$/;"	f
tfunc_reducer	vp_mod/mod_cache_fifo.h	/^typedef int (*tfunc_reducer)(int svr_sock, char *data, int sz_data);$/;"	t
tfunc_runproxy	vp_sdk/vp_uthttp.h	/^typedef void*(*tfunc_runproxy)(void*);$/;"	t
th_set	vp_sdk/vp_thread_setting.h	/^}th_set;$/;"	t	typeref:struct:__thread_setting
thread_id	vp_sdk/thread_private_data.c	/^	pthread_t thread_id;$/;"	m	struct:__thread_private_data	file:
time_out	vp_ferry/pm_proxy.h	/^    int time_out;$/;"	m	struct:pm_proxy
timestamp	vp_mod/check_protocol_format.h	/^	uint32_t timestamp;$/;"	m	struct:_rtpheader
tlen	vp_sdk/vp_udpproxy.c	/^    u32    tlen;               \/\/ http pcak total len$/;"	m	struct:UDP_PROXY_LIST	file:
tm	vp_mod/filter_rules.h	/^	time_t tm;$/;"	m	struct:__flt_item
tms_accept	vp_sdk/vp_tcpproxy.c	/^static int tms_accept(int fd, SAI *addr, pvp_uthtrans puthtrans)$/;"	f	file:
tms_reqst	vp_sys/sys_manager.c	/^struct __tms_reqst tms_reqst[] = {$/;"	v	typeref:struct:__tms_reqst
tms_send_data	vp_sdk/vp_udpproxy.c	/^static int tms_send_data(udpproxylist *pn, char *dbuf, u32 len, int side, vp_uthttp *pvp_arg)$/;"	f	file:
token	vp_sdk/process_family.c	/^	int token;$/;"	m	struct:__pf_home	file:
token	vp_sdk/process_family.c	/^	int token;$/;"	m	struct:__pf_member	file:
tp_clr_data	vp_sdk/thread_private_data.c	/^void tp_clr_data()$/;"	f
tp_get_data	vp_sdk/thread_private_data.c	/^tdata *tp_get_data(const char *name)$/;"	f
tp_getdata_from_priv	vp_sdk/thread_private_data.c	/^static tdata *tp_getdata_from_priv(tprivate *tpriv, const char *name)$/;"	f	file:
tp_mod_data	vp_sdk/thread_private_data.c	/^bool tp_mod_data(const char *name, const char *data, int len)$/;"	f
tp_rm_data	vp_sdk/thread_private_data.c	/^bool tp_rm_data(const char *name)$/;"	f
tp_set_data	vp_sdk/thread_private_data.c	/^bool tp_set_data(const char *name, const char *data, int len)$/;"	f
tp_show_current	vp_sdk/thread_private_data.c	/^void tp_show_current()$/;"	f
tp_show_tdata	vp_sdk/thread_private_data.c	/^void tp_show_tdata(tdata *tdata)$/;"	f
tp_showall	vp_sdk/thread_private_data.c	/^void tp_showall()$/;"	f
tprivate	vp_sdk/thread_private_data.c	/^}tprivate;$/;"	t	typeref:struct:__thread_private_data	file:
transceiver_pack	vp_vstcp.c	/^int transceiver_pack(clivlist *pn, int operate, int rsock, int ssock, int *frm_cnt)$/;"	f
trim	tmp.c	/^char* trim(char *str)$/;"	f
trim	vp_sdk/common.c	/^trim(char *str)$/;"	f
trimleft	vp_sdk/common.c	/^trimleft(char *str)$/;"	f
trimright	vp_sdk/common.c	/^trimright(char *str)$/;"	f
true	vp_sdk/udeftype.h	/^    true = 1,$/;"	e	enum:__anon3
tset	vp_sdk/visit_list.h	/^    th_set tset;$/;"	m	struct:__cli_visit_list
tset	vp_sdk/vp_uthttp.h	/^    th_set tset;$/;"	m	struct:VP_UTHTTP
tset_arg	vp_sdk/vp_thread_setting.h	/^}tset_arg;$/;"	t	typeref:struct:__tset_arg
tset_clear	vp_sdk/vp_thread_setting.c	/^void tset_clear(th_set *tset)$/;"	f
tset_conn_times	vp_sdk/vp_thread_setting.c	/^void tset_conn_times(th_set *tset, int times)$/;"	f
tset_enable_chunked	vp_sdk/vp_thread_setting.c	/^void tset_enable_chunked(th_set *tset)$/;"	f
tset_enable_proto_tms_client	vp_sdk/vp_thread_setting.c	/^void tset_enable_proto_tms_client(th_set *tset, int type)$/;"	f
tset_enable_proto_tms_server	vp_sdk/vp_thread_setting.c	/^void tset_enable_proto_tms_server(th_set *tset, int type)$/;"	f
tset_enable_proto_ums_client	vp_sdk/vp_thread_setting.c	/^void tset_enable_proto_ums_client(th_set *tset, int type)$/;"	f
tset_enable_proto_ums_server	vp_sdk/vp_thread_setting.c	/^void tset_enable_proto_ums_server(th_set *tset, int type)$/;"	f
tset_fetch_arg	vp_sdk/vp_thread_setting.c	/^tset_arg *tset_fetch_arg(th_set *tset, e_flg_tset flg)$/;"	f
tset_is_flg_set	vp_sdk/vp_thread_setting.c	/^bool tset_is_flg_set(th_set *tset, e_flg_tset flg)$/;"	f
tset_none	vp_sdk/vp_thread_setting.c	/^void tset_none(th_set *tset)$/;"	f
tset_port_free	vp_sdk/vp_thread_setting.c	/^void tset_port_free(th_set *tset)$/;"	f
tset_rm	vp_sdk/vp_thread_setting.c	/^void tset_rm(th_set *tset, e_flg_tset flg)$/;"	f
tset_set	vp_sdk/vp_thread_setting.c	/^bool tset_set(th_set *tset, e_flg_tset flg, bool has_arg, void *arg_ptr, int64_t arg_n)$/;"	f
tset_thread_tout	vp_sdk/vp_thread_setting.c	/^void tset_thread_tout(th_set *tset, time_t tout)$/;"	f
tvlast	vp_sdk/vp_udpproxy.c	/^    struct timeval tvlast;$/;"	m	struct:UDP_PROXY_LIST	typeref:struct:UDP_PROXY_LIST::timeval	file:
type_n	vp_mod/mod_videoformat_filter.c	/^    int  type_n;$/;"	m	struct:_videoformat_t	file:
type_string	vp_mod/mod_videoformat_filter.c	/^    char type_string[32];$/;"	m	struct:_videoformat_t	file:
u16	vp_sdk/config.h	/^typedef uint16_t	u16;$/;"	t
u32	vp_sdk/config.h	/^typedef uint32_t	u32;$/;"	t
u64	vp_sdk/config.h	/^typedef uint64_t	u64;$/;"	t
u8	vp_sdk/config.h	/^typedef uint8_t		u8;$/;"	t
u_char	vp_sdk/config.h	/^typedef unsigned char u_char;$/;"	t
u_mac_addr	vp_ferry/ferry_zsyh.c	/^static char u_mac_addr[17] = {0};$/;"	v	file:
u_pplist	vp_vsudp.c	/^static   pp_list *u_pplist;$/;"	v	file:
udp_ferry_send_data	vp_sdk/vp_udpproxy.c	/^static int udp_ferry_send_data(udpproxylist *pn, char *dbuf, u32 len, int side, vp_uthttp *pvp_arg)$/;"	f	file:
udp_link_con_test	vp_sys/sys_manager.c	/^int udp_link_con_test(char *chk_ip, char *chk_port, char *ures)$/;"	f
udp_transceiver_data	vp_sdk/vp_udpproxy.c	/^static int udp_transceiver_data(pvp_uthtrans puh,$/;"	f	file:
udpproxylist	vp_sdk/vp_udpproxy.c	/^} *pudpproxylist, udpproxylist;$/;"	t	typeref:struct:UDP_PROXY_LIST	file:
ul_int	vp_sdk/config.h	/^typedef unsigned long int ul_int;$/;"	t
uname	vp_mod/filter_rules.h	/^	char uname[128];$/;"	m	struct:__fr_accctl
uname	vp_mod/filter_rules.h	/^	char uname[32];$/;"	m	struct:__flt_item
update_content_len	vp_sdk/common.c	/^void update_content_len(char **ut_buf, u32 *pack_len)$/;"	f
update_content_length	vp_ferry/ferry_dahua.c	/^void update_content_length(char **ut_buf, u32 *pack_len)$/;"	f
update_content_length	vp_ferry/ferry_fiber.c	/^static void update_content_length(char **ut_buf, u32 *pack_len)$/;"	f	file:
user_clear_online	vp_mod/user_online.c	/^void user_clear_online()$/;"	f
user_is_online	vp_mod/user_online.c	/^user_is_online(char *uname)$/;"	f
user_offline	vp_mod/user_online.c	/^user_offline(const char *uname, char *client_ip, const char *service_id)$/;"	f
user_online	vp_mod/user_online.c	/^user_online(const char *uname, char *client_ip, const char *service_id)$/;"	f
usr_name	vp_sdk/defflow.h	/^    char   usr_name[16];$/;"	m	struct:flow_stat
ut_parse_req_data	vp_sdk/vp_uthttp.c	/^int ut_parse_req_data(char **reqst, char *dbuf, int ret, u32 *dtotal)$/;"	f
v_num	vp_sdk/vp_distribute.h	/^    u8   v_num;                  \/\/ client connect num$/;"	m	struct:video_way
v_ser	vp_sdk/vp_distribute.h	/^} v_ser;$/;"	t	typeref:struct:video_visit_server
v_way	vp_sdk/vp_distribute.h	/^} v_way;$/;"	t	typeref:struct:video_way
val	vp_sdk/map.h	/^  void *val;$/;"	m	struct:node
version	vp_mod/check_protocol_format.h	/^	unsigned char version:2;$/;"	m	struct:_rtpheader
version	vp_sdk/license.h	/^    LI_UINT32   version;$/;"	m	struct:__license_information
version	vp_sdk/license.h	/^    LI_UINT32   version;$/;"	m	struct:__process_information
video_reply	vp_ferry/ferry_keda_v2800.c	/^static int video_reply(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f	file:
video_visit_list	vp_sdk/vp_distribute.h	/^typedef struct video_visit_list {$/;"	s
video_visit_node	vp_sdk/vp_distribute.h	/^typedef struct video_visit_node {$/;"	s
video_visit_server	vp_sdk/vp_distribute.h	/^typedef struct video_visit_server {$/;"	s
video_way	vp_sdk/vp_distribute.h	/^typedef struct video_way {$/;"	s
videoformat_t	vp_mod/mod_videoformat_filter.c	/^}videoformat_t;$/;"	t	typeref:struct:_videoformat_t	file:
videoformats	vp_mod/mod_videoformat_filter.c	/^videoformat_t videoformats[] = $/;"	v
vis_addr	vp_sdk/pool_ip.h	/^    SAI    vis_addr;      \/\/ client addr of only sign visit server$/;"	m	struct:IP_POOL
visit_user	vp_sdk/visit_list.h	/^    char   visit_user[32];$/;"	m	struct:__cli_visit_list
vlist	vp_sdk/visit_list.h	/^} vlist;$/;"	t	typeref:struct:__visit_list
vlist_add	vp_sdk/visit_list.c	/^clivlist * vlist_add(vlist *pvlist, u32 cliip, u16 cliport)$/;"	f
vlist_del	vp_sdk/visit_list.c	/^void vlist_del(vlist *pvlist, u32 cliip, u16 cliport)$/;"	f
vlist_del_all	vp_sdk/visit_list.c	/^void vlist_del_all(vlist *pvlist)$/;"	f
vlist_del_by_cip	vp_sdk/visit_list.c	/^void vlist_del_by_cip(vlist *pvlist, u32 cliip)$/;"	f
vlist_print	vp_sdk/visit_list.c	/^void vlist_print(vlist *pvlist)$/;"	f
vlist_search	vp_sdk/visit_list.c	/^clivlist * vlist_search(vlist *pvlist, u32 cliip, u16 cliport)$/;"	f
vlist_search_by_cip	vp_sdk/visit_list.c	/^clivlist * vlist_search_by_cip(vlist *pvlist, u32 cliip)$/;"	f
vmuattr	vp_sdk/vp_distribute.h	/^    pthread_mutexattr_t vmuattr;$/;"	m	struct:video_visit_list
vmutex	vp_sdk/visit_list.h	/^    pthread_mutex_t vmutex;$/;"	m	struct:__visit_list
vmutex	vp_sdk/vp_distribute.h	/^    pthread_mutex_t     vmutex;$/;"	m	struct:video_visit_list
vp_arg	vp_sdk/vp_udpproxy.c	/^    vp_uthttp vp_arg;$/;"	m	struct:UDP_PROXY_LIST	file:
vp_ferry_req	vp_sdk/vp_uthttp.h	/^typedef struct vp_ferry_req$/;"	s
vp_ferry_req_t	vp_sdk/vp_uthttp.h	/^} vp_ferry_req_t;$/;"	t	typeref:struct:vp_ferry_req
vp_ferry_tcp_req	vp_sdk/vp_uthttp.h	/^typedef struct vp_ferry_tcp_req$/;"	s
vp_ferry_tcp_req_t	vp_sdk/vp_uthttp.h	/^} vp_ferry_tcp_req_t;$/;"	t	typeref:struct:vp_ferry_tcp_req
vp_ferry_udp_req	vp_sdk/vp_uthttp.h	/^typedef struct vp_ferry_udp_req$/;"	s
vp_ferry_udp_req_t	vp_sdk/vp_uthttp.h	/^} vp_ferry_udp_req_t;$/;"	t	typeref:struct:vp_ferry_udp_req
vp_ippool_head	vp_sdk/vp_uthttp.h	/^} vp_ippool_head;$/;"	t	typeref:struct:__vp_ippool_head
vp_local_client	vp_sdk/vp_local_tcpclient.h	/^}vp_local_client;$/;"	t	typeref:struct:VP_LOCAL_CLIENT
vp_local_client_args	vp_sdk/vp_local_tcpclient.h	/^}vp_local_client_args;$/;"	t	typeref:struct:VP_LOCAL_CLIENT_ARGS
vp_uthtrans	vp_sdk/vp_uthttp.h	/^}*pvp_uthtrans, vp_uthtrans;$/;"	t	typeref:struct:VP_UTHTTP_TRANS
vp_uthttp	vp_sdk/vp_uthttp.h	/^} *pvp_uthttp, vp_uthttp;$/;"	t	typeref:struct:VP_UTHTTP
vphttp	vp_sdk/vp_uthttp.h	/^    vp_uthttp vphttp;$/;"	m	struct:VP_UTHTTP_TRANS
vpprintf	vp_sdk/common.c	/^int vpprintf(const char * msg, ...)$/;"	f
vs_list	vp_sdk/vp_distribute.h	/^} vs_list;$/;"	t	typeref:struct:video_visit_list
vs_tcfv	vp_sys/vp_flowsvr.c	12;"	d	file:
vs_tkey	vp_sys/vp_flowsvr.c	13;"	d	file:
vs_tnum	vp_sys/vp_flowsvr.c	11;"	d	file:
vs_tout	vp_sys/vp_flowsvr.c	10;"	d	file:
vser	vp_sdk/vp_distribute.h	/^    v_ser               vser;$/;"	m	struct:video_visit_list
vser_add	vp_sdk/vp_distribute.c	/^v_ser * vser_add(vs_list *pvslist,$/;"	f
vser_addnum	vp_sdk/vp_distribute.h	96;"	d
vser_del	vp_sdk/vp_distribute.c	/^void vser_del(vs_list *pvslist,$/;"	f
vser_del_all	vp_sdk/vp_distribute.c	/^void vser_del_all(vs_list *pvslist)$/;"	f
vser_find	vp_sdk/vp_distribute.c	/^int vser_find(v_ser *pser,$/;"	f
vser_get_dtid	vp_sdk/vp_distribute.c	/^char * vser_get_dtid(char * dtid)$/;"	f
vser_getnum	vp_sdk/vp_distribute.h	90;"	d
vser_lessnum	vp_sdk/vp_distribute.h	102;"	d
vser_print	vp_sdk/vp_distribute.c	/^void vser_print(vs_list *pvslist)$/;"	f
vser_search	vp_sdk/vp_distribute.c	/^v_ser * vser_search(vs_list *pvslist,$/;"	f
vsnode_add	vp_sdk/vp_distribute.c	/^vv_node * vsnode_add(vs_list *pvslist,$/;"	f
vsnode_del	vp_sdk/vp_distribute.c	/^int vsnode_del(vs_list * pvslist,$/;"	f
vsnode_del_all	vp_sdk/vp_distribute.c	/^void vsnode_del_all(vs_list *pvslist, v_ser *pser)$/;"	f
vsnode_print	vp_sdk/vp_distribute.c	/^void vsnode_print(v_ser *pser)$/;"	f
vstream_tout	vp_sdk/visit_list.h	/^    u16    vstream_tout;$/;"	m	struct:__cli_visit_list
vv_node	vp_sdk/vp_distribute.h	/^} vv_node;$/;"	t	typeref:struct:video_visit_node
vvlist	vp_sdk/vp_distribute.h	/^    vv_node vvlist;$/;"	m	struct:video_visit_server
vway	vp_sdk/vp_distribute.h	/^    v_way   vway;$/;"	m	struct:video_visit_server
wh_hreply	vp_sdk/vp_pack.c	/^char wh_hreply[32];$/;"	v
wh_vcclose	vp_sdk/vp_pack.c	/^char wh_vcclose[] = {$/;"	v
wh_vget	vp_sdk/vp_pack.c	/^char wh_vget[] = {$/;"	v
wh_vsclose	vp_sdk/vp_pack.c	/^char wh_vsclose[] = {$/;"	v
wlog	vp_sdk/common.h	120;"	d
wlog2	vp_sdk/common.h	122;"	d
write_flow_value	vp_sdk/flowcli.c	/^int write_flow_value(char *user, u32 sip, u16 sport,$/;"	f
x_errno	vp_sdk/vp_uthttp.h	/^    int x_errno;$/;"	m	struct:__vp_ippool_head
x_get_idle_port	vp_sdk/pool_port.c	/^u16 x_get_idle_port()$/;"	f
x_mark	vp_sdk/vp_distribute.h	/^    int x_mark;                  \/\/ sign the first connect client$/;"	m	struct:video_visit_node
x_run_proxy	vp_ferry/ferry_h3c.c	/^int x_run_proxy(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
x_search_dst_server	vp_sdk/pool_port.c	/^u16  x_search_dst_server(u16 lport, char *dip, u16 *dport)$/;"	f
x_search_server	vp_sdk/pool_port.c	/^u16 x_search_server(char *dip, u16 dport)$/;"	f
x_sendto_xy	vp_sdk/vp_uthttp.c	/^int x_sendto_xy(int sockfd, char *buf, int len, int flags, struct sockaddr *src, $/;"	f
x_set_idle_ipport	vp_sdk/pool_port.c	/^u16 x_set_idle_ipport(char *dip, u16 dport)$/;"	f
x_set_idle_port	vp_sdk/pool_port.c	/^u16 x_set_idle_port(u16 dport)$/;"	f
x_set_server	vp_sdk/pool_port.c	/^u16 x_set_server(char *dip, u16 dport)$/;"	f
x_sign	vp_sdk/vp_distribute.h	/^    char x_sign[32];             \/\/ camera id or device id or other$/;"	m	struct:video_way
zcompress	vp_sdk/zcompress.c	/^int zcompress(Bytef *data, uLong ndata, Bytef *zdata, uLong *nzdata)$/;"	f
zdecompress	vp_sdk/zcompress.c	/^int zdecompress(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)$/;"	f
zhongxing_henan_init	vp_ferry/ferry_henan_zhongxing.c	/^int zhongxing_henan_init(const char *parg)$/;"	f
zhongxing_henan_quit	vp_ferry/ferry_henan_zhongxing.c	/^void zhongxing_henan_quit()$/;"	f
zhongxing_henan_request	vp_ferry/ferry_henan_zhongxing.c	/^int zhongxing_henan_request(pvp_uthttp put, char **ut_buf, u32 *pack_len)$/;"	f
zhongxing_socket	vp_ferry/ferry_henan_zhongxing.c	/^int zhongxing_socket(pvp_uthttp put, int sockfd)$/;"	f
