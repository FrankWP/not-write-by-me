
int do_keda_uncompress(pvp_uthttp put, char **ut_buf, u32 *pack_len, int direction, )
{
    const static char FLG_COMP[] = "\x78\x9c";
    //const static char FLG_COMP[] = "\x02\x23";
    const static int len_head = 39;
    const static int offset_msg_comp_len = 20;
    u16 inet_len_msg_compress = 0;
    u16 len_msg_uncompress = 0;
    unsigned long len_msg_compress_l = 0;
    unsigned long len_msg_uncompress_l = 0;
    unsigned char *pUncompress = NULL;
    unsigned char *ptr = NULL;
    //u32 inet_cascade_ip = put->cli_addr.sin_addr.s_addr;
    //u32 inet_ums_ip = htonl(__gg.outer_addr);

    //puts("------------- originality -----------------------------------");
    //t_disbuf((unsigned char*)*ut_buf, *pack_len);

    // check compress 
    if (memcmp(*ut_buf + len_head + 4, FLG_COMP, sizeof(FLG_COMP)-1) != 0)
        return 1;	// data is not compressed

    memcpy(&inet_len_msg_compress, *ut_buf + offset_msg_comp_len, 2);
    inet_len_msg_compress = htons(ntohs(inet_len_msg_compress) - 4);
    // check protocol 
    if (len_head + ntohs(inet_len_msg_compress) + 4!= (int)*pack_len)
    {
        printf("len com: %d\n", ntohs(inet_len_msg_compress));
        //logdbg_fmt("invalid keda portocol with compress! len:%d, pkg_len:%d", len_head + ntohs(inet_len_msg_compress), *pack_len);
        printf("invalid keda portocol with compress! len:%d, pkg_len:%d", len_head + ntohs(inet_len_msg_compress), *pack_len);
        //puts("------------- originality -----------------------------------");
        //t_disbuf((unsigned char*)*ut_buf, *pack_len);
        return 1;
    }

    memcpy(&len_msg_uncompress, *ut_buf + 41, 2);
    //printf("len uncom 1: %d\n", len_msg_uncompress);
    if (oss_malloc(&pUncompress, len_msg_uncompress) < 0)
    {
        logdbg_out("malloc uncompress memory failed!");
        return -1;
    }

    len_msg_uncompress_l = len_msg_uncompress;
    len_msg_compress_l = ntohs(inet_len_msg_compress);
    ptr = (unsigned char*)(*ut_buf + len_head + 4);
    //puts("--------- before uncompress -----------");
    //t_disbuf(ptr, len_msg_compress_l);
    if (zdecompress(ptr,len_msg_compress_l, pUncompress, &len_msg_uncompress_l) < 0)
    {
        oss_free(&pUncompress);
        logdbg_out("uncompress failed!");
        return -1;
    }

       printf("uncompress len:%ld\n", len_msg_uncompress_l);
       puts("-------- uncompress ----------------------------------------");
       t_disbuf(pUncompress, len_msg_uncompress_l);

    // -------------- PROCESS UNCOMPRESS DATA -------------------
    if (direction == DO_REQST)
        replace_cascade_addr(put, (char**)&pUncompress, (u32*)&len_msg_uncompress_l);
    else
        replace_video_stream_addr(put, (char**)&pUncompress, (u32*)&len_msg_uncompress_l);
    //if (memcmp(pUncompress, &inet_cascade_ip, 4) == 0)
    //memcpy(pUncompress, &inet_ums_ip, 4);
    // -------------- END PROCESS UNCOMPRESS DATA -------------------
    /*
       puts("------- uncompress after replace -------------");
       printf("after uncompress len:%ld\n", len_msg_uncompress_l);
       puts("-------- after uncompress ----------------------------------------");
       t_disbuf(pUncompress, len_msg_uncompress_l);
       */

    // ReCompress
    unsigned char *pNewCompress = NULL;
    unsigned long len_new_compress = len_msg_uncompress + 128; // sometimes compress data is larger than that uncompress.
    oss_malloc(&pNewCompress, len_new_compress);    
    if (zcompress(pUncompress,len_msg_uncompress_l, pNewCompress,&len_new_compress) < 0)
    {
        oss_free(&pUncompress);
        oss_free(&pNewCompress);
        logdbg_out("compress failed!");
        return -1;
    }
    //puts("------------ new compress ----------------------------");
    //t_disbuf(pNewCompress, len_new_compress);

    // update data
    if ((ptr = (unsigned char*)realloc(*ut_buf, len_head + 4 + len_new_compress)) == NULL)
    {
        oss_free(&pUncompress);
        oss_free(&pNewCompress);
        logdbg_out("realloc failed!");
        return -1;
    }
    *ut_buf = (char*)ptr;
    *pack_len = len_head + 4 + len_new_compress;
    memcpy(*ut_buf + len_head + 4, pNewCompress, len_new_compress);
    len_new_compress += 4;
    u16 inet_len_new_compress = htons(len_new_compress);
    memcpy(*ut_buf + offset_msg_comp_len, &inet_len_new_compress, 2);

    //puts("-------- new data -----------");
    //t_disbuf((unsigned char*)*ut_buf, *pack_len);

    oss_free(&pUncompress);
    oss_free(&pNewCompress);

    return 1;
}

