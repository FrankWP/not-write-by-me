#include "../vpheader.h"

ssize_t Recvn(int fd, char *vptr, size_t n) 
{ 
	size_t  nleft; 
	ssize_t nread; 
	char   *ptr; 

	ptr = vptr; 
	nleft = n; 
	while (nleft > 0)
	{ 
		if ( (nread = recv(fd, ptr, nleft, 0)) < 0) 
		{ 
			return -1;
		}
		else if (nread == 0)
		{
			break; 
		}
		nleft -= nread; 
		ptr += nread; 
	}
	return n - nleft;
}

int get_content_len_osp(char *pkg,int start_pos)
{
	char str_len[3] = {0};
	int len = 0;
	char * temp = NULL;

	temp = pkg + start_pos;
	sscanf(temp, "%2s", str_len);
	len = atoi(str_len);

	return len;
}

int do_reply_receiver_http(int sockfd, void *void_put, char **pkg, u32 *len_pkg)
{	

	const static char FLG_HTTP_HEAD_END[] = "\r\n\r\n";
	int length = 0;
	int ret = -1;
	
	if ((ret = recv_until_flag(sockfd, FLG_HTTP_HEAD_END, sizeof(FLG_HTTP_HEAD_END)-1, pkg, len_pkg)) < 0)
		return -1;

	length = get_content_len(*pkg, *len_pkg);
	printf("------- length: %d ---------\n", length);
	t_disbuf(*pkg, *len_pkg);
	puts("--------------------------");
	if ((ret = recv_tail(sockfd, length, pkg, len_pkg)) < 0)
	{
		logwar_out("func_reply_receiver: recv_tail failed!");
		return -1;
	}
	puts(">>>>>>>>>>>>>>>>>>>>");
	t_disbuf(*pkg, *len_pkg);
	puts(">>>>>>>>>>>>>>>>>>>>");

	return 1; 
}
int do_request_receiver_osp(int sockfd, void *put, char **pkg, u32 *len_pkg)
{
	int length = OSP_HEAD_LEN;
//	int length_pos = OSP_START_POS;
#if 1

	char *phead = NULL;
	char *pbody = NULL;
	oss_malloc(&phead, OSP_HEAD_LEN+1);

	if (Recvn(sockfd, phead, OSP_HEAD_LEN) != 0)
	{
		logwar_out("Recvn is failed!\n");
		return -1;	
	}

	length = get_content_len_osp(phead, length);

	oss_malloc(&pbody, length+1);

	if (Recvn(sockfd, pbody, length) != 0)
	{
		logwar_out("Recvn is failed!\n");
		return -1;	
	}
	oss_malloc(pkg,OSP_HEAD_LEN+length+1);
	memcpy(*pkg, phead, OSP_HEAD_LEN);
	memcpy(*pkg+OSP_HEAD_LEN, pbody, length);
	*len_pkg = OSP_HEAD_LEN + length;

	oss_free(&phead);
	oss_free(&pbody);

#endif 
#if 0
	if (recv_tail(sockfd, length, pkg, len_pkg) < 0)
	{
		return -1;	
	}

	length = get_content_len_osp(*pkg, length_pos);

	if (recv_tail(sockfd, length, pkg, len_pkg) < 0)
	{
		return -1;	
	}
#endif

	return 1; 
}

int do_reply_receiver_osp(int sockfd, void *put, char **pkg, u32 *len_pkg)
{

	int length = OSP_HEAD_LEN;
	int length_pos = OSP_START_POS;
	
	if (recv_tail(sockfd, length, pkg, len_pkg) < 0)
	{
		return -1;	
	}

	length = get_content_len_osp(*pkg, length_pos);

	if (recv_tail(sockfd, length, pkg, len_pkg) < 0)
	{
		return -1;	
	}

	return 1;
}

DO_RECEIVER_T reply_receiver_multiprotocal(int type)
{

	int(*do_reply_receiver)(int sockfd, void *put, char **pkg, u32 *len_pkg) = NULL;
	
	switch(type)
	{
		case TYPE_HTTP: 	
			do_reply_receiver = do_reply_receiver_http;
			break;
		case TYPE_OSP:
			do_reply_receiver = do_reply_receiver_osp;
			break;
		default:
			do_reply_receiver = NULL;
	}
	return do_reply_receiver;
}

DO_RECEIVER_T request_receiver_multiprotocal(int type)
{
	int(*do_request_receiver)(int sockfd, void *put, char **pkg, u32 *len_pkg) = NULL;
	switch(type)
	{
		case TYPE_HTTP:
			do_request_receiver = NULL;// do_request_receiver_http;
			break;
		case TYPE_OSP:
			do_request_receiver = do_request_receiver_osp;
			break;
		default:
			do_request_receiver = NULL;
	}
	return do_request_receiver;
}
